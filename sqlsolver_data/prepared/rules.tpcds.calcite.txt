with inv as (select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stdev,mean, case mean when 0 then null else stdev/mean end cov from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean from inventory ,item ,warehouse ,date_dim where inv_item_sk = i_item_sk and inv_warehouse_sk = w_warehouse_sk and inv_date_sk = d_date_sk and d_year =1998 group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo where case mean when 0 then 0 else stdev/mean end > 1) select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov from inv inv1,inv inv2 where inv1.i_item_sk = inv2.i_item_sk and inv1.w_warehouse_sk = inv2.w_warehouse_sk and inv1.d_moy=4 and inv2.d_moy=4+1 order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov ,inv2.d_moy,inv2.mean, inv2.cov
SELECT t3.W_WAREHOUSE_SK, t3.I_ITEM_SK, t3.D_MOY, t3.MEAN, t3.COV, t8.W_WAREHOUSE_SK AS W_WAREHOUSE_SK0, t8.I_ITEM_SK AS I_ITEM_SK0, t8.D_MOY AS D_MOY0, t8.MEAN AS MEAN0, t8.COV AS COV0 FROM (SELECT warehouse.w_warehouse_name AS W_WAREHOUSE_NAME, warehouse.w_warehouse_sk AS W_WAREHOUSE_SK, t0.i_item_sk AS I_ITEM_SK, t0.d_moy AS D_MOY, STDDEV_SAMP(t0.inv_quantity_on_hand) AS STDEV, AVG(t0.inv_quantity_on_hand) AS MEAN, CASE WHEN AVG(t0.inv_quantity_on_hand) = 0 THEN NULL ELSE STDDEV_SAMP(t0.inv_quantity_on_hand) / AVG(t0.inv_quantity_on_hand) END AS COV FROM (SELECT inventory.inv_date_sk, inventory.inv_item_sk, inventory.inv_warehouse_sk, inventory.inv_quantity_on_hand, item.i_item_sk, item.i_item_id, item.i_rec_start_date, item.i_rec_end_date, item.i_item_desc, item.i_current_price, item.i_wholesale_cost, item.i_brand_id, item.i_brand, item.i_class_id, item.i_class, item.i_category_id, item.i_category, item.i_manufact_id, item.i_manufact, item.i_size, item.i_formulation, item.i_color, item.i_units, item.i_container, item.i_manager_id, item.i_product_name, t.d_date_sk, t.d_date_id, t.d_date, t.d_month_seq, t.d_week_seq, t.d_quarter_seq, t.d_year, t.d_dow, t.d_moy, t.d_dom, t.d_qoy, t.d_fy_year, t.d_fy_quarter_seq, t.d_fy_week_seq, t.d_day_name, t.d_quarter_name, t.d_holiday, t.d_weekend, t.d_following_holiday, t.d_first_dom, t.d_last_dom, t.d_same_day_ly, t.d_same_day_lq, t.d_current_day, t.d_current_week, t.d_current_month, t.d_current_quarter, t.d_current_year FROM inventory INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 AND d_moy = 4) AS t ON inventory.inv_date_sk = t.d_date_sk INNER JOIN item ON inventory.inv_item_sk = item.i_item_sk) AS t0 INNER JOIN warehouse ON t0.inv_warehouse_sk = warehouse.w_warehouse_sk GROUP BY t0.i_item_sk, t0.d_moy, warehouse.w_warehouse_sk, warehouse.w_warehouse_name HAVING CASE WHEN AVG(t0.inv_quantity_on_hand) = 0 THEN FALSE ELSE STDDEV_SAMP(t0.inv_quantity_on_hand) / AVG(t0.inv_quantity_on_hand) > 1 END) AS t3 INNER JOIN (SELECT warehouse0.w_warehouse_name AS W_WAREHOUSE_NAME, warehouse0.w_warehouse_sk AS W_WAREHOUSE_SK, t5.i_item_sk AS I_ITEM_SK, t5.d_moy AS D_MOY, STDDEV_SAMP(t5.inv_quantity_on_hand) AS STDEV, AVG(t5.inv_quantity_on_hand) AS MEAN, CASE WHEN AVG(t5.inv_quantity_on_hand) = 0 THEN NULL ELSE STDDEV_SAMP(t5.inv_quantity_on_hand) / AVG(t5.inv_quantity_on_hand) END AS COV FROM (SELECT inventory0.inv_date_sk, inventory0.inv_item_sk, inventory0.inv_warehouse_sk, inventory0.inv_quantity_on_hand, item0.i_item_sk, item0.i_item_id, item0.i_rec_start_date, item0.i_rec_end_date, item0.i_item_desc, item0.i_current_price, item0.i_wholesale_cost, item0.i_brand_id, item0.i_brand, item0.i_class_id, item0.i_class, item0.i_category_id, item0.i_category, item0.i_manufact_id, item0.i_manufact, item0.i_size, item0.i_formulation, item0.i_color, item0.i_units, item0.i_container, item0.i_manager_id, item0.i_product_name, t4.d_date_sk, t4.d_date_id, t4.d_date, t4.d_month_seq, t4.d_week_seq, t4.d_quarter_seq, t4.d_year, t4.d_dow, t4.d_moy, t4.d_dom, t4.d_qoy, t4.d_fy_year, t4.d_fy_quarter_seq, t4.d_fy_week_seq, t4.d_day_name, t4.d_quarter_name, t4.d_holiday, t4.d_weekend, t4.d_following_holiday, t4.d_first_dom, t4.d_last_dom, t4.d_same_day_ly, t4.d_same_day_lq, t4.d_current_day, t4.d_current_week, t4.d_current_month, t4.d_current_quarter, t4.d_current_year FROM inventory AS inventory0 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 AND d_moy = 4 + 1) AS t4 ON inventory0.inv_date_sk = t4.d_date_sk INNER JOIN item AS item0 ON inventory0.inv_item_sk = item0.i_item_sk) AS t5 INNER JOIN warehouse AS warehouse0 ON t5.inv_warehouse_sk = warehouse0.w_warehouse_sk GROUP BY t5.i_item_sk, t5.d_moy, warehouse0.w_warehouse_sk, warehouse0.w_warehouse_name HAVING CASE WHEN AVG(t5.inv_quantity_on_hand) = 0 THEN FALSE ELSE STDDEV_SAMP(t5.inv_quantity_on_hand) / AVG(t5.inv_quantity_on_hand) > 1 END) AS t8 ON t3.I_ITEM_SK = t8.I_ITEM_SK AND t3.W_WAREHOUSE_SK = t8.W_WAREHOUSE_SK ORDER BY t3.W_WAREHOUSE_SK, t3.I_ITEM_SK, t3.D_MOY, t3.MEAN, t3.COV, t8.D_MOY, t8.MEAN, t8.COV
with inv as (select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stdev,mean, case mean when 0 then null else stdev/mean end cov from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean from inventory ,item ,warehouse ,date_dim where inv_item_sk = i_item_sk and inv_warehouse_sk = w_warehouse_sk and inv_date_sk = d_date_sk and d_year =1998 group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo where case mean when 0 then 0 else stdev/mean end > 1) select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov from inv inv1,inv inv2 where inv1.i_item_sk = inv2.i_item_sk and inv1.w_warehouse_sk = inv2.w_warehouse_sk and inv1.d_moy=4 and inv2.d_moy=4+1 and inv1.cov > 1.5 order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov ,inv2.d_moy,inv2.mean, inv2.cov
SELECT t3.W_WAREHOUSE_SK, t3.I_ITEM_SK, t3.D_MOY, t3.MEAN, t3.COV, t8.W_WAREHOUSE_SK AS W_WAREHOUSE_SK0, t8.I_ITEM_SK AS I_ITEM_SK0, t8.D_MOY AS D_MOY0, t8.MEAN AS MEAN0, t8.COV AS COV0 FROM (SELECT warehouse.w_warehouse_name AS W_WAREHOUSE_NAME, warehouse.w_warehouse_sk AS W_WAREHOUSE_SK, t0.i_item_sk AS I_ITEM_SK, t0.d_moy AS D_MOY, STDDEV_SAMP(t0.inv_quantity_on_hand) AS STDEV, AVG(t0.inv_quantity_on_hand) AS MEAN, CASE WHEN AVG(t0.inv_quantity_on_hand) = 0 THEN NULL ELSE STDDEV_SAMP(t0.inv_quantity_on_hand) / AVG(t0.inv_quantity_on_hand) END AS COV FROM (SELECT inventory.inv_date_sk, inventory.inv_item_sk, inventory.inv_warehouse_sk, inventory.inv_quantity_on_hand, item.i_item_sk, item.i_item_id, item.i_rec_start_date, item.i_rec_end_date, item.i_item_desc, item.i_current_price, item.i_wholesale_cost, item.i_brand_id, item.i_brand, item.i_class_id, item.i_class, item.i_category_id, item.i_category, item.i_manufact_id, item.i_manufact, item.i_size, item.i_formulation, item.i_color, item.i_units, item.i_container, item.i_manager_id, item.i_product_name, t.d_date_sk, t.d_date_id, t.d_date, t.d_month_seq, t.d_week_seq, t.d_quarter_seq, t.d_year, t.d_dow, t.d_moy, t.d_dom, t.d_qoy, t.d_fy_year, t.d_fy_quarter_seq, t.d_fy_week_seq, t.d_day_name, t.d_quarter_name, t.d_holiday, t.d_weekend, t.d_following_holiday, t.d_first_dom, t.d_last_dom, t.d_same_day_ly, t.d_same_day_lq, t.d_current_day, t.d_current_week, t.d_current_month, t.d_current_quarter, t.d_current_year FROM inventory INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 AND d_moy = 4) AS t ON inventory.inv_date_sk = t.d_date_sk INNER JOIN item ON inventory.inv_item_sk = item.i_item_sk) AS t0 INNER JOIN warehouse ON t0.inv_warehouse_sk = warehouse.w_warehouse_sk GROUP BY t0.i_item_sk, t0.d_moy, warehouse.w_warehouse_sk, warehouse.w_warehouse_name HAVING CASE WHEN AVG(t0.inv_quantity_on_hand) = 0 THEN FALSE ELSE STDDEV_SAMP(t0.inv_quantity_on_hand) / AVG(t0.inv_quantity_on_hand) > 1 END AND CASE WHEN AVG(t0.inv_quantity_on_hand) = 0 THEN FALSE ELSE STDDEV_SAMP(t0.inv_quantity_on_hand) / AVG(t0.inv_quantity_on_hand) > 1.5 END) AS t3 INNER JOIN (SELECT warehouse0.w_warehouse_name AS W_WAREHOUSE_NAME, warehouse0.w_warehouse_sk AS W_WAREHOUSE_SK, t5.i_item_sk AS I_ITEM_SK, t5.d_moy AS D_MOY, STDDEV_SAMP(t5.inv_quantity_on_hand) AS STDEV, AVG(t5.inv_quantity_on_hand) AS MEAN, CASE WHEN AVG(t5.inv_quantity_on_hand) = 0 THEN NULL ELSE STDDEV_SAMP(t5.inv_quantity_on_hand) / AVG(t5.inv_quantity_on_hand) END AS COV FROM (SELECT inventory0.inv_date_sk, inventory0.inv_item_sk, inventory0.inv_warehouse_sk, inventory0.inv_quantity_on_hand, item0.i_item_sk, item0.i_item_id, item0.i_rec_start_date, item0.i_rec_end_date, item0.i_item_desc, item0.i_current_price, item0.i_wholesale_cost, item0.i_brand_id, item0.i_brand, item0.i_class_id, item0.i_class, item0.i_category_id, item0.i_category, item0.i_manufact_id, item0.i_manufact, item0.i_size, item0.i_formulation, item0.i_color, item0.i_units, item0.i_container, item0.i_manager_id, item0.i_product_name, t4.d_date_sk, t4.d_date_id, t4.d_date, t4.d_month_seq, t4.d_week_seq, t4.d_quarter_seq, t4.d_year, t4.d_dow, t4.d_moy, t4.d_dom, t4.d_qoy, t4.d_fy_year, t4.d_fy_quarter_seq, t4.d_fy_week_seq, t4.d_day_name, t4.d_quarter_name, t4.d_holiday, t4.d_weekend, t4.d_following_holiday, t4.d_first_dom, t4.d_last_dom, t4.d_same_day_ly, t4.d_same_day_lq, t4.d_current_day, t4.d_current_week, t4.d_current_month, t4.d_current_quarter, t4.d_current_year FROM inventory AS inventory0 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 AND d_moy = 4 + 1) AS t4 ON inventory0.inv_date_sk = t4.d_date_sk INNER JOIN item AS item0 ON inventory0.inv_item_sk = item0.i_item_sk) AS t5 INNER JOIN warehouse AS warehouse0 ON t5.inv_warehouse_sk = warehouse0.w_warehouse_sk GROUP BY t5.i_item_sk, t5.d_moy, warehouse0.w_warehouse_sk, warehouse0.w_warehouse_name HAVING CASE WHEN AVG(t5.inv_quantity_on_hand) = 0 THEN FALSE ELSE STDDEV_SAMP(t5.inv_quantity_on_hand) / AVG(t5.inv_quantity_on_hand) > 1 END) AS t8 ON t3.I_ITEM_SK = t8.I_ITEM_SK AND t3.W_WAREHOUSE_SK = t8.W_WAREHOUSE_SK ORDER BY t3.W_WAREHOUSE_SK, t3.I_ITEM_SK, t3.D_MOY, t3.MEAN, t3.COV, t8.D_MOY, t8.MEAN, t8.COV
select i_item_id ,i_item_desc ,i_current_price from item, inventory, date_dim, store_sales where i_current_price between 41 and 41+30 and inv_item_sk = i_item_sk and d_date_sk=inv_date_sk and d_date between cast('2002-02-17' as date) and (cast('2002-02-17' as date) + interval 60 days) and i_manufact_id in (270,978,183,229) and inv_quantity_on_hand between 100 and 500 and ss_item_sk = i_item_sk group by i_item_id,i_item_desc,i_current_price order by i_item_id limit 100
SELECT t.i_item_id, t.i_item_desc, t.i_current_price FROM (SELECT * FROM item WHERE i_current_price >= 41 AND i_current_price <= 41 + 30 AND i_manufact_id IN (183, 229, 270, 978)) AS t INNER JOIN (SELECT * FROM inventory WHERE inv_quantity_on_hand >= 100 AND inv_quantity_on_hand <= 500) AS t0 ON t.i_item_sk = t0.inv_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2002-02-17' AND d_date <= (DATE '2002-02-17' + 60 * INTERVAL '1' DAY)) AS t1 ON t0.inv_date_sk = t1.d_date_sk INNER JOIN store_sales ON t.i_item_sk = store_sales.ss_item_sk GROUP BY t.i_item_id, t.i_item_desc, t.i_current_price ORDER BY t.i_item_id FETCH NEXT 100 ROWS ONLY
select i_item_id, avg(cs_quantity) agg1, avg(cs_list_price) agg2, avg(cs_coupon_amt) agg3, avg(cs_sales_price) agg4 from catalog_sales, customer_demographics, date_dim, item, promotion where cs_sold_date_sk = d_date_sk and cs_item_sk = i_item_sk and cs_bill_cdemo_sk = cd_demo_sk and cs_promo_sk = p_promo_sk and cd_gender = 'M' and cd_marital_status = 'W' and cd_education_status = '2 yr Degree' and (p_channel_email = 'N' or p_channel_event = 'N') and d_year = 2001 group by i_item_id order by i_item_id limit 100
SELECT item.i_item_id, AVG(catalog_sales.cs_quantity) AS AGG1, AVG(catalog_sales.cs_list_price) AS AGG2, AVG(catalog_sales.cs_coupon_amt) AS AGG3, AVG(catalog_sales.cs_sales_price) AS AGG4 FROM catalog_sales INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'M' AND cd_marital_status = 'W' AND cd_education_status = '2 yr Degree') AS t ON catalog_sales.cs_bill_cdemo_sk = t.cd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001) AS t0 ON catalog_sales.cs_sold_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM promotion WHERE p_channel_email = 'N' OR p_channel_event = 'N') AS t1 ON catalog_sales.cs_promo_sk = t1.p_promo_sk INNER JOIN item ON catalog_sales.cs_item_sk = item.i_item_sk GROUP BY item.i_item_id ORDER BY item.i_item_id FETCH NEXT 100 ROWS ONLY
with ssci as ( select ss_customer_sk customer_sk ,ss_item_sk item_sk from store_sales,date_dim where ss_sold_date_sk = d_date_sk and d_month_seq between 1210 and 1210 + 11 group by ss_customer_sk ,ss_item_sk), csci as( select cs_bill_customer_sk customer_sk ,cs_item_sk item_sk from catalog_sales,date_dim where cs_sold_date_sk = d_date_sk and d_month_seq between 1210 and 1210 + 11 group by cs_bill_customer_sk ,cs_item_sk) select sum(case when ssci.customer_sk is not null and csci.customer_sk is null then 1 else 0 end) store_only ,sum(case when ssci.customer_sk is null and csci.customer_sk is not null then 1 else 0 end) catalog_only ,sum(case when ssci.customer_sk is not null and csci.customer_sk is not null then 1 else 0 end) store_and_catalog from ssci full outer join csci on (ssci.customer_sk=csci.customer_sk and ssci.item_sk = csci.item_sk) limit 100
SELECT SUM(CASE WHEN t1.ss_customer_sk IS NOT NULL AND t3.cs_bill_customer_sk IS NULL THEN 1 ELSE 0 END) AS STORE_ONLY, SUM(CASE WHEN t1.ss_customer_sk IS NULL AND t3.cs_bill_customer_sk IS NOT NULL THEN 1 ELSE 0 END) AS CATALOG_ONLY, SUM(CASE WHEN t1.ss_customer_sk IS NOT NULL AND t3.cs_bill_customer_sk IS NOT NULL THEN 1 ELSE 0 END) AS STORE_AND_CATALOG FROM (SELECT store_sales.ss_customer_sk, store_sales.ss_item_sk FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1210 AND d_month_seq <= 1210 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk GROUP BY store_sales.ss_item_sk, store_sales.ss_customer_sk) AS t1 FULL JOIN (SELECT catalog_sales.cs_bill_customer_sk, catalog_sales.cs_item_sk FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1210 AND d_month_seq <= 1210 + 11) AS t2 ON catalog_sales.cs_sold_date_sk = t2.d_date_sk GROUP BY catalog_sales.cs_bill_customer_sk, catalog_sales.cs_item_sk) AS t3 ON t1.ss_customer_sk = t3.cs_bill_customer_sk AND t1.ss_item_sk = t3.cs_item_sk FETCH NEXT 100 ROWS ONLY
select ss_customer_sk ,sum(act_sales) sumsales from (select ss_item_sk ,ss_ticket_number ,ss_customer_sk ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price else (ss_quantity*ss_sales_price) end act_sales from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk and sr_ticket_number = ss_ticket_number) ,reason where sr_reason_sk = r_reason_sk and r_reason_desc = 'Did not like the model') t group by ss_customer_sk order by sumsales, ss_customer_sk limit 100
SELECT store_sales.ss_customer_sk AS SS_CUSTOMER_SK, SUM(CASE WHEN store_returns.sr_return_quantity IS NOT NULL THEN (store_sales.ss_quantity - store_returns.sr_return_quantity) * store_sales.ss_sales_price ELSE store_sales.ss_quantity * store_sales.ss_sales_price END) AS SUMSALES FROM store_sales LEFT JOIN store_returns ON store_sales.ss_item_sk = store_returns.sr_item_sk AND store_sales.ss_ticket_number = store_returns.sr_ticket_number INNER JOIN (SELECT * FROM reason WHERE r_reason_desc = 'Did not like the model') AS t ON store_returns.sr_reason_sk = t.r_reason_sk GROUP BY store_sales.ss_customer_sk ORDER BY 2, store_sales.ss_customer_sk FETCH NEXT 100 ROWS ONLY
select sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin ,i_category ,i_class ,grouping(i_category)+grouping(i_class) as lochierarchy ,rank() over ( partition by grouping(i_category)+grouping(i_class), case when grouping(i_class) = 0 then i_category end order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent from store_sales ,date_dim d1 ,item ,store where d1.d_year = 2000 and d1.d_date_sk = ss_sold_date_sk and i_item_sk = ss_item_sk and s_store_sk = ss_store_sk and s_state in ('TN','TN','TN','TN', 'TN','TN','TN','TN') group by rollup(i_category,i_class) order by lochierarchy desc ,case when lochierarchy = 0 then i_category end ,rank_within_parent limit 100
SELECT SUM(store_sales.ss_net_profit) / SUM(store_sales.ss_ext_sales_price) AS GROSS_MARGIN, item.i_category AS I_CATEGORY, item.i_class AS I_CLASS, GROUPING(item.i_category) + GROUPING(item.i_class) AS LOCHIERARCHY, RANK() OVER (PARTITION BY GROUPING(item.i_category) + GROUPING(item.i_class), CASE WHEN GROUPING(item.i_class) = 0 THEN item.i_category ELSE NULL END ORDER BY SUM(store_sales.ss_net_profit) / SUM(store_sales.ss_ext_sales_price)) AS RANK_WITHIN_PARENT, CASE WHEN GROUPING(item.i_category) + GROUPING(item.i_class) = 0 THEN item.i_category ELSE NULL END FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t0 ON store_sales.ss_store_sk = t0.s_store_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY ROLLUP(item.i_category, item.i_class) ORDER BY 4 DESC, 6, 5 FETCH NEXT 100 ROWS ONLY
select * from (select i_manager_id ,sum(ss_sales_price) sum_sales ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales from item ,store_sales ,date_dim ,store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and d_month_seq in (1215,1215+1,1215+2,1215+3,1215+4,1215+5,1215+6,1215+7,1215+8,1215+9,1215+10,1215+11) and (( i_category in ('Books','Children','Electronics') and i_class in ('personal','portable','reference','self-help') and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7', 'exportiunivamalg #9','scholaramalgamalg #9')) or( i_category in ('Women','Music','Men') and i_class in ('accessories','classical','fragrances','pants') and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1', 'importoamalg #1'))) group by i_manager_id, d_moy) tmp1 where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1 order by i_manager_id ,avg_monthly_sales ,sum_sales limit 100
SELECT * FROM (SELECT t.i_manager_id AS I_MANAGER_ID, SUM(store_sales.ss_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_manager_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_manager_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_manager_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES FROM (SELECT * FROM item WHERE i_category IN ('Books', 'Children', 'Electronics') AND i_class IN ('personal', 'portable', 'reference', 'self-help') AND i_brand IN ('exportiunivamalg #9', 'scholaramalgamalg #14', 'scholaramalgamalg #7', 'scholaramalgamalg #9') OR i_category IN ('Men', 'Music', 'Women') AND i_class IN ('accessories', 'classical', 'fragrances', 'pants') AND i_brand IN ('amalgimporto #1', 'edu packscholar #1', 'exportiimporto #1', 'importoamalg #1')) AS t INNER JOIN store_sales ON t.i_item_sk = store_sales.ss_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq = 1215 OR (d_month_seq = 1215 + 1 OR d_month_seq = 1215 + 2) OR (d_month_seq = 1215 + 3 OR (d_month_seq = 1215 + 4 OR d_month_seq = 1215 + 5)) OR (d_month_seq = 1215 + 6 OR (d_month_seq = 1215 + 7 OR d_month_seq = 1215 + 8) OR (d_month_seq = 1215 + 9 OR (d_month_seq = 1215 + 10 OR d_month_seq = 1215 + 11)))) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk GROUP BY t.i_manager_id, t0.d_moy) AS t2 WHERE CASE WHEN t2.AVG_MONTHLY_SALES > 0 THEN ABS(t2.SUM_SALES - t2.AVG_MONTHLY_SALES) / t2.AVG_MONTHLY_SALES > 0.1 ELSE FALSE END ORDER BY I_MANAGER_ID, AVG_MONTHLY_SALES, SUM_SALES FETCH NEXT 100 ROWS ONLY
with ss as (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales from store_sales,date_dim,customer_address where ss_sold_date_sk = d_date_sk and ss_addr_sk=ca_address_sk group by ca_county,d_qoy, d_year), ws as (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales from web_sales,date_dim,customer_address where ws_sold_date_sk = d_date_sk and ws_bill_addr_sk=ca_address_sk group by ca_county,d_qoy, d_year) select ss1.ca_county ,ss1.d_year ,ws2.web_sales/ws1.web_sales web_q1_q2_increase ,ss2.store_sales/ss1.store_sales store_q1_q2_increase ,ws3.web_sales/ws2.web_sales web_q2_q3_increase ,ss3.store_sales/ss2.store_sales store_q2_q3_increase from ss ss1 ,ss ss2 ,ss ss3 ,ws ws1 ,ws ws2 ,ws ws3 where ss1.d_qoy = 1 and ss1.d_year = 2002 and ss1.ca_county = ss2.ca_county and ss2.d_qoy = 2 and ss2.d_year = 2002 and ss2.ca_county = ss3.ca_county and ss3.d_qoy = 3 and ss3.d_year = 2002 and ss1.ca_county = ws1.ca_county and ws1.d_qoy = 1 and ws1.d_year = 2002 and ws1.ca_county = ws2.ca_county and ws2.d_qoy = 2 and ws2.d_year = 2002 and ws1.ca_county = ws3.ca_county and ws3.d_qoy = 3 and ws3.d_year =2002 and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end order by ss1.ca_county
SELECT t4.ca_county AS CA_COUNTY, t4.d_year AS D_YEAR, t16.WEB_SALES / t13.WEB_SALES AS WEB_Q1_Q2_INCREASE, t7.STORE_SALES / t4.STORE_SALES AS STORE_Q1_Q2_INCREASE, t1.WEB_SALES / t16.WEB_SALES AS WEB_Q2_Q3_INCREASE, t10.STORE_SALES / t7.STORE_SALES AS STORE_Q2_Q3_INCREASE FROM (SELECT customer_address.ca_county, t.d_qoy, t.d_year, SUM(web_sales.ws_ext_sales_price) AS WEB_SALES FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_qoy = 3 AND d_year = 2002) AS t ON web_sales.ws_sold_date_sk = t.d_date_sk INNER JOIN customer_address ON web_sales.ws_bill_addr_sk = customer_address.ca_address_sk GROUP BY t.d_year, t.d_qoy, customer_address.ca_county) AS t1 INNER JOIN ((SELECT customer_address0.ca_county, t2.d_qoy, t2.d_year, SUM(store_sales.ss_ext_sales_price) AS STORE_SALES FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_qoy = 1 AND d_year = 2002) AS t2 ON store_sales.ss_sold_date_sk = t2.d_date_sk INNER JOIN customer_address AS customer_address0 ON store_sales.ss_addr_sk = customer_address0.ca_address_sk GROUP BY t2.d_year, t2.d_qoy, customer_address0.ca_county) AS t4 INNER JOIN (SELECT customer_address1.ca_county, t5.d_qoy, t5.d_year, SUM(store_sales0.ss_ext_sales_price) AS STORE_SALES FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_qoy = 2 AND d_year = 2002) AS t5 ON store_sales0.ss_sold_date_sk = t5.d_date_sk INNER JOIN customer_address AS customer_address1 ON store_sales0.ss_addr_sk = customer_address1.ca_address_sk GROUP BY t5.d_year, t5.d_qoy, customer_address1.ca_county) AS t7 ON t4.ca_county = t7.ca_county INNER JOIN (SELECT customer_address2.ca_county, t8.d_qoy, t8.d_year, SUM(store_sales1.ss_ext_sales_price) AS STORE_SALES FROM store_sales AS store_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_qoy = 3 AND d_year = 2002) AS t8 ON store_sales1.ss_sold_date_sk = t8.d_date_sk INNER JOIN customer_address AS customer_address2 ON store_sales1.ss_addr_sk = customer_address2.ca_address_sk GROUP BY t8.d_year, t8.d_qoy, customer_address2.ca_county) AS t10 ON t7.ca_county = t10.ca_county INNER JOIN (SELECT customer_address3.ca_county, t11.d_qoy, t11.d_year, SUM(web_sales0.ws_ext_sales_price) AS WEB_SALES FROM web_sales AS web_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_qoy = 1 AND d_year = 2002) AS t11 ON web_sales0.ws_sold_date_sk = t11.d_date_sk INNER JOIN customer_address AS customer_address3 ON web_sales0.ws_bill_addr_sk = customer_address3.ca_address_sk GROUP BY t11.d_year, t11.d_qoy, customer_address3.ca_county) AS t13 ON t4.ca_county = t13.ca_county INNER JOIN (SELECT customer_address4.ca_county, t14.d_qoy, t14.d_year, SUM(web_sales1.ws_ext_sales_price) AS WEB_SALES FROM customer_address AS customer_address4 INNER JOIN (web_sales AS web_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_qoy = 2 AND d_year = 2002) AS t14 ON web_sales1.ws_sold_date_sk = t14.d_date_sk) ON customer_address4.ca_address_sk = web_sales1.ws_bill_addr_sk GROUP BY customer_address4.ca_county, t14.d_year, t14.d_qoy) AS t16 ON t13.ca_county = t16.ca_county AND CASE WHEN t4.STORE_SALES > 0 THEN CASE WHEN t13.WEB_SALES > 0 THEN t16.WEB_SALES / t13.WEB_SALES > t7.STORE_SALES / t4.STORE_SALES ELSE FALSE END ELSE FALSE END) ON t1.ca_county = t13.ca_county AND CASE WHEN t7.STORE_SALES > 0 THEN CASE WHEN t16.WEB_SALES > 0 THEN t1.WEB_SALES / t16.WEB_SALES > t10.STORE_SALES / t7.STORE_SALES ELSE FALSE END ELSE FALSE END ORDER BY t4.ca_county
select s_store_name ,s_company_id ,s_street_number ,s_street_name ,s_street_type ,s_suite_number ,s_city ,s_county ,s_state ,s_zip ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end) as days_30 ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end ) as days_31_60 ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end) as days_61_90 ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end) as days_91_120 ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 120) then 1 else 0 end) as days_120 from store_sales ,store_returns ,store ,date_dim d1 ,date_dim d2 where d2.d_year = 2000 and d2.d_moy = 8 and ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_sold_date_sk = d1.d_date_sk and sr_returned_date_sk = d2.d_date_sk and ss_customer_sk = sr_customer_sk and ss_store_sk = s_store_sk group by s_store_name ,s_company_id ,s_street_number ,s_street_name ,s_street_type ,s_suite_number ,s_city ,s_county ,s_state ,s_zip order by s_store_name ,s_company_id ,s_street_number ,s_street_name ,s_street_type ,s_suite_number ,s_city ,s_county ,s_state ,s_zip limit 100
SELECT t0.s_store_name AS S_STORE_NAME, t0.s_company_id AS S_COMPANY_ID, t0.s_street_number AS S_STREET_NUMBER, t0.s_street_name AS S_STREET_NAME, t0.s_street_type AS S_STREET_TYPE, t0.s_suite_number AS S_SUITE_NUMBER, t0.s_city AS S_CITY, t0.s_county AS S_COUNTY, t0.s_state AS S_STATE, t0.s_zip AS S_ZIP, COALESCE(SUM(CASE WHEN t0.sr_returned_date_sk - t0.ss_sold_date_sk <= 30 THEN 1 ELSE 0 END), 0) AS days_30, COALESCE(SUM(CASE WHEN t0.sr_returned_date_sk - t0.ss_sold_date_sk > 30 AND t0.sr_returned_date_sk - t0.ss_sold_date_sk <= 60 THEN 1 ELSE 0 END), 0) AS days_31_60, COALESCE(SUM(CASE WHEN t0.sr_returned_date_sk - t0.ss_sold_date_sk > 60 AND t0.sr_returned_date_sk - t0.ss_sold_date_sk <= 90 THEN 1 ELSE 0 END), 0) AS days_61_90, COALESCE(SUM(CASE WHEN t0.sr_returned_date_sk - t0.ss_sold_date_sk > 90 AND t0.sr_returned_date_sk - t0.ss_sold_date_sk <= 120 THEN 1 ELSE 0 END), 0) AS days_91_120, COALESCE(SUM(CASE WHEN t0.sr_returned_date_sk - t0.ss_sold_date_sk > 120 THEN 1 ELSE 0 END), 0) AS days_120 FROM (SELECT store_sales.ss_sold_date_sk, store_sales.ss_sold_time_sk, store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_cdemo_sk, store_sales.ss_hdemo_sk, store_sales.ss_addr_sk, store_sales.ss_store_sk, store_sales.ss_promo_sk, store_sales.ss_ticket_number, store_sales.ss_quantity, store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_sales_price, store_sales.ss_ext_discount_amt, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_ext_list_price, store_sales.ss_ext_tax, store_sales.ss_coupon_amt, store_sales.ss_net_paid, store_sales.ss_net_paid_inc_tax, store_sales.ss_net_profit, store_returns.sr_returned_date_sk, store_returns.sr_return_time_sk, store_returns.sr_item_sk, store_returns.sr_customer_sk, store_returns.sr_cdemo_sk, store_returns.sr_hdemo_sk, store_returns.sr_addr_sk, store_returns.sr_store_sk, store_returns.sr_reason_sk, store_returns.sr_ticket_number, store_returns.sr_return_quantity, store_returns.sr_return_amt, store_returns.sr_return_tax, store_returns.sr_return_amt_inc_tax, store_returns.sr_fee, store_returns.sr_return_ship_cost, store_returns.sr_refunded_cash, store_returns.sr_reversed_charge, store_returns.sr_store_credit, store_returns.sr_net_loss, store.s_store_sk, store.s_store_id, store.s_rec_start_date, store.s_rec_end_date, store.s_closed_date_sk, store.s_store_name, store.s_number_employees, store.s_floor_space, store.s_hours, store.s_manager, store.s_market_id, store.s_geography_class, store.s_market_desc, store.s_market_manager, store.s_division_id, store.s_division_name, store.s_company_id, store.s_company_name, store.s_street_number, store.s_street_name, store.s_street_type, store.s_suite_number, store.s_city, store.s_county, store.s_state, store.s_zip, store.s_country, store.s_gmt_offset, store.s_tax_precentage, t.d_date_sk, t.d_date_id, t.d_date, t.d_month_seq, t.d_week_seq, t.d_quarter_seq, t.d_year, t.d_dow, t.d_moy, t.d_dom, t.d_qoy, t.d_fy_year, t.d_fy_quarter_seq, t.d_fy_week_seq, t.d_day_name, t.d_quarter_name, t.d_holiday, t.d_weekend, t.d_following_holiday, t.d_first_dom, t.d_last_dom, t.d_same_day_ly, t.d_same_day_lq, t.d_current_day, t.d_current_week, t.d_current_month, t.d_current_quarter, t.d_current_year FROM store_sales INNER JOIN store_returns ON store_sales.ss_ticket_number = store_returns.sr_ticket_number AND store_sales.ss_item_sk = store_returns.sr_item_sk AND store_sales.ss_customer_sk = store_returns.sr_customer_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000 AND d_moy = 8) AS t ON store_returns.sr_returned_date_sk = t.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk) AS t0 INNER JOIN date_dim AS date_dim0 ON t0.ss_sold_date_sk = date_dim0.d_date_sk GROUP BY t0.s_store_name, t0.s_company_id, t0.s_street_number, t0.s_street_name, t0.s_street_type, t0.s_suite_number, t0.s_city, t0.s_county, t0.s_state, t0.s_zip ORDER BY t0.s_store_name, t0.s_company_id, t0.s_street_number, t0.s_street_name, t0.s_street_type, t0.s_suite_number, t0.s_city, t0.s_county, t0.s_state, t0.s_zip FETCH NEXT 100 ROWS ONLY
with ssr as (select s_store_id as store_id, sum(ss_ext_sales_price) as sales, sum(coalesce(sr_return_amt, 0)) as returns, sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit from store_sales left outer join store_returns on (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number), date_dim, store, item, promotion where ss_sold_date_sk = d_date_sk and d_date between cast('2000-08-19' as date) and (cast('2000-08-19' as date) + interval 30 days) and ss_store_sk = s_store_sk and ss_item_sk = i_item_sk and i_current_price > 50 and ss_promo_sk = p_promo_sk and p_channel_tv = 'N' group by s_store_id) , csr as (select cp_catalog_page_id as catalog_page_id, sum(cs_ext_sales_price) as sales, sum(coalesce(cr_return_amount, 0)) as returns, sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit from catalog_sales left outer join catalog_returns on (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number), date_dim, catalog_page, item, promotion where cs_sold_date_sk = d_date_sk and d_date between cast('2000-08-19' as date) and (cast('2000-08-19' as date) + interval 30 days) and cs_catalog_page_sk = cp_catalog_page_sk and cs_item_sk = i_item_sk and i_current_price > 50 and cs_promo_sk = p_promo_sk and p_channel_tv = 'N' group by cp_catalog_page_id) , wsr as (select web_site_id, sum(ws_ext_sales_price) as sales, sum(coalesce(wr_return_amt, 0)) as returns, sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit from web_sales left outer join web_returns on (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number), date_dim, web_site, item, promotion where ws_sold_date_sk = d_date_sk and d_date between cast('2000-08-19' as date) and (cast('2000-08-19' as date) + interval 30 days) and ws_web_site_sk = web_site_sk and ws_item_sk = i_item_sk and i_current_price > 50 and ws_promo_sk = p_promo_sk and p_channel_tv = 'N' group by web_site_id) select channel , id , sum(sales) as sales , sum(returns) as returns , sum(profit) as profit from (select 'store channel' as channel , 'store' || store_id as id , sales , returns , profit from ssr union all select 'catalog channel' as channel , 'catalog_page' || catalog_page_id as id , sales , returns , profit from csr union all select 'web channel' as channel , 'web_site' || web_site_id as id , sales , returns , profit from wsr ) x group by rollup (channel, id) order by channel ,id limit 100
SELECT CHANNEL, ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, 'store' || store.s_store_id AS ID, SUM(store_sales.ss_ext_sales_price) AS SALES, SUM(CASE WHEN store_returns.sr_return_amt IS NOT NULL THEN CAST(store_returns.sr_return_amt AS DECIMAL(19, 0)) ELSE 0 END) AS RETURNS, SUM(store_sales.ss_net_profit - CASE WHEN store_returns.sr_net_loss IS NOT NULL THEN CAST(store_returns.sr_net_loss AS DECIMAL(19, 0)) ELSE 0 END) AS PROFIT FROM store_sales LEFT JOIN store_returns ON store_sales.ss_item_sk = store_returns.sr_item_sk AND store_sales.ss_ticket_number = store_returns.sr_ticket_number INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-19' AND d_date <= (DATE '2000-08-19' + 30 * INTERVAL '1' DAY)) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk INNER JOIN (SELECT * FROM promotion WHERE p_channel_tv = 'N') AS t0 ON store_sales.ss_promo_sk = t0.p_promo_sk INNER JOIN (SELECT * FROM item WHERE i_current_price > 50) AS t1 ON store_sales.ss_item_sk = t1.i_item_sk GROUP BY store.s_store_id UNION ALL SELECT 'catalog channel' AS CHANNEL, 'catalog_page' || catalog_page.cp_catalog_page_id AS ID, SUM(catalog_sales.cs_ext_sales_price) AS SALES, SUM(CASE WHEN catalog_returns.cr_return_amount IS NOT NULL THEN CAST(catalog_returns.cr_return_amount AS DECIMAL(19, 0)) ELSE 0 END) AS RETURNS, SUM(catalog_sales.cs_net_profit - CASE WHEN catalog_returns.cr_net_loss IS NOT NULL THEN CAST(catalog_returns.cr_net_loss AS DECIMAL(19, 0)) ELSE 0 END) AS PROFIT FROM catalog_sales LEFT JOIN catalog_returns ON catalog_sales.cs_item_sk = catalog_returns.cr_item_sk AND catalog_sales.cs_order_number = catalog_returns.cr_order_number INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-19' AND d_date <= (DATE '2000-08-19' + 30 * INTERVAL '1' DAY)) AS t5 ON catalog_sales.cs_sold_date_sk = t5.d_date_sk INNER JOIN catalog_page ON catalog_sales.cs_catalog_page_sk = catalog_page.cp_catalog_page_sk INNER JOIN (SELECT * FROM promotion WHERE p_channel_tv = 'N') AS t6 ON catalog_sales.cs_promo_sk = t6.p_promo_sk INNER JOIN (SELECT * FROM item WHERE i_current_price > 50) AS t7 ON catalog_sales.cs_item_sk = t7.i_item_sk GROUP BY catalog_page.cp_catalog_page_id UNION ALL SELECT 'web channel' AS CHANNEL, 'web_site' || web_site.web_site_id AS ID, SUM(web_sales.ws_ext_sales_price) AS SALES, SUM(CASE WHEN web_returns.wr_return_amt IS NOT NULL THEN CAST(web_returns.wr_return_amt AS DECIMAL(19, 0)) ELSE 0 END) AS RETURNS, SUM(web_sales.ws_net_profit - CASE WHEN web_returns.wr_net_loss IS NOT NULL THEN CAST(web_returns.wr_net_loss AS DECIMAL(19, 0)) ELSE 0 END) AS PROFIT FROM web_sales LEFT JOIN web_returns ON web_sales.ws_item_sk = web_returns.wr_item_sk AND web_sales.ws_order_number = web_returns.wr_order_number INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-19' AND d_date <= (DATE '2000-08-19' + 30 * INTERVAL '1' DAY)) AS t11 ON web_sales.ws_sold_date_sk = t11.d_date_sk INNER JOIN web_site ON web_sales.ws_web_site_sk = web_site.web_site_sk INNER JOIN (SELECT * FROM promotion WHERE p_channel_tv = 'N') AS t12 ON web_sales.ws_promo_sk = t12.p_promo_sk INNER JOIN (SELECT * FROM item WHERE i_current_price > 50) AS t13 ON web_sales.ws_item_sk = t13.i_item_sk GROUP BY web_site.web_site_id) AS t17 GROUP BY ROLLUP(CHANNEL, ID) ORDER BY CHANNEL, ID FETCH NEXT 100 ROWS ONLY
select w_state ,i_item_id ,sum(case when (cast(d_date as date) < cast ('1999-06-11' as date)) then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before ,sum(case when (cast(d_date as date) >= cast ('1999-06-11' as date)) then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after from catalog_sales left outer join catalog_returns on (cs_order_number = cr_order_number and cs_item_sk = cr_item_sk) ,warehouse ,item ,date_dim where i_current_price between 0.99 and 1.49 and i_item_sk = cs_item_sk and cs_warehouse_sk = w_warehouse_sk and cs_sold_date_sk = d_date_sk and d_date between (cast ('1999-06-11' as date) - interval 30 days) and (cast ('1999-06-11' as date) + interval 30 days) group by w_state,i_item_id order by w_state,i_item_id limit 100
SELECT warehouse.w_state AS W_STATE, t.i_item_id AS I_ITEM_ID, SUM(CASE WHEN t0.d_date < DATE '1999-06-11' THEN catalog_sales.cs_sales_price - CASE WHEN catalog_returns.cr_refunded_cash IS NOT NULL THEN CAST(catalog_returns.cr_refunded_cash AS DECIMAL(19, 0)) ELSE 0 END ELSE 0 END) AS SALES_BEFORE, SUM(CASE WHEN t0.d_date >= DATE '1999-06-11' THEN catalog_sales.cs_sales_price - CASE WHEN catalog_returns.cr_refunded_cash IS NOT NULL THEN CAST(catalog_returns.cr_refunded_cash AS DECIMAL(19, 0)) ELSE 0 END ELSE 0 END) AS SALES_AFTER FROM catalog_sales LEFT JOIN catalog_returns ON catalog_sales.cs_order_number = catalog_returns.cr_order_number AND catalog_sales.cs_item_sk = catalog_returns.cr_item_sk INNER JOIN warehouse ON catalog_sales.cs_warehouse_sk = warehouse.w_warehouse_sk INNER JOIN (SELECT * FROM item WHERE i_current_price >= 0.99 AND i_current_price <= 1.49) AS t ON catalog_sales.cs_item_sk = t.i_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= (DATE '1999-06-11' - 30 * INTERVAL '1' DAY) AND d_date <= (DATE '1999-06-11' + 30 * INTERVAL '1' DAY)) AS t0 ON catalog_sales.cs_sold_date_sk = t0.d_date_sk GROUP BY warehouse.w_state, t.i_item_id ORDER BY warehouse.w_state, t.i_item_id FETCH NEXT 100 ROWS ONLY
select promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100 from (select sum(ss_ext_sales_price) promotions from store_sales ,store ,promotion ,date_dim ,customer ,customer_address ,item where ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and ss_promo_sk = p_promo_sk and ss_customer_sk= c_customer_sk and ca_address_sk = c_current_addr_sk and ss_item_sk = i_item_sk and ca_gmt_offset = -7 and i_category = 'Books' and (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y') and s_gmt_offset = -7 and d_year = 2002 and d_moy = 11) promotional_sales, (select sum(ss_ext_sales_price) total from store_sales ,store ,date_dim ,customer ,customer_address ,item where ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and ss_customer_sk= c_customer_sk and ca_address_sk = c_current_addr_sk and ss_item_sk = i_item_sk and ca_gmt_offset = -7 and i_category = 'Books' and s_gmt_offset = -7 and d_year = 2002 and d_moy = 11) all_sales order by promotions, total limit 100
SELECT t12.PROMOTIONS, t4.TOTAL, CAST(t12.PROMOTIONS AS DECIMAL(15, 4)) / CAST(t4.TOTAL AS DECIMAL(15, 4)) * 100 FROM (SELECT SUM(t2.ss_ext_sales_price) AS TOTAL FROM (SELECT * FROM customer_address WHERE ca_gmt_offset = -7) AS t INNER JOIN ((SELECT store_sales.ss_sold_date_sk, store_sales.ss_sold_time_sk, store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_cdemo_sk, store_sales.ss_hdemo_sk, store_sales.ss_addr_sk, store_sales.ss_store_sk, store_sales.ss_promo_sk, store_sales.ss_ticket_number, store_sales.ss_quantity, store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_sales_price, store_sales.ss_ext_discount_amt, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_ext_list_price, store_sales.ss_ext_tax, store_sales.ss_coupon_amt, store_sales.ss_net_paid, store_sales.ss_net_paid_inc_tax, store_sales.ss_net_profit, t1.s_store_sk, t1.s_store_id, t1.s_rec_start_date, t1.s_rec_end_date, t1.s_closed_date_sk, t1.s_store_name, t1.s_number_employees, t1.s_floor_space, t1.s_hours, t1.s_manager, t1.s_market_id, t1.s_geography_class, t1.s_market_desc, t1.s_market_manager, t1.s_division_id, t1.s_division_name, t1.s_company_id, t1.s_company_name, t1.s_street_number, t1.s_street_name, t1.s_street_type, t1.s_suite_number, t1.s_city, t1.s_county, t1.s_state, t1.s_zip, t1.s_country, t1.s_gmt_offset, t1.s_tax_precentage, t0.d_date_sk, t0.d_date_id, t0.d_date, t0.d_month_seq, t0.d_week_seq, t0.d_quarter_seq, t0.d_year, t0.d_dow, t0.d_moy, t0.d_dom, t0.d_qoy, t0.d_fy_year, t0.d_fy_quarter_seq, t0.d_fy_week_seq, t0.d_day_name, t0.d_quarter_name, t0.d_holiday, t0.d_weekend, t0.d_following_holiday, t0.d_first_dom, t0.d_last_dom, t0.d_same_day_ly, t0.d_same_day_lq, t0.d_current_day, t0.d_current_week, t0.d_current_month, t0.d_current_quarter, t0.d_current_year FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 11) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_gmt_offset = -7) AS t1 ON store_sales.ss_store_sk = t1.s_store_sk) AS t2 INNER JOIN customer ON t2.ss_customer_sk = customer.c_customer_sk INNER JOIN (SELECT * FROM item WHERE i_category = 'Books') AS t3 ON t2.ss_item_sk = t3.i_item_sk) ON t.ca_address_sk = customer.c_current_addr_sk) AS t4, (SELECT SUM(t10.ss_ext_sales_price) AS PROMOTIONS FROM (SELECT * FROM customer_address WHERE ca_gmt_offset = -7) AS t5 INNER JOIN ((SELECT t8.ss_sold_date_sk, t8.ss_sold_time_sk, t8.ss_item_sk, t8.ss_customer_sk, t8.ss_cdemo_sk, t8.ss_hdemo_sk, t8.ss_addr_sk, t8.ss_store_sk, t8.ss_promo_sk, t8.ss_ticket_number, t8.ss_quantity, t8.ss_wholesale_cost, t8.ss_list_price, t8.ss_sales_price, t8.ss_ext_discount_amt, t8.ss_ext_sales_price, t8.ss_ext_wholesale_cost, t8.ss_ext_list_price, t8.ss_ext_tax, t8.ss_coupon_amt, t8.ss_net_paid, t8.ss_net_paid_inc_tax, t8.ss_net_profit, t8.s_store_sk, t8.s_store_id, t8.s_rec_start_date, t8.s_rec_end_date, t8.s_closed_date_sk, t8.s_store_name, t8.s_number_employees, t8.s_floor_space, t8.s_hours, t8.s_manager, t8.s_market_id, t8.s_geography_class, t8.s_market_desc, t8.s_market_manager, t8.s_division_id, t8.s_division_name, t8.s_company_id, t8.s_company_name, t8.s_street_number, t8.s_street_name, t8.s_street_type, t8.s_suite_number, t8.s_city, t8.s_county, t8.s_state, t8.s_zip, t8.s_country, t8.s_gmt_offset, t8.s_tax_precentage, t9.p_promo_sk, t9.p_promo_id, t9.p_start_date_sk, t9.p_end_date_sk, t9.p_item_sk, t9.p_cost, t9.p_response_target, t9.p_promo_name, t9.p_channel_dmail, t9.p_channel_email, t9.p_channel_catalog, t9.p_channel_tv, t9.p_channel_radio, t9.p_channel_press, t9.p_channel_event, t9.p_channel_demo, t9.p_channel_details, t9.p_purpose, t9.p_discount_active, t8.d_date_sk, t8.d_date_id, t8.d_date, t8.d_month_seq, t8.d_week_seq, t8.d_quarter_seq, t8.d_year, t8.d_dow, t8.d_moy, t8.d_dom, t8.d_qoy, t8.d_fy_year, t8.d_fy_quarter_seq, t8.d_fy_week_seq, t8.d_day_name, t8.d_quarter_name, t8.d_holiday, t8.d_weekend, t8.d_following_holiday, t8.d_first_dom, t8.d_last_dom, t8.d_same_day_ly, t8.d_same_day_lq, t8.d_current_day, t8.d_current_week, t8.d_current_month, t8.d_current_quarter, t8.d_current_year FROM (SELECT store_sales0.ss_sold_date_sk, store_sales0.ss_sold_time_sk, store_sales0.ss_item_sk, store_sales0.ss_customer_sk, store_sales0.ss_cdemo_sk, store_sales0.ss_hdemo_sk, store_sales0.ss_addr_sk, store_sales0.ss_store_sk, store_sales0.ss_promo_sk, store_sales0.ss_ticket_number, store_sales0.ss_quantity, store_sales0.ss_wholesale_cost, store_sales0.ss_list_price, store_sales0.ss_sales_price, store_sales0.ss_ext_discount_amt, store_sales0.ss_ext_sales_price, store_sales0.ss_ext_wholesale_cost, store_sales0.ss_ext_list_price, store_sales0.ss_ext_tax, store_sales0.ss_coupon_amt, store_sales0.ss_net_paid, store_sales0.ss_net_paid_inc_tax, store_sales0.ss_net_profit, t7.s_store_sk, t7.s_store_id, t7.s_rec_start_date, t7.s_rec_end_date, t7.s_closed_date_sk, t7.s_store_name, t7.s_number_employees, t7.s_floor_space, t7.s_hours, t7.s_manager, t7.s_market_id, t7.s_geography_class, t7.s_market_desc, t7.s_market_manager, t7.s_division_id, t7.s_division_name, t7.s_company_id, t7.s_company_name, t7.s_street_number, t7.s_street_name, t7.s_street_type, t7.s_suite_number, t7.s_city, t7.s_county, t7.s_state, t7.s_zip, t7.s_country, t7.s_gmt_offset, t7.s_tax_precentage, t6.d_date_sk, t6.d_date_id, t6.d_date, t6.d_month_seq, t6.d_week_seq, t6.d_quarter_seq, t6.d_year, t6.d_dow, t6.d_moy, t6.d_dom, t6.d_qoy, t6.d_fy_year, t6.d_fy_quarter_seq, t6.d_fy_week_seq, t6.d_day_name, t6.d_quarter_name, t6.d_holiday, t6.d_weekend, t6.d_following_holiday, t6.d_first_dom, t6.d_last_dom, t6.d_same_day_ly, t6.d_same_day_lq, t6.d_current_day, t6.d_current_week, t6.d_current_month, t6.d_current_quarter, t6.d_current_year FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 11) AS t6 ON store_sales0.ss_sold_date_sk = t6.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_gmt_offset = -7) AS t7 ON store_sales0.ss_store_sk = t7.s_store_sk) AS t8 INNER JOIN (SELECT * FROM promotion WHERE p_channel_dmail = 'Y' OR p_channel_email = 'Y' OR p_channel_tv = 'Y') AS t9 ON t8.ss_promo_sk = t9.p_promo_sk) AS t10 INNER JOIN customer AS customer0 ON t10.ss_customer_sk = customer0.c_customer_sk INNER JOIN (SELECT * FROM item WHERE i_category = 'Books') AS t11 ON t10.ss_item_sk = t11.i_item_sk) ON t5.ca_address_sk = customer0.c_current_addr_sk) AS t12 ORDER BY t12.PROMOTIONS, t4.TOTAL FETCH NEXT 100 ROWS ONLY
with ss as (select s_store_sk, sum(ss_ext_sales_price) as sales, sum(ss_net_profit) as profit from store_sales, date_dim, store where ss_sold_date_sk = d_date_sk and d_date between cast('2000-08-11' as date) and (cast('2000-08-11' as date) + interval 30 days) and ss_store_sk = s_store_sk group by s_store_sk) , sr as (select s_store_sk, sum(sr_return_amt) as returns, sum(sr_net_loss) as profit_loss from store_returns, date_dim, store where sr_returned_date_sk = d_date_sk and d_date between cast('2000-08-11' as date) and (cast('2000-08-11' as date) + interval 30 days) and sr_store_sk = s_store_sk group by s_store_sk), cs as (select cs_call_center_sk, sum(cs_ext_sales_price) as sales, sum(cs_net_profit) as profit from catalog_sales, date_dim where cs_sold_date_sk = d_date_sk and d_date between cast('2000-08-11' as date) and (cast('2000-08-11' as date) + interval 30 days) group by cs_call_center_sk ), cr as (select cr_call_center_sk, sum(cr_return_amount) as returns, sum(cr_net_loss) as profit_loss from catalog_returns, date_dim where cr_returned_date_sk = d_date_sk and d_date between cast('2000-08-11' as date) and (cast('2000-08-11' as date) + interval 30 days) group by cr_call_center_sk ), ws as ( select wp_web_page_sk, sum(ws_ext_sales_price) as sales, sum(ws_net_profit) as profit from web_sales, date_dim, web_page where ws_sold_date_sk = d_date_sk and d_date between cast('2000-08-11' as date) and (cast('2000-08-11' as date) + interval 30 days) and ws_web_page_sk = wp_web_page_sk group by wp_web_page_sk), wr as (select wp_web_page_sk, sum(wr_return_amt) as returns, sum(wr_net_loss) as profit_loss from web_returns, date_dim, web_page where wr_returned_date_sk = d_date_sk and d_date between cast('2000-08-11' as date) and (cast('2000-08-11' as date) + interval 30 days) and wr_web_page_sk = wp_web_page_sk group by wp_web_page_sk) select channel , id , sum(sales) as sales , sum(returns) as returns , sum(profit) as profit from (select 'store channel' as channel , ss.s_store_sk as id , sales , coalesce(returns, 0) as returns , (profit - coalesce(profit_loss,0)) as profit from ss left join sr on ss.s_store_sk = sr.s_store_sk union all select 'catalog channel' as channel , cs_call_center_sk as id , sales , returns , (profit - profit_loss) as profit from cs , cr union all select 'web channel' as channel , ws.wp_web_page_sk as id , sales , coalesce(returns, 0) returns , (profit - coalesce(profit_loss,0)) as profit from ws left join wr on ws.wp_web_page_sk = wr.wp_web_page_sk ) x group by rollup (channel, id) order by channel ,id limit 100
SELECT CHANNEL, ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, t0.s_store_sk AS ID, t0.SALES, CASE WHEN t2.RETURNS IS NOT NULL THEN CAST(t2.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t0.PROFIT - CASE WHEN t2.PROFIT_LOSS IS NOT NULL THEN CAST(t2.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT store.s_store_sk, SUM(store_sales.ss_ext_sales_price) AS SALES, SUM(store_sales.ss_net_profit) AS PROFIT FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-11' AND d_date <= (DATE '2000-08-11' + 30 * INTERVAL '1' DAY)) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk GROUP BY store.s_store_sk) AS t0 LEFT JOIN (SELECT store0.s_store_sk, SUM(store_returns.sr_return_amt) AS RETURNS, SUM(store_returns.sr_net_loss) AS PROFIT_LOSS FROM store_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-11' AND d_date <= (DATE '2000-08-11' + 30 * INTERVAL '1' DAY)) AS t1 ON store_returns.sr_returned_date_sk = t1.d_date_sk INNER JOIN store AS store0 ON store_returns.sr_store_sk = store0.s_store_sk GROUP BY store0.s_store_sk) AS t2 ON t0.s_store_sk = t2.s_store_sk UNION ALL SELECT 'catalog channel' AS CHANNEL, t5.cs_call_center_sk AS ID, t5.SALES, t7.RETURNS, t5.PROFIT - t7.PROFIT_LOSS AS PROFIT FROM (SELECT catalog_sales.cs_call_center_sk, SUM(catalog_sales.cs_ext_sales_price) AS SALES, SUM(catalog_sales.cs_net_profit) AS PROFIT FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-11' AND d_date <= (DATE '2000-08-11' + 30 * INTERVAL '1' DAY)) AS t4 ON catalog_sales.cs_sold_date_sk = t4.d_date_sk GROUP BY catalog_sales.cs_call_center_sk) AS t5, (SELECT catalog_returns.cr_call_center_sk, SUM(catalog_returns.cr_return_amount) AS RETURNS, SUM(catalog_returns.cr_net_loss) AS PROFIT_LOSS FROM catalog_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-11' AND d_date <= (DATE '2000-08-11' + 30 * INTERVAL '1' DAY)) AS t6 ON catalog_returns.cr_returned_date_sk = t6.d_date_sk GROUP BY catalog_returns.cr_call_center_sk) AS t7 UNION ALL SELECT 'web channel' AS CHANNEL, t10.wp_web_page_sk AS ID, t10.SALES, CASE WHEN t12.RETURNS IS NOT NULL THEN CAST(t12.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t10.PROFIT - CASE WHEN t12.PROFIT_LOSS IS NOT NULL THEN CAST(t12.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT web_page.wp_web_page_sk, SUM(web_sales.ws_ext_sales_price) AS SALES, SUM(web_sales.ws_net_profit) AS PROFIT FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-11' AND d_date <= (DATE '2000-08-11' + 30 * INTERVAL '1' DAY)) AS t9 ON web_sales.ws_sold_date_sk = t9.d_date_sk INNER JOIN web_page ON web_sales.ws_web_page_sk = web_page.wp_web_page_sk GROUP BY web_page.wp_web_page_sk) AS t10 LEFT JOIN (SELECT web_page0.wp_web_page_sk, SUM(web_returns.wr_return_amt) AS RETURNS, SUM(web_returns.wr_net_loss) AS PROFIT_LOSS FROM web_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-11' AND d_date <= (DATE '2000-08-11' + 30 * INTERVAL '1' DAY)) AS t11 ON web_returns.wr_returned_date_sk = t11.d_date_sk INNER JOIN web_page AS web_page0 ON web_returns.wr_web_page_sk = web_page0.wp_web_page_sk GROUP BY web_page0.wp_web_page_sk) AS t12 ON t10.wp_web_page_sk = t12.wp_web_page_sk) AS t14 GROUP BY ROLLUP(CHANNEL, ID) ORDER BY CHANNEL, ID FETCH NEXT 100 ROWS ONLY
select distinct(i_product_name) from item i1 where i_manufact_id between 966 and 966+40 and (select count(*) as item_cnt from item where (i_manufact = i1.i_manufact and ((i_category = 'Women' and (i_color = 'bisque' or i_color = 'aquamarine') and (i_units = 'Pallet' or i_units = 'Oz') and (i_size = 'large' or i_size = 'extra large') ) or (i_category = 'Women' and (i_color = 'cornsilk' or i_color = 'black') and (i_units = 'Tsp' or i_units = 'Gross') and (i_size = 'medium' or i_size = 'economy') ) or (i_category = 'Men' and (i_color = 'firebrick' or i_color = 'floral') and (i_units = 'Case' or i_units = 'Pound') and (i_size = 'petite' or i_size = 'small') ) or (i_category = 'Men' and (i_color = 'lemon' or i_color = 'chartreuse') and (i_units = 'Cup' or i_units = 'Tbl') and (i_size = 'large' or i_size = 'extra large') ))) or (i_manufact = i1.i_manufact and ((i_category = 'Women' and (i_color = 'goldenrod' or i_color = 'drab') and (i_units = 'Gram' or i_units = 'Dram') and (i_size = 'large' or i_size = 'extra large') ) or (i_category = 'Women' and (i_color = 'chocolate' or i_color = 'coral') and (i_units = 'Unknown' or i_units = 'Box') and (i_size = 'medium' or i_size = 'economy') ) or (i_category = 'Men' and (i_color = 'turquoise' or i_color = 'cream') and (i_units = 'Lb' or i_units = 'Each') and (i_size = 'petite' or i_size = 'small') ) or (i_category = 'Men' and (i_color = 'plum' or i_color = 'tan') and (i_units = 'Dozen' or i_units = 'Carton') and (i_size = 'large' or i_size = 'extra large') )))) > 0 order by i_product_name limit 100
SELECT i_product_name FROM item i1 WHERE i_manufact_id >= 966 AND i_manufact_id <= 966 + 40 AND (((SELECT COUNT(*) AS ITEM_CNT FROM item WHERE i_manufact = i1.i_manufact AND (i_category = 'Women' AND (i_color = 'bisque' OR i_color = 'aquamarine') AND (i_units = 'Pallet' OR i_units = 'Oz') AND (i_size = 'large' OR i_size = 'extra large') OR i_category = 'Women' AND (i_color = 'cornsilk' OR i_color = 'black') AND (i_units = 'Tsp' OR i_units = 'Gross') AND (i_size = 'medium' OR i_size = 'economy') OR i_category = 'Men' AND (i_color = 'firebrick' OR i_color = 'floral') AND (i_units = 'Case' OR i_units = 'Pound') AND (i_size = 'petite' OR i_size = 'small') OR i_category = 'Men' AND (i_color = 'lemon' OR i_color = 'chartreuse') AND (i_units = 'Cup' OR i_units = 'Tbl') AND (i_size = 'large' OR i_size = 'extra large')) OR i_manufact = i1.i_manufact AND (i_category = 'Women' AND (i_color = 'goldenrod' OR i_color = 'drab') AND (i_units = 'Gram' OR i_units = 'Dram') AND (i_size = 'large' OR i_size = 'extra large') OR i_category = 'Women' AND (i_color = 'chocolate' OR i_color = 'coral') AND (i_units = 'Unknown' OR i_units = 'Box') AND (i_size = 'medium' OR i_size = 'economy') OR i_category = 'Men' AND (i_color = 'turquoise' OR i_color = 'cream') AND (i_units = 'Lb' OR i_units = 'Each') AND (i_size = 'petite' OR i_size = 'small') OR i_category = 'Men' AND (i_color = 'plum' OR i_color = 'tan') AND (i_units = 'Dozen' OR i_units = 'Carton') AND (i_size = 'large' OR i_size = 'extra large'))))) > 0 GROUP BY i_product_name ORDER BY i_product_name FETCH NEXT 100 ROWS ONLY
with ss as ( select i_item_id,sum(ss_ext_sales_price) total_sales from store_sales, date_dim, customer_address, item where i_item_id in (select i_item_id from item where i_category in ('Shoes')) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 9 and ss_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_item_id), cs as ( select i_item_id,sum(cs_ext_sales_price) total_sales from catalog_sales, date_dim, customer_address, item where i_item_id in (select i_item_id from item where i_category in ('Shoes')) and cs_item_sk = i_item_sk and cs_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 9 and cs_bill_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_item_id), ws as ( select i_item_id,sum(ws_ext_sales_price) total_sales from web_sales, date_dim, customer_address, item where i_item_id in (select i_item_id from item where i_category in ('Shoes')) and ws_item_sk = i_item_sk and ws_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 9 and ws_bill_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_item_id) select i_item_id ,sum(total_sales) total_sales from (select * from ss union all select * from cs union all select * from ws) tmp1 group by i_item_id order by i_item_id ,total_sales limit 100
SELECT i_item_id, SUM(TOTAL_SALES) AS TOTAL_SALES FROM (SELECT t3.i_item_id, SUM(store_sales.ss_ext_sales_price) AS TOTAL_SALES FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 9) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t0 ON store_sales.ss_addr_sk = t0.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_item_id IN (SELECT i_item_id AS I_ITEM_ID FROM item WHERE i_category = 'Shoes')) AS t3 ON store_sales.ss_item_sk = t3.i_item_sk GROUP BY t3.i_item_id UNION ALL SELECT t9.i_item_id, SUM(catalog_sales.cs_ext_sales_price) AS TOTAL_SALES FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 9) AS t5 ON catalog_sales.cs_sold_date_sk = t5.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t6 ON catalog_sales.cs_bill_addr_sk = t6.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_item_id IN (SELECT i_item_id AS I_ITEM_ID FROM item WHERE i_category = 'Shoes')) AS t9 ON catalog_sales.cs_item_sk = t9.i_item_sk GROUP BY t9.i_item_id UNION ALL SELECT t15.i_item_id, SUM(web_sales.ws_ext_sales_price) AS TOTAL_SALES FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 9) AS t11 ON web_sales.ws_sold_date_sk = t11.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t12 ON web_sales.ws_bill_addr_sk = t12.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_item_id IN (SELECT i_item_id AS I_ITEM_ID FROM item WHERE i_category = 'Shoes')) AS t15 ON web_sales.ws_item_sk = t15.i_item_sk GROUP BY t15.i_item_id) AS t17 GROUP BY i_item_id ORDER BY i_item_id, 2 FETCH NEXT 100 ROWS ONLY
with results as (select i_item_id, ca_country, ca_state, ca_county, cast(cs_quantity as decimal(12,2)) agg1, cast(cs_list_price as decimal(12,2)) agg2, cast(cs_coupon_amt as decimal(12,2)) agg3, cast(cs_sales_price as decimal(12,2)) agg4, cast(cs_net_profit as decimal(12,2)) agg5, cast(c_birth_year as decimal(12,2)) agg6, cast(cd1.cd_dep_count as decimal(12,2)) agg7 from catalog_sales, customer_demographics cd1, customer_demographics cd2, customer, customer_address, date_dim, item where cs_sold_date_sk = d_date_sk and cs_item_sk = i_item_sk and cs_bill_cdemo_sk = cd1.cd_demo_sk and cs_bill_customer_sk = c_customer_sk and cd1.cd_gender = 'F' and cd1.cd_education_status = 'Secondary' and c_current_cdemo_sk = cd2.cd_demo_sk and c_current_addr_sk = ca_address_sk and c_birth_month in (4,10,2,6,11,7) and d_year = 2000 and ca_state in ('IN','KY','CA','UT','GA','IL','IA') ) select i_item_id, ca_country, ca_state, ca_county, agg1, agg2, agg3, agg4, agg5, agg6, agg7 from ( select i_item_id, ca_country, ca_state, ca_county, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4, avg(agg5) agg5, avg(agg6) agg6, avg(agg7) agg7 from results group by i_item_id, ca_country, ca_state, ca_county union all select i_item_id, ca_country, ca_state, NULL as county, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4, avg(agg5) agg5, avg(agg6) agg6, avg(agg7) agg7 from results group by i_item_id, ca_country, ca_state union all select i_item_id, ca_country, NULL as ca_state, NULL as county, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4, avg(agg5) agg5, avg(agg6) agg6, avg(agg7) agg7 from results group by i_item_id, ca_country union all select i_item_id, NULL as ca_country, NULL as ca_state, NULL as county, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4, avg(agg5) agg5, avg(agg6) agg6, avg(agg7) agg7 from results group by i_item_id union all select NULL AS i_item_id, NULL as ca_country, NULL as ca_state, NULL as county, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4, avg(agg5) agg5, avg(agg6) agg6, avg(agg7) agg7 from results ) foo order by ca_country, ca_state, ca_county, i_item_id limit 100
SELECT * FROM ((SELECT item.i_item_id AS I_ITEM_ID, t1.ca_country AS CA_COUNTRY, t1.ca_state AS CA_STATE, t1.ca_county AS CA_COUNTY, AVG(CAST(catalog_sales.cs_quantity AS DECIMAL(12, 2))) AS AGG1, AVG(CAST(catalog_sales.cs_list_price AS DECIMAL(12, 2))) AS AGG2, AVG(CAST(catalog_sales.cs_coupon_amt AS DECIMAL(12, 2))) AS AGG3, AVG(CAST(catalog_sales.cs_sales_price AS DECIMAL(12, 2))) AS AGG4, AVG(CAST(catalog_sales.cs_net_profit AS DECIMAL(12, 2))) AS AGG5, AVG(CAST(t0.c_birth_year AS DECIMAL(12, 2))) AS AGG6, AVG(CAST(t.cd_dep_count AS DECIMAL(12, 2))) AS AGG7 FROM item INNER JOIN (catalog_sales INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'F' AND cd_education_status = 'Secondary') AS t ON catalog_sales.cs_bill_cdemo_sk = t.cd_demo_sk INNER JOIN (customer_demographics AS customer_demographics0 INNER JOIN (SELECT * FROM customer WHERE c_birth_month IN (2, 4, 6, 7, 10, 11)) AS t0 ON customer_demographics0.cd_demo_sk = t0.c_current_cdemo_sk) ON catalog_sales.cs_bill_customer_sk = t0.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state IN ('CA', 'GA', 'IA', 'IL', 'IN', 'KY', 'UT')) AS t1 ON t0.c_current_addr_sk = t1.ca_address_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000) AS t2 ON catalog_sales.cs_sold_date_sk = t2.d_date_sk) ON item.i_item_sk = catalog_sales.cs_item_sk GROUP BY item.i_item_id, t1.ca_country, t1.ca_state, t1.ca_county ORDER BY t1.ca_country, t1.ca_state, t1.ca_county, item.i_item_id FETCH NEXT 100 ROWS ONLY) UNION ALL (SELECT item0.i_item_id AS I_ITEM_ID, t8.ca_country AS CA_COUNTRY, t8.ca_state AS CA_STATE, NULL AS COUNTY, AVG(CAST(catalog_sales0.cs_quantity AS DECIMAL(12, 2))) AS AGG1, AVG(CAST(catalog_sales0.cs_list_price AS DECIMAL(12, 2))) AS AGG2, AVG(CAST(catalog_sales0.cs_coupon_amt AS DECIMAL(12, 2))) AS AGG3, AVG(CAST(catalog_sales0.cs_sales_price AS DECIMAL(12, 2))) AS AGG4, AVG(CAST(catalog_sales0.cs_net_profit AS DECIMAL(12, 2))) AS AGG5, AVG(CAST(t7.c_birth_year AS DECIMAL(12, 2))) AS AGG6, AVG(CAST(t6.cd_dep_count AS DECIMAL(12, 2))) AS AGG7 FROM item AS item0 INNER JOIN (catalog_sales AS catalog_sales0 INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'F' AND cd_education_status = 'Secondary') AS t6 ON catalog_sales0.cs_bill_cdemo_sk = t6.cd_demo_sk INNER JOIN (customer_demographics AS customer_demographics2 INNER JOIN (SELECT * FROM customer WHERE c_birth_month IN (2, 4, 6, 7, 10, 11)) AS t7 ON customer_demographics2.cd_demo_sk = t7.c_current_cdemo_sk) ON catalog_sales0.cs_bill_customer_sk = t7.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state IN ('CA', 'GA', 'IA', 'IL', 'IN', 'KY', 'UT')) AS t8 ON t7.c_current_addr_sk = t8.ca_address_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000) AS t9 ON catalog_sales0.cs_sold_date_sk = t9.d_date_sk) ON item0.i_item_sk = catalog_sales0.cs_item_sk GROUP BY item0.i_item_id, t8.ca_country, t8.ca_state ORDER BY t8.ca_country, t8.ca_state, NULL, item0.i_item_id FETCH NEXT 100 ROWS ONLY) UNION ALL (SELECT item1.i_item_id AS I_ITEM_ID, t16.ca_country AS CA_COUNTRY, NULL AS CA_STATE, NULL AS COUNTY, AVG(CAST(catalog_sales1.cs_quantity AS DECIMAL(12, 2))) AS AGG1, AVG(CAST(catalog_sales1.cs_list_price AS DECIMAL(12, 2))) AS AGG2, AVG(CAST(catalog_sales1.cs_coupon_amt AS DECIMAL(12, 2))) AS AGG3, AVG(CAST(catalog_sales1.cs_sales_price AS DECIMAL(12, 2))) AS AGG4, AVG(CAST(catalog_sales1.cs_net_profit AS DECIMAL(12, 2))) AS AGG5, AVG(CAST(t15.c_birth_year AS DECIMAL(12, 2))) AS AGG6, AVG(CAST(t14.cd_dep_count AS DECIMAL(12, 2))) AS AGG7 FROM item AS item1 INNER JOIN (catalog_sales AS catalog_sales1 INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'F' AND cd_education_status = 'Secondary') AS t14 ON catalog_sales1.cs_bill_cdemo_sk = t14.cd_demo_sk INNER JOIN (customer_demographics AS customer_demographics4 INNER JOIN (SELECT * FROM customer WHERE c_birth_month IN (2, 4, 6, 7, 10, 11)) AS t15 ON customer_demographics4.cd_demo_sk = t15.c_current_cdemo_sk) ON catalog_sales1.cs_bill_customer_sk = t15.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state IN ('CA', 'GA', 'IA', 'IL', 'IN', 'KY', 'UT')) AS t16 ON t15.c_current_addr_sk = t16.ca_address_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000) AS t17 ON catalog_sales1.cs_sold_date_sk = t17.d_date_sk) ON item1.i_item_sk = catalog_sales1.cs_item_sk GROUP BY item1.i_item_id, t16.ca_country ORDER BY t16.ca_country, NULL, NULL, item1.i_item_id FETCH NEXT 100 ROWS ONLY) UNION ALL (SELECT item2.i_item_id AS I_ITEM_ID, NULL AS CA_COUNTRY, NULL AS CA_STATE, NULL AS COUNTY, AVG(CAST(catalog_sales2.cs_quantity AS DECIMAL(12, 2))) AS AGG1, AVG(CAST(catalog_sales2.cs_list_price AS DECIMAL(12, 2))) AS AGG2, AVG(CAST(catalog_sales2.cs_coupon_amt AS DECIMAL(12, 2))) AS AGG3, AVG(CAST(catalog_sales2.cs_sales_price AS DECIMAL(12, 2))) AS AGG4, AVG(CAST(catalog_sales2.cs_net_profit AS DECIMAL(12, 2))) AS AGG5, AVG(CAST(t23.c_birth_year AS DECIMAL(12, 2))) AS AGG6, AVG(CAST(t22.cd_dep_count AS DECIMAL(12, 2))) AS AGG7 FROM catalog_sales AS catalog_sales2 INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'F' AND cd_education_status = 'Secondary') AS t22 ON catalog_sales2.cs_bill_cdemo_sk = t22.cd_demo_sk INNER JOIN (customer_demographics AS customer_demographics6 INNER JOIN (SELECT * FROM customer WHERE c_birth_month IN (2, 4, 6, 7, 10, 11)) AS t23 ON customer_demographics6.cd_demo_sk = t23.c_current_cdemo_sk) ON catalog_sales2.cs_bill_customer_sk = t23.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state IN ('CA', 'GA', 'IA', 'IL', 'IN', 'KY', 'UT')) AS t24 ON t23.c_current_addr_sk = t24.ca_address_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000) AS t25 ON catalog_sales2.cs_sold_date_sk = t25.d_date_sk INNER JOIN item AS item2 ON catalog_sales2.cs_item_sk = item2.i_item_sk GROUP BY item2.i_item_id ORDER BY NULL, NULL, NULL, item2.i_item_id FETCH NEXT 100 ROWS ONLY) UNION ALL (SELECT NULL AS I_ITEM_ID, NULL AS CA_COUNTRY, NULL AS CA_STATE, NULL AS COUNTY, AVG(CAST(catalog_sales3.cs_quantity AS DECIMAL(12, 2))) AS AGG1, AVG(CAST(catalog_sales3.cs_list_price AS DECIMAL(12, 2))) AS AGG2, AVG(CAST(catalog_sales3.cs_coupon_amt AS DECIMAL(12, 2))) AS AGG3, AVG(CAST(catalog_sales3.cs_sales_price AS DECIMAL(12, 2))) AS AGG4, AVG(CAST(catalog_sales3.cs_net_profit AS DECIMAL(12, 2))) AS AGG5, AVG(CAST(t31.c_birth_year AS DECIMAL(12, 2))) AS AGG6, AVG(CAST(t30.cd_dep_count AS DECIMAL(12, 2))) AS AGG7 FROM item AS item3 INNER JOIN (catalog_sales AS catalog_sales3 INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'F' AND cd_education_status = 'Secondary') AS t30 ON catalog_sales3.cs_bill_cdemo_sk = t30.cd_demo_sk INNER JOIN (customer_demographics AS customer_demographics8 INNER JOIN (SELECT * FROM customer WHERE c_birth_month IN (2, 4, 6, 7, 10, 11)) AS t31 ON customer_demographics8.cd_demo_sk = t31.c_current_cdemo_sk) ON catalog_sales3.cs_bill_customer_sk = t31.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state IN ('CA', 'GA', 'IA', 'IL', 'IN', 'KY', 'UT')) AS t32 ON t31.c_current_addr_sk = t32.ca_address_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000) AS t33 ON catalog_sales3.cs_sold_date_sk = t33.d_date_sk) ON item3.i_item_sk = catalog_sales3.cs_item_sk ORDER BY NULL, NULL, NULL, NULL FETCH NEXT 100 ROWS ONLY)) ORDER BY CA_COUNTRY, CA_STATE, CA_COUNTY, I_ITEM_ID FETCH NEXT 100 ROWS ONLY
select i_item_id, avg(ss_quantity) agg1, avg(ss_list_price) agg2, avg(ss_coupon_amt) agg3, avg(ss_sales_price) agg4 from store_sales, customer_demographics, date_dim, item, promotion where ss_sold_date_sk = d_date_sk and ss_item_sk = i_item_sk and ss_cdemo_sk = cd_demo_sk and ss_promo_sk = p_promo_sk and cd_gender = 'F' and cd_marital_status = 'U' and cd_education_status = 'College' and (p_channel_email = 'N' or p_channel_event = 'N') and d_year = 1998 group by i_item_id order by i_item_id limit 100
SELECT item.i_item_id, AVG(store_sales.ss_quantity) AS AGG1, AVG(store_sales.ss_list_price) AS AGG2, AVG(store_sales.ss_coupon_amt) AS AGG3, AVG(store_sales.ss_sales_price) AS AGG4 FROM store_sales INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'F' AND cd_marital_status = 'U' AND cd_education_status = 'College') AS t ON store_sales.ss_cdemo_sk = t.cd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM promotion WHERE p_channel_email = 'N' OR p_channel_event = 'N') AS t1 ON store_sales.ss_promo_sk = t1.p_promo_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY item.i_item_id ORDER BY item.i_item_id FETCH NEXT 100 ROWS ONLY
select i_item_id, s_state, grouping(s_state) g_state, avg(ss_quantity) agg1, avg(ss_list_price) agg2, avg(ss_coupon_amt) agg3, avg(ss_sales_price) agg4 from store_sales, customer_demographics, date_dim, store, item where ss_sold_date_sk = d_date_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and ss_cdemo_sk = cd_demo_sk and cd_gender = 'M' and cd_marital_status = 'D' and cd_education_status = '4 yr Degree' and d_year = 1998 and s_state in ('TN','TN', 'TN', 'TN', 'TN', 'TN') group by rollup (i_item_id, s_state) order by i_item_id ,s_state limit 100
SELECT item.i_item_id, t1.s_state, GROUPING(t1.s_state) AS G_STATE, AVG(store_sales.ss_quantity) AS AGG1, AVG(store_sales.ss_list_price) AS AGG2, AVG(store_sales.ss_coupon_amt) AS AGG3, AVG(store_sales.ss_sales_price) AS AGG4 FROM item INNER JOIN (store_sales INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'M' AND cd_marital_status = 'D' AND cd_education_status = '4 yr Degree') AS t ON store_sales.ss_cdemo_sk = t.cd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t1 ON store_sales.ss_store_sk = t1.s_store_sk) ON item.i_item_sk = store_sales.ss_item_sk GROUP BY ROLLUP(item.i_item_id, t1.s_state) ORDER BY item.i_item_id, t1.s_state FETCH NEXT 100 ROWS ONLY
select c_last_name ,c_first_name ,ca_city ,bought_city ,ss_ticket_number ,amt,profit from (select ss_ticket_number ,ss_customer_sk ,ca_city bought_city ,sum(ss_coupon_amt) amt ,sum(ss_net_profit) profit from store_sales,date_dim,store,household_demographics,customer_address where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk and store_sales.ss_addr_sk = customer_address.ca_address_sk and (household_demographics.hd_dep_count = 4 or household_demographics.hd_vehicle_count= 4) and date_dim.d_dow in (6,0) and date_dim.d_year in (1998,1998+1,1998+2) and store.s_city in ('Fairview','Midway','Fairview','Midway','Fairview') group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr where ss_customer_sk = c_customer_sk and customer.c_current_addr_sk = current_addr.ca_address_sk and current_addr.ca_city <> bought_city order by c_last_name ,c_first_name ,ca_city ,bought_city ,ss_ticket_number limit 100
SELECT customer.c_last_name AS C_LAST_NAME, customer.c_first_name AS C_FIRST_NAME, customer_address0.ca_city AS CA_CITY, t3.BOUGHT_CITY, t3.SS_TICKET_NUMBER, t3.AMT, t3.PROFIT FROM (SELECT store_sales.ss_ticket_number AS SS_TICKET_NUMBER, store_sales.ss_customer_sk AS SS_CUSTOMER_SK, customer_address.ca_city AS BOUGHT_CITY, SUM(store_sales.ss_coupon_amt) AS AMT, SUM(store_sales.ss_net_profit) AS PROFIT FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_dow IN (0, 6) AND (d_year = 1998 OR d_year = 1998 + 1 OR d_year = 1998 + 2)) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_city IN ('Fairview', 'Midway')) AS t0 ON store_sales.ss_store_sk = t0.s_store_sk INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 4 OR hd_vehicle_count = 4) AS t1 ON store_sales.ss_hdemo_sk = t1.hd_demo_sk INNER JOIN customer_address ON store_sales.ss_addr_sk = customer_address.ca_address_sk GROUP BY store_sales.ss_customer_sk, store_sales.ss_addr_sk, store_sales.ss_ticket_number, customer_address.ca_city) AS t3 INNER JOIN (customer_address AS customer_address0 INNER JOIN customer ON customer_address0.ca_address_sk = customer.c_current_addr_sk) ON customer_address0.ca_city <> t3.BOUGHT_CITY AND t3.SS_CUSTOMER_SK = customer.c_customer_sk ORDER BY customer.c_last_name, customer.c_first_name, customer_address0.ca_city, t3.BOUGHT_CITY, t3.SS_TICKET_NUMBER FETCH NEXT 100 ROWS ONLY
select channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM ( SELECT 'store' as channel, 'ss_hdemo_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price FROM store_sales, item, date_dim WHERE ss_hdemo_sk IS NULL AND ss_sold_date_sk=d_date_sk AND ss_item_sk=i_item_sk UNION ALL SELECT 'web' as channel, 'ws_bill_customer_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price FROM web_sales, item, date_dim WHERE ws_bill_customer_sk IS NULL AND ws_sold_date_sk=d_date_sk AND ws_item_sk=i_item_sk UNION ALL SELECT 'catalog' as channel, 'cs_promo_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price FROM catalog_sales, item, date_dim WHERE cs_promo_sk IS NULL AND cs_sold_date_sk=d_date_sk AND cs_item_sk=i_item_sk) foo GROUP BY channel, col_name, d_year, d_qoy, i_category ORDER BY channel, col_name, d_year, d_qoy, i_category limit 100
SELECT CHANNEL, COL_NAME, D_YEAR, D_QOY, I_CATEGORY, COUNT(*) AS SALES_CNT, SUM(EXT_SALES_PRICE) AS SALES_AMT FROM (SELECT 'store' AS CHANNEL, 'ss_hdemo_sk' AS COL_NAME, date_dim.d_year AS D_YEAR, date_dim.d_qoy AS D_QOY, item.i_category AS I_CATEGORY, t.ss_ext_sales_price AS EXT_SALES_PRICE FROM (SELECT * FROM store_sales WHERE ss_hdemo_sk IS NULL) AS t INNER JOIN item ON t.ss_item_sk = item.i_item_sk INNER JOIN date_dim ON t.ss_sold_date_sk = date_dim.d_date_sk UNION ALL SELECT 'web' AS CHANNEL, 'ws_bill_customer_sk' AS COL_NAME, date_dim0.d_year AS D_YEAR, date_dim0.d_qoy AS D_QOY, item0.i_category AS I_CATEGORY, t1.ws_ext_sales_price AS EXT_SALES_PRICE FROM (SELECT * FROM web_sales WHERE ws_bill_customer_sk IS NULL) AS t1 INNER JOIN item AS item0 ON t1.ws_item_sk = item0.i_item_sk INNER JOIN date_dim AS date_dim0 ON t1.ws_sold_date_sk = date_dim0.d_date_sk UNION ALL SELECT 'catalog' AS CHANNEL, 'cs_promo_sk' AS COL_NAME, date_dim1.d_year AS D_YEAR, date_dim1.d_qoy AS D_QOY, item1.i_category AS I_CATEGORY, t3.cs_ext_sales_price AS EXT_SALES_PRICE FROM (SELECT * FROM catalog_sales WHERE cs_promo_sk IS NULL) AS t3 INNER JOIN item AS item1 ON t3.cs_item_sk = item1.i_item_sk INNER JOIN date_dim AS date_dim1 ON t3.cs_sold_date_sk = date_dim1.d_date_sk) AS t5 GROUP BY CHANNEL, COL_NAME, D_YEAR, D_QOY, I_CATEGORY ORDER BY CHANNEL, COL_NAME, D_YEAR, D_QOY, I_CATEGORY FETCH NEXT 100 ROWS ONLY
select i_product_name ,i_brand ,i_class ,i_category ,avg(inv_quantity_on_hand) qoh from inventory ,date_dim ,item where inv_date_sk=d_date_sk and inv_item_sk=i_item_sk and d_month_seq between 1182 and 1182 + 11 group by rollup(i_product_name ,i_brand ,i_class ,i_category) order by qoh, i_product_name, i_brand, i_class, i_category limit 100
SELECT t1.i_product_name, t1.i_brand, t1.i_class, t1.i_category, t1.QOH FROM (SELECT item.i_brand, item.i_class, item.i_category, item.i_product_name, AVG(inventory.inv_quantity_on_hand) AS QOH FROM inventory INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1182 AND d_month_seq <= 1182 + 11) AS t ON inventory.inv_date_sk = t.d_date_sk INNER JOIN item ON inventory.inv_item_sk = item.i_item_sk GROUP BY ROLLUP(item.i_product_name, item.i_brand, item.i_class, item.i_category) ORDER BY 5, item.i_product_name, item.i_brand, item.i_class, item.i_category FETCH NEXT 100 ROWS ONLY) AS t1
with ssr as (select s_store_id, sum(sales_price) as sales, sum(profit) as profit, sum(return_amt) as returns, sum(net_loss) as profit_loss from ( select ss_store_sk as store_sk, ss_sold_date_sk as date_sk, ss_ext_sales_price as sales_price, ss_net_profit as profit, cast(0 as decimal(7,2)) as return_amt, cast(0 as decimal(7,2)) as net_loss from store_sales union all select sr_store_sk as store_sk, sr_returned_date_sk as date_sk, cast(0 as decimal(7,2)) as sales_price, cast(0 as decimal(7,2)) as profit, sr_return_amt as return_amt, sr_net_loss as net_loss from store_returns ) salesreturns, date_dim, store where date_sk = d_date_sk and d_date between cast('1999-08-05' as date) and (cast('1999-08-05' as date) + interval 14 days ) and store_sk = s_store_sk group by s_store_id) , csr as (select cp_catalog_page_id, sum(sales_price) as sales, sum(profit) as profit, sum(return_amt) as returns, sum(net_loss) as profit_loss from ( select cs_catalog_page_sk as page_sk, cs_sold_date_sk as date_sk, cs_ext_sales_price as sales_price, cs_net_profit as profit, cast(0 as decimal(7,2)) as return_amt, cast(0 as decimal(7,2)) as net_loss from catalog_sales union all select cr_catalog_page_sk as page_sk, cr_returned_date_sk as date_sk, cast(0 as decimal(7,2)) as sales_price, cast(0 as decimal(7,2)) as profit, cr_return_amount as return_amt, cr_net_loss as net_loss from catalog_returns ) salesreturns, date_dim, catalog_page where date_sk = d_date_sk and d_date between cast('1999-08-05' as date) and (cast('1999-08-05' as date) + interval 14 days ) and page_sk = cp_catalog_page_sk group by cp_catalog_page_id) , wsr as (select web_site_id, sum(sales_price) as sales, sum(profit) as profit, sum(return_amt) as returns, sum(net_loss) as profit_loss from ( select ws_web_site_sk as wsr_web_site_sk, ws_sold_date_sk as date_sk, ws_ext_sales_price as sales_price, ws_net_profit as profit, cast(0 as decimal(7,2)) as return_amt, cast(0 as decimal(7,2)) as net_loss from web_sales union all select ws_web_site_sk as wsr_web_site_sk, wr_returned_date_sk as date_sk, cast(0 as decimal(7,2)) as sales_price, cast(0 as decimal(7,2)) as profit, wr_return_amt as return_amt, wr_net_loss as net_loss from web_returns left outer join web_sales on ( wr_item_sk = ws_item_sk and wr_order_number = ws_order_number) ) salesreturns, date_dim, web_site where date_sk = d_date_sk and d_date between cast('1999-08-05' as date) and (cast('1999-08-05' as date) + interval 14 days ) and wsr_web_site_sk = web_site_sk group by web_site_id) , results as (select channel , id , sum(sales) as sales , sum(returns) as returns , sum(profit) as profit from (select 'store channel' as channel , 'store' || s_store_id as id , sales , returns , (profit - profit_loss) as profit from ssr union all select 'catalog channel' as channel , 'catalog_page' || cp_catalog_page_id as id , sales , returns , (profit - profit_loss) as profit from csr union all select 'web channel' as channel , 'web_site' || web_site_id as id , sales , returns , (profit - profit_loss) as profit from wsr ) x group by channel, id) select channel, id, sales, returns, profit from ( select channel, id, sales, returns, profit from results union select channel, null as id, sum(sales), sum(returns), sum(profit) from results group by channel union select null as channel, null as id, sum(sales), sum(returns), sum(profit) from results) foo order by channel, id limit 100
SELECT * FROM (SELECT CHANNEL, ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, 'store' || store.s_store_id AS ID, SUM(t1.SALES_PRICE) AS SALES, SUM(t1.RETURN_AMT) AS RETURNS, SUM(t1.PROFIT) - SUM(t1.NET_LOSS) AS PROFIT FROM (SELECT ss_store_sk AS STORE_SK, ss_sold_date_sk AS DATE_SK, ss_ext_sales_price AS SALES_PRICE, ss_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM store_sales UNION ALL SELECT sr_store_sk AS STORE_SK, sr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, sr_return_amt AS RETURN_AMT, sr_net_loss AS NET_LOSS FROM store_returns) AS t1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t2 ON t1.DATE_SK = t2.d_date_sk INNER JOIN store ON t1.STORE_SK = store.s_store_sk GROUP BY store.s_store_id UNION ALL SELECT 'catalog channel' AS CHANNEL, 'catalog_page' || catalog_page.cp_catalog_page_id AS ID, SUM(t7.SALES_PRICE) AS SALES, SUM(t7.RETURN_AMT) AS RETURNS, SUM(t7.PROFIT) - SUM(t7.NET_LOSS) AS PROFIT FROM (SELECT cs_catalog_page_sk AS PAGE_SK, cs_sold_date_sk AS DATE_SK, cs_ext_sales_price AS SALES_PRICE, cs_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM catalog_sales UNION ALL SELECT cr_catalog_page_sk AS PAGE_SK, cr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, cr_return_amount AS RETURN_AMT, cr_net_loss AS NET_LOSS FROM catalog_returns) AS t7 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t8 ON t7.DATE_SK = t8.d_date_sk INNER JOIN catalog_page ON t7.PAGE_SK = catalog_page.cp_catalog_page_sk GROUP BY catalog_page.cp_catalog_page_id UNION ALL SELECT 'web channel' AS CHANNEL, 'web_site' || web_site.web_site_id AS ID, SUM(t13.SALES_PRICE) AS SALES, SUM(t13.RETURN_AMT) AS RETURNS, SUM(t13.PROFIT) - SUM(t13.NET_LOSS) AS PROFIT FROM (SELECT ws_web_site_sk AS WSR_WEB_SITE_SK, ws_sold_date_sk AS DATE_SK, ws_ext_sales_price AS SALES_PRICE, ws_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM web_sales UNION ALL SELECT web_sales0.ws_web_site_sk AS WSR_WEB_SITE_SK, web_returns.wr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, web_returns.wr_return_amt AS RETURN_AMT, web_returns.wr_net_loss AS NET_LOSS FROM web_returns LEFT JOIN web_sales AS web_sales0 ON web_returns.wr_item_sk = web_sales0.ws_item_sk AND web_returns.wr_order_number = web_sales0.ws_order_number) AS t13 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t14 ON t13.DATE_SK = t14.d_date_sk INNER JOIN web_site ON t13.WSR_WEB_SITE_SK = web_site.web_site_sk GROUP BY web_site.web_site_id) AS t17 GROUP BY CHANNEL, ID UNION SELECT CHANNEL, NULL AS ID, SUM(SALES) AS EXPR$2, SUM(RETURNS) AS EXPR$3, SUM(PROFIT) AS EXPR$4 FROM (SELECT 'store channel' AS CHANNEL, 'store' || store0.s_store_id AS ID, SUM(t21.SALES_PRICE) AS SALES, SUM(t21.RETURN_AMT) AS RETURNS, SUM(t21.PROFIT) - SUM(t21.NET_LOSS) AS PROFIT FROM (SELECT ss_store_sk AS STORE_SK, ss_sold_date_sk AS DATE_SK, ss_ext_sales_price AS SALES_PRICE, ss_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM store_sales UNION ALL SELECT sr_store_sk AS STORE_SK, sr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, sr_return_amt AS RETURN_AMT, sr_net_loss AS NET_LOSS FROM store_returns) AS t21 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t22 ON t21.DATE_SK = t22.d_date_sk INNER JOIN store AS store0 ON t21.STORE_SK = store0.s_store_sk GROUP BY store0.s_store_id UNION ALL SELECT 'catalog channel' AS CHANNEL, 'catalog_page' || catalog_page0.cp_catalog_page_id AS ID, SUM(t27.SALES_PRICE) AS SALES, SUM(t27.RETURN_AMT) AS RETURNS, SUM(t27.PROFIT) - SUM(t27.NET_LOSS) AS PROFIT FROM (SELECT cs_catalog_page_sk AS PAGE_SK, cs_sold_date_sk AS DATE_SK, cs_ext_sales_price AS SALES_PRICE, cs_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM catalog_sales UNION ALL SELECT cr_catalog_page_sk AS PAGE_SK, cr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, cr_return_amount AS RETURN_AMT, cr_net_loss AS NET_LOSS FROM catalog_returns) AS t27 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t28 ON t27.DATE_SK = t28.d_date_sk INNER JOIN catalog_page AS catalog_page0 ON t27.PAGE_SK = catalog_page0.cp_catalog_page_sk GROUP BY catalog_page0.cp_catalog_page_id UNION ALL SELECT 'web channel' AS CHANNEL, 'web_site' || web_site0.web_site_id AS ID, SUM(t33.SALES_PRICE) AS SALES, SUM(t33.RETURN_AMT) AS RETURNS, SUM(t33.PROFIT) - SUM(t33.NET_LOSS) AS PROFIT FROM (SELECT ws_web_site_sk AS WSR_WEB_SITE_SK, ws_sold_date_sk AS DATE_SK, ws_ext_sales_price AS SALES_PRICE, ws_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM web_sales UNION ALL SELECT web_sales2.ws_web_site_sk AS WSR_WEB_SITE_SK, web_returns0.wr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, web_returns0.wr_return_amt AS RETURN_AMT, web_returns0.wr_net_loss AS NET_LOSS FROM web_returns AS web_returns0 LEFT JOIN web_sales AS web_sales2 ON web_returns0.wr_item_sk = web_sales2.ws_item_sk AND web_returns0.wr_order_number = web_sales2.ws_order_number) AS t33 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t34 ON t33.DATE_SK = t34.d_date_sk INNER JOIN web_site AS web_site0 ON t33.WSR_WEB_SITE_SK = web_site0.web_site_sk GROUP BY web_site0.web_site_id) AS t37 GROUP BY CHANNEL UNION SELECT NULL AS CHANNEL, NULL AS ID, SUM(SALES) AS EXPR$2, SUM(RETURNS) AS EXPR$3, SUM(PROFIT) AS EXPR$4 FROM (SELECT 'store channel' AS CHANNEL, 'store' || store1.s_store_id AS ID, SUM(t42.SALES_PRICE) AS SALES, SUM(t42.RETURN_AMT) AS RETURNS, SUM(t42.PROFIT) - SUM(t42.NET_LOSS) AS PROFIT FROM (SELECT ss_store_sk AS STORE_SK, ss_sold_date_sk AS DATE_SK, ss_ext_sales_price AS SALES_PRICE, ss_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM store_sales UNION ALL SELECT sr_store_sk AS STORE_SK, sr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, sr_return_amt AS RETURN_AMT, sr_net_loss AS NET_LOSS FROM store_returns) AS t42 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t43 ON t42.DATE_SK = t43.d_date_sk INNER JOIN store AS store1 ON t42.STORE_SK = store1.s_store_sk GROUP BY store1.s_store_id UNION ALL SELECT 'catalog channel' AS CHANNEL, 'catalog_page' || catalog_page1.cp_catalog_page_id AS ID, SUM(t48.SALES_PRICE) AS SALES, SUM(t48.RETURN_AMT) AS RETURNS, SUM(t48.PROFIT) - SUM(t48.NET_LOSS) AS PROFIT FROM (SELECT cs_catalog_page_sk AS PAGE_SK, cs_sold_date_sk AS DATE_SK, cs_ext_sales_price AS SALES_PRICE, cs_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM catalog_sales UNION ALL SELECT cr_catalog_page_sk AS PAGE_SK, cr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, cr_return_amount AS RETURN_AMT, cr_net_loss AS NET_LOSS FROM catalog_returns) AS t48 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t49 ON t48.DATE_SK = t49.d_date_sk INNER JOIN catalog_page AS catalog_page1 ON t48.PAGE_SK = catalog_page1.cp_catalog_page_sk GROUP BY catalog_page1.cp_catalog_page_id UNION ALL SELECT 'web channel' AS CHANNEL, 'web_site' || web_site1.web_site_id AS ID, SUM(t54.SALES_PRICE) AS SALES, SUM(t54.RETURN_AMT) AS RETURNS, SUM(t54.PROFIT) - SUM(t54.NET_LOSS) AS PROFIT FROM (SELECT ws_web_site_sk AS WSR_WEB_SITE_SK, ws_sold_date_sk AS DATE_SK, ws_ext_sales_price AS SALES_PRICE, ws_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM web_sales UNION ALL SELECT web_sales4.ws_web_site_sk AS WSR_WEB_SITE_SK, web_returns1.wr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, web_returns1.wr_return_amt AS RETURN_AMT, web_returns1.wr_net_loss AS NET_LOSS FROM web_returns AS web_returns1 LEFT JOIN web_sales AS web_sales4 ON web_returns1.wr_item_sk = web_sales4.ws_item_sk AND web_returns1.wr_order_number = web_sales4.ws_order_number) AS t54 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-08-05' AND d_date <= (DATE '1999-08-05' + 14 * INTERVAL '1' DAY)) AS t55 ON t54.DATE_SK = t55.d_date_sk INNER JOIN web_site AS web_site1 ON t54.WSR_WEB_SITE_SK = web_site1.web_site_sk GROUP BY web_site1.web_site_id) AS t58) ORDER BY CHANNEL, ID FETCH NEXT 100 ROWS ONLY
select * from(select w_warehouse_name ,i_item_id ,sum(case when (cast(d_date as date) < cast ('2001-03-04' as date)) then inv_quantity_on_hand else 0 end) as inv_before ,sum(case when (cast(d_date as date) >= cast ('2001-03-04' as date)) then inv_quantity_on_hand else 0 end) as inv_after from inventory ,warehouse ,item ,date_dim where i_current_price between 0.99 and 1.49 and i_item_sk = inv_item_sk and inv_warehouse_sk = w_warehouse_sk and inv_date_sk = d_date_sk and d_date between (cast ('2001-03-04' as date) - interval 30 days) and (cast ('2001-03-04' as date) + interval 30 days) group by w_warehouse_name, i_item_id) x where (case when inv_before > 0 then inv_after / inv_before else null end) between 2.0/3.0 and 3.0/2.0 order by w_warehouse_name ,i_item_id limit 100
SELECT warehouse.w_warehouse_name AS W_WAREHOUSE_NAME, t.i_item_id AS I_ITEM_ID, SUM(CASE WHEN t0.d_date < DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) AS INV_BEFORE, SUM(CASE WHEN t0.d_date >= DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) AS INV_AFTER FROM inventory INNER JOIN warehouse ON inventory.inv_warehouse_sk = warehouse.w_warehouse_sk INNER JOIN (SELECT * FROM item WHERE i_current_price >= 0.99 AND i_current_price <= 1.49) AS t ON inventory.inv_item_sk = t.i_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= (DATE '2001-03-04' - 30 * INTERVAL '1' DAY) AND d_date <= (DATE '2001-03-04' + 30 * INTERVAL '1' DAY)) AS t0 ON inventory.inv_date_sk = t0.d_date_sk GROUP BY warehouse.w_warehouse_name, t.i_item_id HAVING CASE WHEN SUM(CASE WHEN t0.d_date < DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) > 0 THEN SUM(CASE WHEN t0.d_date >= DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) / SUM(CASE WHEN t0.d_date < DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) >= 2.0 / 3.0 ELSE FALSE END AND CASE WHEN SUM(CASE WHEN t0.d_date < DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) > 0 THEN SUM(CASE WHEN t0.d_date >= DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) / SUM(CASE WHEN t0.d_date < DATE '2001-03-04' THEN inventory.inv_quantity_on_hand ELSE 0 END) <= 3.0 / 2.0 ELSE FALSE END ORDER BY warehouse.w_warehouse_name, t.i_item_id FETCH NEXT 100 ROWS ONLY
with results as (select sum(ss_net_profit) as ss_net_profit, sum(ss_ext_sales_price) as ss_ext_sales_price, sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin ,i_category ,i_class ,0 as g_category, 0 as g_class from store_sales ,date_dim d1 ,item ,store where d1.d_year = 2002 and d1.d_date_sk = ss_sold_date_sk and i_item_sk = ss_item_sk and s_store_sk = ss_store_sk and s_state in ('TN','TN','TN','TN', 'TN','TN','TN','TN') group by i_category,i_class) , results_rollup as (select gross_margin ,i_category ,i_class,0 as t_category, 0 as t_class, 0 as lochierarchy from results union select sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin, i_category, NULL AS i_class, 0 as t_category, 1 as t_class, 1 as lochierarchy from results group by i_category union select sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin, NULL AS i_category ,NULL AS i_class, 1 as t_category, 1 as t_class, 2 as lochierarchy from results) select gross_margin ,i_category ,i_class, lochierarchy,rank() over ( partition by lochierarchy, case when t_class = 0 then i_category end order by gross_margin asc) as rank_within_parent from results_rollup order by lochierarchy desc ,case when lochierarchy = 0 then i_category end ,rank_within_parent limit 100
SELECT GROSS_MARGIN, I_CATEGORY, I_CLASS, LOCHIERARCHY, RANK() OVER (PARTITION BY LOCHIERARCHY, CASE WHEN T_CLASS = 0 THEN I_CATEGORY ELSE NULL END ORDER BY GROSS_MARGIN) AS RANK_WITHIN_PARENT, CASE WHEN LOCHIERARCHY = 0 THEN I_CATEGORY ELSE NULL END FROM (SELECT SUM(store_sales.ss_net_profit) / SUM(store_sales.ss_ext_sales_price) AS GROSS_MARGIN, item.i_category AS I_CATEGORY, item.i_class AS I_CLASS, 0 AS T_CATEGORY, 0 AS T_CLASS, 0 AS LOCHIERARCHY FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t0 ON store_sales.ss_store_sk = t0.s_store_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY item.i_class, item.i_category UNION SELECT SUM(store_sales0.ss_net_profit) / SUM(store_sales0.ss_ext_sales_price) AS GROSS_MARGIN, item0.i_category AS I_CATEGORY, NULL AS I_CLASS, 0 AS T_CATEGORY, 1 AS T_CLASS, 1 AS LOCHIERARCHY FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002) AS t3 ON store_sales0.ss_sold_date_sk = t3.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t4 ON store_sales0.ss_store_sk = t4.s_store_sk INNER JOIN item AS item0 ON store_sales0.ss_item_sk = item0.i_item_sk GROUP BY item0.i_category UNION SELECT SUM(store_sales1.ss_net_profit) / SUM(store_sales1.ss_ext_sales_price) AS GROSS_MARGIN, NULL AS I_CATEGORY, NULL AS I_CLASS, 1 AS T_CATEGORY, 1 AS T_CLASS, 2 AS LOCHIERARCHY FROM store_sales AS store_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002) AS t7 ON store_sales1.ss_sold_date_sk = t7.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t8 ON store_sales1.ss_store_sk = t8.s_store_sk INNER JOIN item AS item1 ON store_sales1.ss_item_sk = item1.i_item_sk) AS t11 ORDER BY LOCHIERARCHY DESC, 6, 5 FETCH NEXT 100 ROWS ONLY
select dt.d_year ,item.i_category_id ,item.i_category ,sum(ss_ext_sales_price) from date_dim dt ,store_sales ,item where dt.d_date_sk = store_sales.ss_sold_date_sk and store_sales.ss_item_sk = item.i_item_sk and item.i_manager_id = 1 and dt.d_moy=11 and dt.d_year=1999 group by dt.d_year ,item.i_category_id ,item.i_category order by sum(ss_ext_sales_price) desc,dt.d_year ,item.i_category_id ,item.i_category limit 100
SELECT t.d_year, t0.i_category_id, t0.i_category, SUM(store_sales.ss_ext_sales_price) FROM (SELECT * FROM date_dim WHERE d_moy = 11 AND d_year = 1999) AS t INNER JOIN store_sales ON t.d_date_sk = store_sales.ss_sold_date_sk INNER JOIN (SELECT * FROM item WHERE i_manager_id = 1) AS t0 ON store_sales.ss_item_sk = t0.i_item_sk GROUP BY t.d_year, t0.i_category_id, t0.i_category ORDER BY 4 DESC, t.d_year, t0.i_category_id, t0.i_category FETCH NEXT 100 ROWS ONLY
with my_customers as ( select distinct c_customer_sk , c_current_addr_sk from ( select cs_sold_date_sk sold_date_sk, cs_bill_customer_sk customer_sk, cs_item_sk item_sk from catalog_sales union all select ws_sold_date_sk sold_date_sk, ws_bill_customer_sk customer_sk, ws_item_sk item_sk from web_sales ) cs_or_ws_sales, item, date_dim, customer where sold_date_sk = d_date_sk and item_sk = i_item_sk and i_category = 'Sports' and i_class = 'outdoor' and c_customer_sk = cs_or_ws_sales.customer_sk and d_moy = 4 and d_year = 2002 ) , my_revenue as ( select c_customer_sk, sum(ss_ext_sales_price) as revenue from my_customers, store_sales, customer_address, store, date_dim where c_current_addr_sk = ca_address_sk and ca_county = s_county and ca_state = s_state and ss_sold_date_sk = d_date_sk and c_customer_sk = ss_customer_sk and d_month_seq between (select distinct d_month_seq+1 from date_dim where d_year = 2002 and d_moy = 4) and (select distinct d_month_seq+3 from date_dim where d_year = 2002 and d_moy = 4) group by c_customer_sk ) , segments as (select cast((revenue/50) as int) as segment from my_revenue ) select segment, count(*) as num_customers, segment*50 as segment_base from segments group by segment order by segment, num_customers limit 100
SELECT SEGMENT, NUM_CUSTOMERS, SEGMENT * 50 AS SEGMENT_BASE FROM (SELECT t13.SEGMENT, COUNT(*) AS NUM_CUSTOMERS FROM (SELECT CAST(SUM(store_sales.ss_ext_sales_price) / 50 AS INTEGER) AS SEGMENT FROM (SELECT * FROM date_dim WHERE d_month_seq >= (((SELECT d_month_seq + 1 FROM date_dim WHERE d_year = 2002 AND d_moy = 4 GROUP BY d_month_seq + 1))) AND d_month_seq <= (((SELECT d_month_seq + 3 FROM date_dim WHERE d_year = 2002 AND d_moy = 4 GROUP BY d_month_seq + 3)))) AS t5 INNER JOIN ((SELECT customer.c_customer_sk, customer.c_current_addr_sk FROM (SELECT cs_sold_date_sk AS SOLD_DATE_SK, cs_bill_customer_sk AS CUSTOMER_SK, cs_item_sk AS ITEM_SK FROM catalog_sales UNION ALL SELECT ws_sold_date_sk AS SOLD_DATE_SK, ws_bill_customer_sk AS CUSTOMER_SK, ws_item_sk AS ITEM_SK FROM web_sales) AS t8 INNER JOIN (SELECT * FROM item WHERE i_category = 'Sports' AND i_class = 'outdoor') AS t9 ON t8.ITEM_SK = t9.i_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_moy = 4 AND d_year = 2002) AS t10 ON t8.SOLD_DATE_SK = t10.d_date_sk INNER JOIN customer ON t8.CUSTOMER_SK = customer.c_customer_sk GROUP BY customer.c_customer_sk, customer.c_current_addr_sk) AS t11 INNER JOIN store_sales ON t11.c_customer_sk = store_sales.ss_customer_sk INNER JOIN customer_address ON t11.c_current_addr_sk = customer_address.ca_address_sk INNER JOIN store ON customer_address.ca_county = store.s_county AND customer_address.ca_state = store.s_state) ON t5.d_date_sk = store_sales.ss_sold_date_sk GROUP BY t11.c_customer_sk) AS t13 GROUP BY t13.SEGMENT ORDER BY t13.SEGMENT, 2 FETCH NEXT 100 ROWS ONLY) AS t15
select sum(ss_net_profit) as total_sum ,s_state ,s_county ,grouping(s_state)+grouping(s_county) as lochierarchy ,rank() over ( partition by grouping(s_state)+grouping(s_county), case when grouping(s_county) = 0 then s_state end order by sum(ss_net_profit) desc) as rank_within_parent from store_sales ,date_dim d1 ,store where d1.d_month_seq between 1185 and 1185+11 and d1.d_date_sk = ss_sold_date_sk and s_store_sk = ss_store_sk and s_state in ( select s_state from (select s_state as s_state, rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking from store_sales, store, date_dim where d_month_seq between 1185 and 1185+11 and d_date_sk = ss_sold_date_sk and s_store_sk = ss_store_sk group by s_state ) tmp1 where ranking <= 5 ) group by rollup(s_state,s_county) order by lochierarchy desc ,case when lochierarchy = 0 then s_state end ,rank_within_parent limit 100
SELECT SUM(store_sales.ss_net_profit) AS TOTAL_SUM, t6.s_state AS S_STATE, t6.s_county AS S_COUNTY, GROUPING(t6.s_state) + GROUPING(t6.s_county) AS LOCHIERARCHY, RANK() OVER (PARTITION BY GROUPING(t6.s_state) + GROUPING(t6.s_county), CASE WHEN GROUPING(t6.s_county) = 0 THEN t6.s_state ELSE NULL END ORDER BY SUM(store_sales.ss_net_profit) DESC) AS RANK_WITHIN_PARENT, CASE WHEN GROUPING(t6.s_state) + GROUPING(t6.s_county) = 0 THEN t6.s_state ELSE NULL END FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1185 AND d_month_seq <= 1185 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state IN (SELECT S_STATE FROM (SELECT t2.S_STATE, RANK() OVER (PARTITION BY t2.S_STATE ORDER BY t2.$f1 DESC) AS RANKING FROM (SELECT store0.s_state AS S_STATE, SUM(store_sales0.ss_net_profit) AS $f1 FROM store_sales AS store_sales0, store AS store0, date_dim AS date_dim0 WHERE date_dim0.d_month_seq >= 1185 AND date_dim0.d_month_seq <= 1185 + 11 AND date_dim0.d_date_sk = store_sales0.ss_sold_date_sk AND store0.s_store_sk = store_sales0.ss_store_sk GROUP BY store0.s_state) AS t2) AS t3 WHERE RANKING <= 5)) AS t6 ON store_sales.ss_store_sk = t6.s_store_sk GROUP BY ROLLUP(t6.s_state, t6.s_county) ORDER BY 4 DESC, 6, 5 FETCH NEXT 100 ROWS ONLY
with year_total as ( select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,c_preferred_cust_flag customer_preferred_cust_flag ,c_birth_country customer_birth_country ,c_login customer_login ,c_email_address customer_email_address ,d_year dyear ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total ,'s' sale_type from customer ,store_sales ,date_dim where c_customer_sk = ss_customer_sk and ss_sold_date_sk = d_date_sk group by c_customer_id ,c_first_name ,c_last_name ,c_preferred_cust_flag ,c_birth_country ,c_login ,c_email_address ,d_year union all select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,c_preferred_cust_flag customer_preferred_cust_flag ,c_birth_country customer_birth_country ,c_login customer_login ,c_email_address customer_email_address ,d_year dyear ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total ,'c' sale_type from customer ,catalog_sales ,date_dim where c_customer_sk = cs_bill_customer_sk and cs_sold_date_sk = d_date_sk group by c_customer_id ,c_first_name ,c_last_name ,c_preferred_cust_flag ,c_birth_country ,c_login ,c_email_address ,d_year union all select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,c_preferred_cust_flag customer_preferred_cust_flag ,c_birth_country customer_birth_country ,c_login customer_login ,c_email_address customer_email_address ,d_year dyear ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total ,'w' sale_type from customer ,web_sales ,date_dim where c_customer_sk = ws_bill_customer_sk and ws_sold_date_sk = d_date_sk group by c_customer_id ,c_first_name ,c_last_name ,c_preferred_cust_flag ,c_birth_country ,c_login ,c_email_address ,d_year ) select t_s_secyear.customer_id ,t_s_secyear.customer_first_name ,t_s_secyear.customer_last_name ,t_s_secyear.customer_preferred_cust_flag from year_total t_s_firstyear ,year_total t_s_secyear ,year_total t_c_firstyear ,year_total t_c_secyear ,year_total t_w_firstyear ,year_total t_w_secyear where t_s_secyear.customer_id = t_s_firstyear.customer_id and t_s_firstyear.customer_id = t_c_secyear.customer_id and t_s_firstyear.customer_id = t_c_firstyear.customer_id and t_s_firstyear.customer_id = t_w_firstyear.customer_id and t_s_firstyear.customer_id = t_w_secyear.customer_id and t_s_firstyear.sale_type = 's' and t_c_firstyear.sale_type = 'c' and t_w_firstyear.sale_type = 'w' and t_s_secyear.sale_type = 's' and t_c_secyear.sale_type = 'c' and t_w_secyear.sale_type = 'w' and t_s_firstyear.dyear = 2001 and t_s_secyear.dyear = 2001+1 and t_c_firstyear.dyear = 2001 and t_c_secyear.dyear = 2001+1 and t_w_firstyear.dyear = 2001 and t_w_secyear.dyear = 2001+1 and t_s_firstyear.year_total > 0 and t_c_firstyear.year_total > 0 and t_w_firstyear.year_total > 0 and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end order by t_s_secyear.customer_id ,t_s_secyear.customer_first_name ,t_s_secyear.customer_last_name ,t_s_secyear.customer_preferred_cust_flag limit 100
SELECT t31.CUSTOMER_ID, t31.CUSTOMER_FIRST_NAME, t31.CUSTOMER_LAST_NAME, t31.CUSTOMER_PREFERRED_CUST_FLAG FROM (SELECT * FROM (SELECT customer.c_customer_id AS CUSTOMER_ID, customer.c_first_name AS CUSTOMER_FIRST_NAME, customer.c_last_name AS CUSTOMER_LAST_NAME, customer.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer.c_login AS CUSTOMER_LOGIN, customer.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim.d_year AS DYEAR, SUM((store_sales.ss_ext_list_price - store_sales.ss_ext_wholesale_cost - store_sales.ss_ext_discount_amt + store_sales.ss_ext_sales_price) / 2) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer INNER JOIN store_sales ON customer.c_customer_sk = store_sales.ss_customer_sk INNER JOIN date_dim ON store_sales.ss_sold_date_sk = date_dim.d_date_sk GROUP BY customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year UNION ALL SELECT customer0.c_customer_id AS CUSTOMER_ID, customer0.c_first_name AS CUSTOMER_FIRST_NAME, customer0.c_last_name AS CUSTOMER_LAST_NAME, customer0.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer0.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer0.c_login AS CUSTOMER_LOGIN, customer0.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim0.d_year AS DYEAR, SUM((catalog_sales.cs_ext_list_price - catalog_sales.cs_ext_wholesale_cost - catalog_sales.cs_ext_discount_amt + catalog_sales.cs_ext_sales_price) / 2) AS YEAR_TOTAL, 'c' AS SALE_TYPE FROM customer AS customer0 INNER JOIN catalog_sales ON customer0.c_customer_sk = catalog_sales.cs_bill_customer_sk INNER JOIN date_dim AS date_dim0 ON catalog_sales.cs_sold_date_sk = date_dim0.d_date_sk GROUP BY customer0.c_customer_id, customer0.c_first_name, customer0.c_last_name, customer0.c_preferred_cust_flag, customer0.c_birth_country, customer0.c_login, customer0.c_email_address, date_dim0.d_year UNION ALL SELECT customer1.c_customer_id AS CUSTOMER_ID, customer1.c_first_name AS CUSTOMER_FIRST_NAME, customer1.c_last_name AS CUSTOMER_LAST_NAME, customer1.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer1.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer1.c_login AS CUSTOMER_LOGIN, customer1.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim1.d_year AS DYEAR, SUM((web_sales.ws_ext_list_price - web_sales.ws_ext_wholesale_cost - web_sales.ws_ext_discount_amt + web_sales.ws_ext_sales_price) / 2) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer1 INNER JOIN web_sales ON customer1.c_customer_sk = web_sales.ws_bill_customer_sk INNER JOIN date_dim AS date_dim1 ON web_sales.ws_sold_date_sk = date_dim1.d_date_sk GROUP BY customer1.c_customer_id, customer1.c_first_name, customer1.c_last_name, customer1.c_preferred_cust_flag, customer1.c_birth_country, customer1.c_login, customer1.c_email_address, date_dim1.d_year) AS t8 WHERE SALE_TYPE = 'w' AND DYEAR = 2001 + 1) AS t9 INNER JOIN ((SELECT * FROM (SELECT customer2.c_customer_id AS CUSTOMER_ID, customer2.c_first_name AS CUSTOMER_FIRST_NAME, customer2.c_last_name AS CUSTOMER_LAST_NAME, customer2.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer2.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer2.c_login AS CUSTOMER_LOGIN, customer2.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim2.d_year AS DYEAR, SUM((store_sales0.ss_ext_list_price - store_sales0.ss_ext_wholesale_cost - store_sales0.ss_ext_discount_amt + store_sales0.ss_ext_sales_price) / 2) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer2 INNER JOIN store_sales AS store_sales0 ON customer2.c_customer_sk = store_sales0.ss_customer_sk INNER JOIN date_dim AS date_dim2 ON store_sales0.ss_sold_date_sk = date_dim2.d_date_sk GROUP BY customer2.c_customer_id, customer2.c_first_name, customer2.c_last_name, customer2.c_preferred_cust_flag, customer2.c_birth_country, customer2.c_login, customer2.c_email_address, date_dim2.d_year UNION ALL SELECT customer3.c_customer_id AS CUSTOMER_ID, customer3.c_first_name AS CUSTOMER_FIRST_NAME, customer3.c_last_name AS CUSTOMER_LAST_NAME, customer3.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer3.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer3.c_login AS CUSTOMER_LOGIN, customer3.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim3.d_year AS DYEAR, SUM((catalog_sales0.cs_ext_list_price - catalog_sales0.cs_ext_wholesale_cost - catalog_sales0.cs_ext_discount_amt + catalog_sales0.cs_ext_sales_price) / 2) AS YEAR_TOTAL, 'c' AS SALE_TYPE FROM customer AS customer3 INNER JOIN catalog_sales AS catalog_sales0 ON customer3.c_customer_sk = catalog_sales0.cs_bill_customer_sk INNER JOIN date_dim AS date_dim3 ON catalog_sales0.cs_sold_date_sk = date_dim3.d_date_sk GROUP BY customer3.c_customer_id, customer3.c_first_name, customer3.c_last_name, customer3.c_preferred_cust_flag, customer3.c_birth_country, customer3.c_login, customer3.c_email_address, date_dim3.d_year UNION ALL SELECT customer4.c_customer_id AS CUSTOMER_ID, customer4.c_first_name AS CUSTOMER_FIRST_NAME, customer4.c_last_name AS CUSTOMER_LAST_NAME, customer4.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer4.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer4.c_login AS CUSTOMER_LOGIN, customer4.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim4.d_year AS DYEAR, SUM((web_sales0.ws_ext_list_price - web_sales0.ws_ext_wholesale_cost - web_sales0.ws_ext_discount_amt + web_sales0.ws_ext_sales_price) / 2) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer4 INNER JOIN web_sales AS web_sales0 ON customer4.c_customer_sk = web_sales0.ws_bill_customer_sk INNER JOIN date_dim AS date_dim4 ON web_sales0.ws_sold_date_sk = date_dim4.d_date_sk GROUP BY customer4.c_customer_id, customer4.c_first_name, customer4.c_last_name, customer4.c_preferred_cust_flag, customer4.c_birth_country, customer4.c_login, customer4.c_email_address, date_dim4.d_year) AS t19 WHERE SALE_TYPE = 's' AND DYEAR = 2001 AND YEAR_TOTAL > 0) AS t20 INNER JOIN (SELECT * FROM (SELECT customer5.c_customer_id AS CUSTOMER_ID, customer5.c_first_name AS CUSTOMER_FIRST_NAME, customer5.c_last_name AS CUSTOMER_LAST_NAME, customer5.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer5.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer5.c_login AS CUSTOMER_LOGIN, customer5.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim5.d_year AS DYEAR, SUM((store_sales1.ss_ext_list_price - store_sales1.ss_ext_wholesale_cost - store_sales1.ss_ext_discount_amt + store_sales1.ss_ext_sales_price) / 2) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer5 INNER JOIN store_sales AS store_sales1 ON customer5.c_customer_sk = store_sales1.ss_customer_sk INNER JOIN date_dim AS date_dim5 ON store_sales1.ss_sold_date_sk = date_dim5.d_date_sk GROUP BY customer5.c_customer_id, customer5.c_first_name, customer5.c_last_name, customer5.c_preferred_cust_flag, customer5.c_birth_country, customer5.c_login, customer5.c_email_address, date_dim5.d_year UNION ALL SELECT customer6.c_customer_id AS CUSTOMER_ID, customer6.c_first_name AS CUSTOMER_FIRST_NAME, customer6.c_last_name AS CUSTOMER_LAST_NAME, customer6.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer6.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer6.c_login AS CUSTOMER_LOGIN, customer6.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim6.d_year AS DYEAR, SUM((catalog_sales1.cs_ext_list_price - catalog_sales1.cs_ext_wholesale_cost - catalog_sales1.cs_ext_discount_amt + catalog_sales1.cs_ext_sales_price) / 2) AS YEAR_TOTAL, 'c' AS SALE_TYPE FROM customer AS customer6 INNER JOIN catalog_sales AS catalog_sales1 ON customer6.c_customer_sk = catalog_sales1.cs_bill_customer_sk INNER JOIN date_dim AS date_dim6 ON catalog_sales1.cs_sold_date_sk = date_dim6.d_date_sk GROUP BY customer6.c_customer_id, customer6.c_first_name, customer6.c_last_name, customer6.c_preferred_cust_flag, customer6.c_birth_country, customer6.c_login, customer6.c_email_address, date_dim6.d_year UNION ALL SELECT customer7.c_customer_id AS CUSTOMER_ID, customer7.c_first_name AS CUSTOMER_FIRST_NAME, customer7.c_last_name AS CUSTOMER_LAST_NAME, customer7.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer7.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer7.c_login AS CUSTOMER_LOGIN, customer7.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim7.d_year AS DYEAR, SUM((web_sales1.ws_ext_list_price - web_sales1.ws_ext_wholesale_cost - web_sales1.ws_ext_discount_amt + web_sales1.ws_ext_sales_price) / 2) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer7 INNER JOIN web_sales AS web_sales1 ON customer7.c_customer_sk = web_sales1.ws_bill_customer_sk INNER JOIN date_dim AS date_dim7 ON web_sales1.ws_sold_date_sk = date_dim7.d_date_sk GROUP BY customer7.c_customer_id, customer7.c_first_name, customer7.c_last_name, customer7.c_preferred_cust_flag, customer7.c_birth_country, customer7.c_login, customer7.c_email_address, date_dim7.d_year) AS t30 WHERE SALE_TYPE = 's' AND DYEAR = 2001 + 1) AS t31 ON t20.CUSTOMER_ID = t31.CUSTOMER_ID INNER JOIN (SELECT * FROM (SELECT customer8.c_customer_id AS CUSTOMER_ID, customer8.c_first_name AS CUSTOMER_FIRST_NAME, customer8.c_last_name AS CUSTOMER_LAST_NAME, customer8.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer8.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer8.c_login AS CUSTOMER_LOGIN, customer8.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim8.d_year AS DYEAR, SUM((store_sales2.ss_ext_list_price - store_sales2.ss_ext_wholesale_cost - store_sales2.ss_ext_discount_amt + store_sales2.ss_ext_sales_price) / 2) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer8 INNER JOIN store_sales AS store_sales2 ON customer8.c_customer_sk = store_sales2.ss_customer_sk INNER JOIN date_dim AS date_dim8 ON store_sales2.ss_sold_date_sk = date_dim8.d_date_sk GROUP BY customer8.c_customer_id, customer8.c_first_name, customer8.c_last_name, customer8.c_preferred_cust_flag, customer8.c_birth_country, customer8.c_login, customer8.c_email_address, date_dim8.d_year UNION ALL SELECT customer9.c_customer_id AS CUSTOMER_ID, customer9.c_first_name AS CUSTOMER_FIRST_NAME, customer9.c_last_name AS CUSTOMER_LAST_NAME, customer9.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer9.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer9.c_login AS CUSTOMER_LOGIN, customer9.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim9.d_year AS DYEAR, SUM((catalog_sales2.cs_ext_list_price - catalog_sales2.cs_ext_wholesale_cost - catalog_sales2.cs_ext_discount_amt + catalog_sales2.cs_ext_sales_price) / 2) AS YEAR_TOTAL, 'c' AS SALE_TYPE FROM customer AS customer9 INNER JOIN catalog_sales AS catalog_sales2 ON customer9.c_customer_sk = catalog_sales2.cs_bill_customer_sk INNER JOIN date_dim AS date_dim9 ON catalog_sales2.cs_sold_date_sk = date_dim9.d_date_sk GROUP BY customer9.c_customer_id, customer9.c_first_name, customer9.c_last_name, customer9.c_preferred_cust_flag, customer9.c_birth_country, customer9.c_login, customer9.c_email_address, date_dim9.d_year UNION ALL SELECT customer10.c_customer_id AS CUSTOMER_ID, customer10.c_first_name AS CUSTOMER_FIRST_NAME, customer10.c_last_name AS CUSTOMER_LAST_NAME, customer10.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer10.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer10.c_login AS CUSTOMER_LOGIN, customer10.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim10.d_year AS DYEAR, SUM((web_sales2.ws_ext_list_price - web_sales2.ws_ext_wholesale_cost - web_sales2.ws_ext_discount_amt + web_sales2.ws_ext_sales_price) / 2) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer10 INNER JOIN web_sales AS web_sales2 ON customer10.c_customer_sk = web_sales2.ws_bill_customer_sk INNER JOIN date_dim AS date_dim10 ON web_sales2.ws_sold_date_sk = date_dim10.d_date_sk GROUP BY customer10.c_customer_id, customer10.c_first_name, customer10.c_last_name, customer10.c_preferred_cust_flag, customer10.c_birth_country, customer10.c_login, customer10.c_email_address, date_dim10.d_year) AS t41 WHERE SALE_TYPE = 'c' AND DYEAR = 2001 AND YEAR_TOTAL > 0) AS t42 ON t20.CUSTOMER_ID = t42.CUSTOMER_ID INNER JOIN (SELECT * FROM (SELECT customer11.c_customer_id AS CUSTOMER_ID, customer11.c_first_name AS CUSTOMER_FIRST_NAME, customer11.c_last_name AS CUSTOMER_LAST_NAME, customer11.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer11.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer11.c_login AS CUSTOMER_LOGIN, customer11.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim11.d_year AS DYEAR, SUM((store_sales3.ss_ext_list_price - store_sales3.ss_ext_wholesale_cost - store_sales3.ss_ext_discount_amt + store_sales3.ss_ext_sales_price) / 2) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer11 INNER JOIN store_sales AS store_sales3 ON customer11.c_customer_sk = store_sales3.ss_customer_sk INNER JOIN date_dim AS date_dim11 ON store_sales3.ss_sold_date_sk = date_dim11.d_date_sk GROUP BY customer11.c_customer_id, customer11.c_first_name, customer11.c_last_name, customer11.c_preferred_cust_flag, customer11.c_birth_country, customer11.c_login, customer11.c_email_address, date_dim11.d_year UNION ALL SELECT customer12.c_customer_id AS CUSTOMER_ID, customer12.c_first_name AS CUSTOMER_FIRST_NAME, customer12.c_last_name AS CUSTOMER_LAST_NAME, customer12.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer12.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer12.c_login AS CUSTOMER_LOGIN, customer12.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim12.d_year AS DYEAR, SUM((catalog_sales3.cs_ext_list_price - catalog_sales3.cs_ext_wholesale_cost - catalog_sales3.cs_ext_discount_amt + catalog_sales3.cs_ext_sales_price) / 2) AS YEAR_TOTAL, 'c' AS SALE_TYPE FROM customer AS customer12 INNER JOIN catalog_sales AS catalog_sales3 ON customer12.c_customer_sk = catalog_sales3.cs_bill_customer_sk INNER JOIN date_dim AS date_dim12 ON catalog_sales3.cs_sold_date_sk = date_dim12.d_date_sk GROUP BY customer12.c_customer_id, customer12.c_first_name, customer12.c_last_name, customer12.c_preferred_cust_flag, customer12.c_birth_country, customer12.c_login, customer12.c_email_address, date_dim12.d_year UNION ALL SELECT customer13.c_customer_id AS CUSTOMER_ID, customer13.c_first_name AS CUSTOMER_FIRST_NAME, customer13.c_last_name AS CUSTOMER_LAST_NAME, customer13.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer13.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer13.c_login AS CUSTOMER_LOGIN, customer13.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim13.d_year AS DYEAR, SUM((web_sales3.ws_ext_list_price - web_sales3.ws_ext_wholesale_cost - web_sales3.ws_ext_discount_amt + web_sales3.ws_ext_sales_price) / 2) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer13 INNER JOIN web_sales AS web_sales3 ON customer13.c_customer_sk = web_sales3.ws_bill_customer_sk INNER JOIN date_dim AS date_dim13 ON web_sales3.ws_sold_date_sk = date_dim13.d_date_sk GROUP BY customer13.c_customer_id, customer13.c_first_name, customer13.c_last_name, customer13.c_preferred_cust_flag, customer13.c_birth_country, customer13.c_login, customer13.c_email_address, date_dim13.d_year) AS t52 WHERE SALE_TYPE = 'c' AND DYEAR = 2001 + 1) AS t53 ON t20.CUSTOMER_ID = t53.CUSTOMER_ID AND CASE WHEN t20.YEAR_TOTAL > 0 THEN CASE WHEN t42.YEAR_TOTAL > 0 THEN t53.YEAR_TOTAL / t42.YEAR_TOTAL > t31.YEAR_TOTAL / t20.YEAR_TOTAL ELSE FALSE END ELSE FALSE END INNER JOIN (SELECT * FROM (SELECT customer14.c_customer_id AS CUSTOMER_ID, customer14.c_first_name AS CUSTOMER_FIRST_NAME, customer14.c_last_name AS CUSTOMER_LAST_NAME, customer14.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer14.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer14.c_login AS CUSTOMER_LOGIN, customer14.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim14.d_year AS DYEAR, SUM((store_sales4.ss_ext_list_price - store_sales4.ss_ext_wholesale_cost - store_sales4.ss_ext_discount_amt + store_sales4.ss_ext_sales_price) / 2) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer14 INNER JOIN store_sales AS store_sales4 ON customer14.c_customer_sk = store_sales4.ss_customer_sk INNER JOIN date_dim AS date_dim14 ON store_sales4.ss_sold_date_sk = date_dim14.d_date_sk GROUP BY customer14.c_customer_id, customer14.c_first_name, customer14.c_last_name, customer14.c_preferred_cust_flag, customer14.c_birth_country, customer14.c_login, customer14.c_email_address, date_dim14.d_year UNION ALL SELECT customer15.c_customer_id AS CUSTOMER_ID, customer15.c_first_name AS CUSTOMER_FIRST_NAME, customer15.c_last_name AS CUSTOMER_LAST_NAME, customer15.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer15.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer15.c_login AS CUSTOMER_LOGIN, customer15.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim15.d_year AS DYEAR, SUM((catalog_sales4.cs_ext_list_price - catalog_sales4.cs_ext_wholesale_cost - catalog_sales4.cs_ext_discount_amt + catalog_sales4.cs_ext_sales_price) / 2) AS YEAR_TOTAL, 'c' AS SALE_TYPE FROM customer AS customer15 INNER JOIN catalog_sales AS catalog_sales4 ON customer15.c_customer_sk = catalog_sales4.cs_bill_customer_sk INNER JOIN date_dim AS date_dim15 ON catalog_sales4.cs_sold_date_sk = date_dim15.d_date_sk GROUP BY customer15.c_customer_id, customer15.c_first_name, customer15.c_last_name, customer15.c_preferred_cust_flag, customer15.c_birth_country, customer15.c_login, customer15.c_email_address, date_dim15.d_year UNION ALL SELECT customer16.c_customer_id AS CUSTOMER_ID, customer16.c_first_name AS CUSTOMER_FIRST_NAME, customer16.c_last_name AS CUSTOMER_LAST_NAME, customer16.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer16.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer16.c_login AS CUSTOMER_LOGIN, customer16.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim16.d_year AS DYEAR, SUM((web_sales4.ws_ext_list_price - web_sales4.ws_ext_wholesale_cost - web_sales4.ws_ext_discount_amt + web_sales4.ws_ext_sales_price) / 2) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer16 INNER JOIN web_sales AS web_sales4 ON customer16.c_customer_sk = web_sales4.ws_bill_customer_sk INNER JOIN date_dim AS date_dim16 ON web_sales4.ws_sold_date_sk = date_dim16.d_date_sk GROUP BY customer16.c_customer_id, customer16.c_first_name, customer16.c_last_name, customer16.c_preferred_cust_flag, customer16.c_birth_country, customer16.c_login, customer16.c_email_address, date_dim16.d_year) AS t63 WHERE SALE_TYPE = 'w' AND DYEAR = 2001 AND YEAR_TOTAL > 0) AS t64 ON t20.CUSTOMER_ID = t64.CUSTOMER_ID) ON t9.CUSTOMER_ID = t20.CUSTOMER_ID AND CASE WHEN t64.YEAR_TOTAL > 0 THEN CASE WHEN t42.YEAR_TOTAL > 0 THEN t53.YEAR_TOTAL / t42.YEAR_TOTAL > t9.YEAR_TOTAL / t64.YEAR_TOTAL ELSE FALSE END ELSE FALSE END ORDER BY t31.CUSTOMER_ID, t31.CUSTOMER_FIRST_NAME, t31.CUSTOMER_LAST_NAME, t31.CUSTOMER_PREFERRED_CUST_FLAG FETCH NEXT 100 ROWS ONLY
with ss as (select s_store_sk, sum(ss_ext_sales_price) as sales, sum(ss_net_profit) as profit from store_sales, date_dim, store where ss_sold_date_sk = d_date_sk and d_date between cast('2000-08-26' as date) and (cast('2000-08-26' as date) + interval 30 days ) and ss_store_sk = s_store_sk group by s_store_sk) , sr as (select s_store_sk, sum(sr_return_amt) as returns, sum(sr_net_loss) as profit_loss from store_returns, date_dim, store where sr_returned_date_sk = d_date_sk and d_date between cast('2000-08-26' as date) and (cast('2000-08-26' as date) + interval 30 days ) and sr_store_sk = s_store_sk group by s_store_sk), cs as (select cs_call_center_sk, sum(cs_ext_sales_price) as sales, sum(cs_net_profit) as profit from catalog_sales, date_dim where cs_sold_date_sk = d_date_sk and d_date between cast('2000-08-26' as date) and (cast('2000-08-26' as date) + interval 30 days ) group by cs_call_center_sk ), cr as (select cr_call_center_sk, sum(cr_return_amount) as returns, sum(cr_net_loss) as profit_loss from catalog_returns, date_dim where cr_returned_date_sk = d_date_sk and d_date between cast('2000-08-26' as date) and (cast('2000-08-26' as date) + interval 30 days ) group by cr_call_center_sk), ws as ( select wp_web_page_sk, sum(ws_ext_sales_price) as sales, sum(ws_net_profit) as profit from web_sales, date_dim, web_page where ws_sold_date_sk = d_date_sk and d_date between cast('2000-08-26' as date) and (cast('2000-08-26' as date) + interval 30 days ) and ws_web_page_sk = wp_web_page_sk group by wp_web_page_sk), wr as (select wp_web_page_sk, sum(wr_return_amt) as returns, sum(wr_net_loss) as profit_loss from web_returns, date_dim, web_page where wr_returned_date_sk = d_date_sk and d_date between cast('2000-08-26' as date) and (cast('2000-08-26' as date) + interval 30 days ) and wr_web_page_sk = wp_web_page_sk group by wp_web_page_sk) , results as (select channel , id , sum(sales) as sales , sum(returns) as returns , sum(profit) as profit from (select 'store channel' as channel , ss.s_store_sk as id , sales , coalesce(returns, 0) as returns , (profit - coalesce(profit_loss,0)) as profit from ss left join sr on ss.s_store_sk = sr.s_store_sk union all select 'catalog channel' as channel , cs_call_center_sk as id , sales , returns , (profit - profit_loss) as profit from cs , cr union all select 'web channel' as channel , ws.wp_web_page_sk as id , sales , coalesce(returns, 0) returns , (profit - coalesce(profit_loss,0)) as profit from ws left join wr on ws.wp_web_page_sk = wr.wp_web_page_sk ) x group by channel, id ) select * from ( select channel, id, sales, returns, profit from results union select channel, NULL AS id, sum(sales) as sales, sum(returns) as returns, sum(profit) as profit from results group by channel union select NULL AS channel, NULL AS id, sum(sales) as sales, sum(returns) as returns, sum(profit) as profit from results ) foo order by channel, id limit 100
SELECT * FROM (SELECT CHANNEL, ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, t0.s_store_sk AS ID, t0.SALES, CASE WHEN t2.RETURNS IS NOT NULL THEN CAST(t2.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t0.PROFIT - CASE WHEN t2.PROFIT_LOSS IS NOT NULL THEN CAST(t2.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT store.s_store_sk, SUM(store_sales.ss_ext_sales_price) AS SALES, SUM(store_sales.ss_net_profit) AS PROFIT FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk GROUP BY store.s_store_sk) AS t0 LEFT JOIN (SELECT store0.s_store_sk, SUM(store_returns.sr_return_amt) AS RETURNS, SUM(store_returns.sr_net_loss) AS PROFIT_LOSS FROM store_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t1 ON store_returns.sr_returned_date_sk = t1.d_date_sk INNER JOIN store AS store0 ON store_returns.sr_store_sk = store0.s_store_sk GROUP BY store0.s_store_sk) AS t2 ON t0.s_store_sk = t2.s_store_sk UNION ALL SELECT 'catalog channel' AS CHANNEL, t5.cs_call_center_sk AS ID, t5.SALES, t7.RETURNS, t5.PROFIT - t7.PROFIT_LOSS AS PROFIT FROM (SELECT catalog_sales.cs_call_center_sk, SUM(catalog_sales.cs_ext_sales_price) AS SALES, SUM(catalog_sales.cs_net_profit) AS PROFIT FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t4 ON catalog_sales.cs_sold_date_sk = t4.d_date_sk GROUP BY catalog_sales.cs_call_center_sk) AS t5, (SELECT catalog_returns.cr_call_center_sk, SUM(catalog_returns.cr_return_amount) AS RETURNS, SUM(catalog_returns.cr_net_loss) AS PROFIT_LOSS FROM catalog_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t6 ON catalog_returns.cr_returned_date_sk = t6.d_date_sk GROUP BY catalog_returns.cr_call_center_sk) AS t7 UNION ALL SELECT 'web channel' AS CHANNEL, t10.wp_web_page_sk AS ID, t10.SALES, CASE WHEN t12.RETURNS IS NOT NULL THEN CAST(t12.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t10.PROFIT - CASE WHEN t12.PROFIT_LOSS IS NOT NULL THEN CAST(t12.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT web_page.wp_web_page_sk, SUM(web_sales.ws_ext_sales_price) AS SALES, SUM(web_sales.ws_net_profit) AS PROFIT FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t9 ON web_sales.ws_sold_date_sk = t9.d_date_sk INNER JOIN web_page ON web_sales.ws_web_page_sk = web_page.wp_web_page_sk GROUP BY web_page.wp_web_page_sk) AS t10 LEFT JOIN (SELECT web_page0.wp_web_page_sk, SUM(web_returns.wr_return_amt) AS RETURNS, SUM(web_returns.wr_net_loss) AS PROFIT_LOSS FROM web_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t11 ON web_returns.wr_returned_date_sk = t11.d_date_sk INNER JOIN web_page AS web_page0 ON web_returns.wr_web_page_sk = web_page0.wp_web_page_sk GROUP BY web_page0.wp_web_page_sk) AS t12 ON t10.wp_web_page_sk = t12.wp_web_page_sk) AS t14 GROUP BY CHANNEL, ID UNION SELECT CHANNEL, NULL AS ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, t17.s_store_sk AS ID, t17.SALES, CASE WHEN t19.RETURNS IS NOT NULL THEN CAST(t19.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t17.PROFIT - CASE WHEN t19.PROFIT_LOSS IS NOT NULL THEN CAST(t19.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT store1.s_store_sk, SUM(store_sales0.ss_ext_sales_price) AS SALES, SUM(store_sales0.ss_net_profit) AS PROFIT FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t16 ON store_sales0.ss_sold_date_sk = t16.d_date_sk INNER JOIN store AS store1 ON store_sales0.ss_store_sk = store1.s_store_sk GROUP BY store1.s_store_sk) AS t17 LEFT JOIN (SELECT store2.s_store_sk, SUM(store_returns0.sr_return_amt) AS RETURNS, SUM(store_returns0.sr_net_loss) AS PROFIT_LOSS FROM store_returns AS store_returns0 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t18 ON store_returns0.sr_returned_date_sk = t18.d_date_sk INNER JOIN store AS store2 ON store_returns0.sr_store_sk = store2.s_store_sk GROUP BY store2.s_store_sk) AS t19 ON t17.s_store_sk = t19.s_store_sk UNION ALL SELECT 'catalog channel' AS CHANNEL, t22.cs_call_center_sk AS ID, t22.SALES, t24.RETURNS, t22.PROFIT - t24.PROFIT_LOSS AS PROFIT FROM (SELECT catalog_sales0.cs_call_center_sk, SUM(catalog_sales0.cs_ext_sales_price) AS SALES, SUM(catalog_sales0.cs_net_profit) AS PROFIT FROM catalog_sales AS catalog_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t21 ON catalog_sales0.cs_sold_date_sk = t21.d_date_sk GROUP BY catalog_sales0.cs_call_center_sk) AS t22, (SELECT catalog_returns0.cr_call_center_sk, SUM(catalog_returns0.cr_return_amount) AS RETURNS, SUM(catalog_returns0.cr_net_loss) AS PROFIT_LOSS FROM catalog_returns AS catalog_returns0 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t23 ON catalog_returns0.cr_returned_date_sk = t23.d_date_sk GROUP BY catalog_returns0.cr_call_center_sk) AS t24 UNION ALL SELECT 'web channel' AS CHANNEL, t27.wp_web_page_sk AS ID, t27.SALES, CASE WHEN t29.RETURNS IS NOT NULL THEN CAST(t29.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t27.PROFIT - CASE WHEN t29.PROFIT_LOSS IS NOT NULL THEN CAST(t29.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT web_page1.wp_web_page_sk, SUM(web_sales0.ws_ext_sales_price) AS SALES, SUM(web_sales0.ws_net_profit) AS PROFIT FROM web_sales AS web_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t26 ON web_sales0.ws_sold_date_sk = t26.d_date_sk INNER JOIN web_page AS web_page1 ON web_sales0.ws_web_page_sk = web_page1.wp_web_page_sk GROUP BY web_page1.wp_web_page_sk) AS t27 LEFT JOIN (SELECT web_page2.wp_web_page_sk, SUM(web_returns0.wr_return_amt) AS RETURNS, SUM(web_returns0.wr_net_loss) AS PROFIT_LOSS FROM web_returns AS web_returns0 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t28 ON web_returns0.wr_returned_date_sk = t28.d_date_sk INNER JOIN web_page AS web_page2 ON web_returns0.wr_web_page_sk = web_page2.wp_web_page_sk GROUP BY web_page2.wp_web_page_sk) AS t29 ON t27.wp_web_page_sk = t29.wp_web_page_sk) AS t31 GROUP BY CHANNEL UNION SELECT NULL AS CHANNEL, NULL AS ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, t35.s_store_sk AS ID, t35.SALES, CASE WHEN t37.RETURNS IS NOT NULL THEN CAST(t37.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t35.PROFIT - CASE WHEN t37.PROFIT_LOSS IS NOT NULL THEN CAST(t37.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT store3.s_store_sk, SUM(store_sales1.ss_ext_sales_price) AS SALES, SUM(store_sales1.ss_net_profit) AS PROFIT FROM store_sales AS store_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t34 ON store_sales1.ss_sold_date_sk = t34.d_date_sk INNER JOIN store AS store3 ON store_sales1.ss_store_sk = store3.s_store_sk GROUP BY store3.s_store_sk) AS t35 LEFT JOIN (SELECT store4.s_store_sk, SUM(store_returns1.sr_return_amt) AS RETURNS, SUM(store_returns1.sr_net_loss) AS PROFIT_LOSS FROM store_returns AS store_returns1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t36 ON store_returns1.sr_returned_date_sk = t36.d_date_sk INNER JOIN store AS store4 ON store_returns1.sr_store_sk = store4.s_store_sk GROUP BY store4.s_store_sk) AS t37 ON t35.s_store_sk = t37.s_store_sk UNION ALL SELECT 'catalog channel' AS CHANNEL, t40.cs_call_center_sk AS ID, t40.SALES, t42.RETURNS, t40.PROFIT - t42.PROFIT_LOSS AS PROFIT FROM (SELECT catalog_sales1.cs_call_center_sk, SUM(catalog_sales1.cs_ext_sales_price) AS SALES, SUM(catalog_sales1.cs_net_profit) AS PROFIT FROM catalog_sales AS catalog_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t39 ON catalog_sales1.cs_sold_date_sk = t39.d_date_sk GROUP BY catalog_sales1.cs_call_center_sk) AS t40, (SELECT catalog_returns1.cr_call_center_sk, SUM(catalog_returns1.cr_return_amount) AS RETURNS, SUM(catalog_returns1.cr_net_loss) AS PROFIT_LOSS FROM catalog_returns AS catalog_returns1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t41 ON catalog_returns1.cr_returned_date_sk = t41.d_date_sk GROUP BY catalog_returns1.cr_call_center_sk) AS t42 UNION ALL SELECT 'web channel' AS CHANNEL, t45.wp_web_page_sk AS ID, t45.SALES, CASE WHEN t47.RETURNS IS NOT NULL THEN CAST(t47.RETURNS AS DECIMAL(19, 0)) ELSE 0 END AS RETURNS, t45.PROFIT - CASE WHEN t47.PROFIT_LOSS IS NOT NULL THEN CAST(t47.PROFIT_LOSS AS DECIMAL(19, 0)) ELSE 0 END AS PROFIT FROM (SELECT web_page3.wp_web_page_sk, SUM(web_sales1.ws_ext_sales_price) AS SALES, SUM(web_sales1.ws_net_profit) AS PROFIT FROM web_sales AS web_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t44 ON web_sales1.ws_sold_date_sk = t44.d_date_sk INNER JOIN web_page AS web_page3 ON web_sales1.ws_web_page_sk = web_page3.wp_web_page_sk GROUP BY web_page3.wp_web_page_sk) AS t45 LEFT JOIN (SELECT web_page4.wp_web_page_sk, SUM(web_returns1.wr_return_amt) AS RETURNS, SUM(web_returns1.wr_net_loss) AS PROFIT_LOSS FROM web_returns AS web_returns1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-08-26' AND d_date <= (DATE '2000-08-26' + 30 * INTERVAL '1' DAY)) AS t46 ON web_returns1.wr_returned_date_sk = t46.d_date_sk INNER JOIN web_page AS web_page4 ON web_returns1.wr_web_page_sk = web_page4.wp_web_page_sk GROUP BY web_page4.wp_web_page_sk) AS t47 ON t45.wp_web_page_sk = t47.wp_web_page_sk) AS t49) ORDER BY CHANNEL, ID FETCH NEXT 100 ROWS ONLY
select count(*) from store_sales ,household_demographics ,time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 20 and time_dim.t_minute >= 30 and household_demographics.hd_dep_count = 9 and store.s_store_name = 'ese' order by count(*) limit 100
SELECT COUNT(*) FROM store_sales INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 9) AS t ON store_sales.ss_hdemo_sk = t.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 20 AND t_minute >= 30) AS t0 ON store_sales.ss_sold_time_sk = t0.t_time_sk INNER JOIN (SELECT * FROM store WHERE s_store_name = 'ese') AS t1 ON store_sales.ss_store_sk = t1.s_store_sk ORDER BY 1 FETCH NEXT 100 ROWS ONLY
with ss as ( select i_item_id,sum(ss_ext_sales_price) total_sales from store_sales, date_dim, customer_address, item where i_item_id in (select i_item_id from item where i_color in ('orchid','rosy','plum')) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 6 and ss_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_item_id), cs as ( select i_item_id,sum(cs_ext_sales_price) total_sales from catalog_sales, date_dim, customer_address, item where i_item_id in (select i_item_id from item where i_color in ('orchid','rosy','plum')) and cs_item_sk = i_item_sk and cs_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 6 and cs_bill_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_item_id), ws as ( select i_item_id,sum(ws_ext_sales_price) total_sales from web_sales, date_dim, customer_address, item where i_item_id in (select i_item_id from item where i_color in ('orchid','rosy','plum')) and ws_item_sk = i_item_sk and ws_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 6 and ws_bill_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_item_id) select i_item_id ,sum(total_sales) total_sales from (select * from ss union all select * from cs union all select * from ws) tmp1 group by i_item_id order by total_sales, i_item_id limit 100
SELECT i_item_id, SUM(TOTAL_SALES) AS TOTAL_SALES FROM (SELECT t3.i_item_id, SUM(store_sales.ss_ext_sales_price) AS TOTAL_SALES FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 6) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t0 ON store_sales.ss_addr_sk = t0.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_item_id IN (SELECT i_item_id AS I_ITEM_ID FROM item WHERE i_color = 'orchid' OR i_color = 'rosy' OR i_color = 'plum')) AS t3 ON store_sales.ss_item_sk = t3.i_item_sk GROUP BY t3.i_item_id UNION ALL SELECT t9.i_item_id, SUM(catalog_sales.cs_ext_sales_price) AS TOTAL_SALES FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 6) AS t5 ON catalog_sales.cs_sold_date_sk = t5.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t6 ON catalog_sales.cs_bill_addr_sk = t6.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_item_id IN (SELECT i_item_id AS I_ITEM_ID FROM item WHERE i_color = 'orchid' OR i_color = 'rosy' OR i_color = 'plum')) AS t9 ON catalog_sales.cs_item_sk = t9.i_item_sk GROUP BY t9.i_item_id UNION ALL SELECT t15.i_item_id, SUM(web_sales.ws_ext_sales_price) AS TOTAL_SALES FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 6) AS t11 ON web_sales.ws_sold_date_sk = t11.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t12 ON web_sales.ws_bill_addr_sk = t12.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_item_id IN (SELECT i_item_id AS I_ITEM_ID FROM item WHERE i_color = 'orchid' OR i_color = 'rosy' OR i_color = 'plum')) AS t15 ON web_sales.ws_item_sk = t15.i_item_sk GROUP BY t15.i_item_id) AS t17 GROUP BY i_item_id ORDER BY 2, i_item_id FETCH NEXT 100 ROWS ONLY
with wscs as (select sold_date_sk ,sales_price from (select ws_sold_date_sk sold_date_sk ,ws_ext_sales_price sales_price from web_sales union all select cs_sold_date_sk sold_date_sk ,cs_ext_sales_price sales_price from catalog_sales)), wswscs as (select d_week_seq, sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales, sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales, sum(case when (d_day_name='Tuesday') then sales_price else null end) tue_sales, sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales, sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales, sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales, sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales from wscs ,date_dim where d_date_sk = sold_date_sk group by d_week_seq) select d_week_seq1 ,round(sun_sales1/sun_sales2,2) ,round(mon_sales1/mon_sales2,2) ,round(tue_sales1/tue_sales2,2) ,round(wed_sales1/wed_sales2,2) ,round(thu_sales1/thu_sales2,2) ,round(fri_sales1/fri_sales2,2) ,round(sat_sales1/sat_sales2,2) from (select wswscs.d_week_seq d_week_seq1 ,sun_sales sun_sales1 ,mon_sales mon_sales1 ,tue_sales tue_sales1 ,wed_sales wed_sales1 ,thu_sales thu_sales1 ,fri_sales fri_sales1 ,sat_sales sat_sales1 from wswscs,date_dim where date_dim.d_week_seq = wswscs.d_week_seq and d_year = 1998) y, (select wswscs.d_week_seq d_week_seq2 ,sun_sales sun_sales2 ,mon_sales mon_sales2 ,tue_sales tue_sales2 ,wed_sales wed_sales2 ,thu_sales thu_sales2 ,fri_sales fri_sales2 ,sat_sales sat_sales2 from wswscs ,date_dim where date_dim.d_week_seq = wswscs.d_week_seq and d_year = 1998+1) z where d_week_seq1=d_week_seq2-53 order by d_week_seq1
SELECT t5.D_WEEK_SEQ1, ROUND(t5.SUN_SALES1 / t12.SUN_SALES2, 2), ROUND(t5.MON_SALES1 / t12.MON_SALES2, 2), ROUND(t5.TUE_SALES1 / t12.TUE_SALES2, 2), ROUND(t5.WED_SALES1 / t12.WED_SALES2, 2), ROUND(t5.THU_SALES1 / t12.THU_SALES2, 2), ROUND(t5.FRI_SALES1 / t12.FRI_SALES2, 2), ROUND(t5.SAT_SALES1 / t12.SAT_SALES2, 2) FROM (SELECT t3.D_WEEK_SEQ AS D_WEEK_SEQ1, t3.SUN_SALES AS SUN_SALES1, t3.MON_SALES AS MON_SALES1, t3.TUE_SALES AS TUE_SALES1, t3.WED_SALES AS WED_SALES1, t3.THU_SALES AS THU_SALES1, t3.FRI_SALES AS FRI_SALES1, t3.SAT_SALES AS SAT_SALES1 FROM (SELECT date_dim.d_week_seq AS D_WEEK_SEQ, SUM(CASE WHEN date_dim.d_day_name = 'Sunday' THEN t1.SALES_PRICE ELSE NULL END) AS SUN_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Monday' THEN t1.SALES_PRICE ELSE NULL END) AS MON_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Tuesday' THEN t1.SALES_PRICE ELSE NULL END) AS TUE_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Wednesday' THEN t1.SALES_PRICE ELSE NULL END) AS WED_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Thursday' THEN t1.SALES_PRICE ELSE NULL END) AS THU_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Friday' THEN t1.SALES_PRICE ELSE NULL END) AS FRI_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Saturday' THEN t1.SALES_PRICE ELSE NULL END) AS SAT_SALES FROM (SELECT ws_sold_date_sk AS SOLD_DATE_SK, ws_ext_sales_price AS SALES_PRICE FROM web_sales UNION ALL SELECT cs_sold_date_sk AS SOLD_DATE_SK, cs_ext_sales_price AS SALES_PRICE FROM catalog_sales) AS t1 INNER JOIN date_dim ON t1.SOLD_DATE_SK = date_dim.d_date_sk GROUP BY date_dim.d_week_seq) AS t3 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t4 ON t3.D_WEEK_SEQ = t4.d_week_seq) AS t5 INNER JOIN (SELECT t10.D_WEEK_SEQ AS D_WEEK_SEQ2, t10.SUN_SALES AS SUN_SALES2, t10.MON_SALES AS MON_SALES2, t10.TUE_SALES AS TUE_SALES2, t10.WED_SALES AS WED_SALES2, t10.THU_SALES AS THU_SALES2, t10.FRI_SALES AS FRI_SALES2, t10.SAT_SALES AS SAT_SALES2 FROM (SELECT date_dim1.d_week_seq AS D_WEEK_SEQ, SUM(CASE WHEN date_dim1.d_day_name = 'Sunday' THEN t8.SALES_PRICE ELSE NULL END) AS SUN_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Monday' THEN t8.SALES_PRICE ELSE NULL END) AS MON_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Tuesday' THEN t8.SALES_PRICE ELSE NULL END) AS TUE_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Wednesday' THEN t8.SALES_PRICE ELSE NULL END) AS WED_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Thursday' THEN t8.SALES_PRICE ELSE NULL END) AS THU_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Friday' THEN t8.SALES_PRICE ELSE NULL END) AS FRI_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Saturday' THEN t8.SALES_PRICE ELSE NULL END) AS SAT_SALES FROM (SELECT ws_sold_date_sk AS SOLD_DATE_SK, ws_ext_sales_price AS SALES_PRICE FROM web_sales UNION ALL SELECT cs_sold_date_sk AS SOLD_DATE_SK, cs_ext_sales_price AS SALES_PRICE FROM catalog_sales) AS t8 INNER JOIN date_dim AS date_dim1 ON t8.SOLD_DATE_SK = date_dim1.d_date_sk GROUP BY date_dim1.d_week_seq) AS t10 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 + 1) AS t11 ON t10.D_WEEK_SEQ = t11.d_week_seq) AS t12 ON t5.D_WEEK_SEQ1 = t12.D_WEEK_SEQ2 - 53 ORDER BY t5.D_WEEK_SEQ1
select i_item_id ,i_item_desc ,s_state ,count(ss_quantity) as store_sales_quantitycount ,avg(ss_quantity) as store_sales_quantityave ,stddev_samp(ss_quantity) as store_sales_quantitystdev ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov ,count(sr_return_quantity) as store_returns_quantitycount ,avg(sr_return_quantity) as store_returns_quantityave ,stddev_samp(sr_return_quantity) as store_returns_quantitystdev ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave ,stddev_samp(cs_quantity) as catalog_sales_quantitystdev ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov from store_sales ,store_returns ,catalog_sales ,date_dim d1 ,date_dim d2 ,date_dim d3 ,store ,item where d1.d_quarter_name = '2000Q1' and d1.d_date_sk = ss_sold_date_sk and i_item_sk = ss_item_sk and s_store_sk = ss_store_sk and ss_customer_sk = sr_customer_sk and ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number and sr_returned_date_sk = d2.d_date_sk and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3') and sr_customer_sk = cs_bill_customer_sk and sr_item_sk = cs_item_sk and cs_sold_date_sk = d3.d_date_sk and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3') group by i_item_id ,i_item_desc ,s_state order by i_item_id ,i_item_desc ,s_state limit 100
SELECT item.i_item_id AS I_ITEM_ID, item.i_item_desc AS I_ITEM_DESC, store.s_state AS S_STATE, COUNT(store_sales.ss_quantity) AS STORE_SALES_QUANTITYCOUNT, AVG(store_sales.ss_quantity) AS STORE_SALES_QUANTITYAVE, STDDEV_SAMP(store_sales.ss_quantity) AS STORE_SALES_QUANTITYSTDEV, STDDEV_SAMP(store_sales.ss_quantity) / AVG(store_sales.ss_quantity) AS STORE_SALES_QUANTITYCOV, COUNT(store_returns.sr_return_quantity) AS STORE_RETURNS_QUANTITYCOUNT, AVG(store_returns.sr_return_quantity) AS STORE_RETURNS_QUANTITYAVE, STDDEV_SAMP(store_returns.sr_return_quantity) AS STORE_RETURNS_QUANTITYSTDEV, STDDEV_SAMP(store_returns.sr_return_quantity) / AVG(store_returns.sr_return_quantity) AS STORE_RETURNS_QUANTITYCOV, COUNT(catalog_sales.cs_quantity) AS CATALOG_SALES_QUANTITYCOUNT, AVG(catalog_sales.cs_quantity) AS CATALOG_SALES_QUANTITYAVE, STDDEV_SAMP(catalog_sales.cs_quantity) AS CATALOG_SALES_QUANTITYSTDEV, STDDEV_SAMP(catalog_sales.cs_quantity) / AVG(catalog_sales.cs_quantity) AS CATALOG_SALES_QUANTITYCOV FROM store_sales INNER JOIN store_returns ON store_sales.ss_customer_sk = store_returns.sr_customer_sk AND store_sales.ss_item_sk = store_returns.sr_item_sk AND store_sales.ss_ticket_number = store_returns.sr_ticket_number INNER JOIN catalog_sales ON store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk AND store_returns.sr_item_sk = catalog_sales.cs_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_quarter_name = '2000Q1') AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM date_dim WHERE d_quarter_name IN ('2000Q1', '2000Q2', '2000Q3')) AS t0 ON store_returns.sr_returned_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM date_dim WHERE d_quarter_name IN ('2000Q1', '2000Q2', '2000Q3')) AS t1 ON catalog_sales.cs_sold_date_sk = t1.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY store.s_state, item.i_item_id, item.i_item_desc ORDER BY item.i_item_id, item.i_item_desc, store.s_state FETCH NEXT 100 ROWS ONLY
with ssr as (select s_store_id, sum(sales_price) as sales, sum(profit) as profit, sum(return_amt) as returns, sum(net_loss) as profit_loss from ( select ss_store_sk as store_sk, ss_sold_date_sk as date_sk, ss_ext_sales_price as sales_price, ss_net_profit as profit, cast(0 as decimal(7,2)) as return_amt, cast(0 as decimal(7,2)) as net_loss from store_sales union all select sr_store_sk as store_sk, sr_returned_date_sk as date_sk, cast(0 as decimal(7,2)) as sales_price, cast(0 as decimal(7,2)) as profit, sr_return_amt as return_amt, sr_net_loss as net_loss from store_returns ) salesreturns, date_dim, store where date_sk = d_date_sk and d_date between cast('2001-08-21' as date) and (cast('2001-08-21' as date) + interval 14 days) and store_sk = s_store_sk group by s_store_id) , csr as (select cp_catalog_page_id, sum(sales_price) as sales, sum(profit) as profit, sum(return_amt) as returns, sum(net_loss) as profit_loss from ( select cs_catalog_page_sk as page_sk, cs_sold_date_sk as date_sk, cs_ext_sales_price as sales_price, cs_net_profit as profit, cast(0 as decimal(7,2)) as return_amt, cast(0 as decimal(7,2)) as net_loss from catalog_sales union all select cr_catalog_page_sk as page_sk, cr_returned_date_sk as date_sk, cast(0 as decimal(7,2)) as sales_price, cast(0 as decimal(7,2)) as profit, cr_return_amount as return_amt, cr_net_loss as net_loss from catalog_returns ) salesreturns, date_dim, catalog_page where date_sk = d_date_sk and d_date between cast('2001-08-21' as date) and (cast('2001-08-21' as date) + interval 14 days) and page_sk = cp_catalog_page_sk group by cp_catalog_page_id) , wsr as (select web_site_id, sum(sales_price) as sales, sum(profit) as profit, sum(return_amt) as returns, sum(net_loss) as profit_loss from ( select ws_web_site_sk as wsr_web_site_sk, ws_sold_date_sk as date_sk, ws_ext_sales_price as sales_price, ws_net_profit as profit, cast(0 as decimal(7,2)) as return_amt, cast(0 as decimal(7,2)) as net_loss from web_sales union all select ws_web_site_sk as wsr_web_site_sk, wr_returned_date_sk as date_sk, cast(0 as decimal(7,2)) as sales_price, cast(0 as decimal(7,2)) as profit, wr_return_amt as return_amt, wr_net_loss as net_loss from web_returns left outer join web_sales on ( wr_item_sk = ws_item_sk and wr_order_number = ws_order_number) ) salesreturns, date_dim, web_site where date_sk = d_date_sk and d_date between cast('2001-08-21' as date) and (cast('2001-08-21' as date) + interval 14 days) and wsr_web_site_sk = web_site_sk group by web_site_id) select channel , id , sum(sales) as sales , sum(returns) as returns , sum(profit) as profit from (select 'store channel' as channel , 'store' || s_store_id as id , sales , returns , (profit - profit_loss) as profit from ssr union all select 'catalog channel' as channel , 'catalog_page' || cp_catalog_page_id as id , sales , returns , (profit - profit_loss) as profit from csr union all select 'web channel' as channel , 'web_site' || web_site_id as id , sales , returns , (profit - profit_loss) as profit from wsr ) x group by rollup (channel, id) order by channel ,id limit 100
SELECT CHANNEL, ID, SUM(SALES) AS SALES, SUM(RETURNS) AS RETURNS, SUM(PROFIT) AS PROFIT FROM (SELECT 'store channel' AS CHANNEL, 'store' || store.s_store_id AS ID, SUM(t1.SALES_PRICE) AS SALES, SUM(t1.RETURN_AMT) AS RETURNS, SUM(t1.PROFIT) - SUM(t1.NET_LOSS) AS PROFIT FROM (SELECT ss_store_sk AS STORE_SK, ss_sold_date_sk AS DATE_SK, ss_ext_sales_price AS SALES_PRICE, ss_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM store_sales UNION ALL SELECT sr_store_sk AS STORE_SK, sr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, sr_return_amt AS RETURN_AMT, sr_net_loss AS NET_LOSS FROM store_returns) AS t1 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2001-08-21' AND d_date <= (DATE '2001-08-21' + 14 * INTERVAL '1' DAY)) AS t2 ON t1.DATE_SK = t2.d_date_sk INNER JOIN store ON t1.STORE_SK = store.s_store_sk GROUP BY store.s_store_id UNION ALL SELECT 'catalog channel' AS CHANNEL, 'catalog_page' || catalog_page.cp_catalog_page_id AS ID, SUM(t7.SALES_PRICE) AS SALES, SUM(t7.RETURN_AMT) AS RETURNS, SUM(t7.PROFIT) - SUM(t7.NET_LOSS) AS PROFIT FROM (SELECT cs_catalog_page_sk AS PAGE_SK, cs_sold_date_sk AS DATE_SK, cs_ext_sales_price AS SALES_PRICE, cs_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM catalog_sales UNION ALL SELECT cr_catalog_page_sk AS PAGE_SK, cr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, cr_return_amount AS RETURN_AMT, cr_net_loss AS NET_LOSS FROM catalog_returns) AS t7 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2001-08-21' AND d_date <= (DATE '2001-08-21' + 14 * INTERVAL '1' DAY)) AS t8 ON t7.DATE_SK = t8.d_date_sk INNER JOIN catalog_page ON t7.PAGE_SK = catalog_page.cp_catalog_page_sk GROUP BY catalog_page.cp_catalog_page_id UNION ALL SELECT 'web channel' AS CHANNEL, 'web_site' || web_site.web_site_id AS ID, SUM(t13.SALES_PRICE) AS SALES, SUM(t13.RETURN_AMT) AS RETURNS, SUM(t13.PROFIT) - SUM(t13.NET_LOSS) AS PROFIT FROM (SELECT ws_web_site_sk AS WSR_WEB_SITE_SK, ws_sold_date_sk AS DATE_SK, ws_ext_sales_price AS SALES_PRICE, ws_net_profit AS PROFIT, 0 AS RETURN_AMT, 0 AS NET_LOSS FROM web_sales UNION ALL SELECT web_sales0.ws_web_site_sk AS WSR_WEB_SITE_SK, web_returns.wr_returned_date_sk AS DATE_SK, 0 AS SALES_PRICE, 0 AS PROFIT, web_returns.wr_return_amt AS RETURN_AMT, web_returns.wr_net_loss AS NET_LOSS FROM web_returns LEFT JOIN web_sales AS web_sales0 ON web_returns.wr_item_sk = web_sales0.ws_item_sk AND web_returns.wr_order_number = web_sales0.ws_order_number) AS t13 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2001-08-21' AND d_date <= (DATE '2001-08-21' + 14 * INTERVAL '1' DAY)) AS t14 ON t13.DATE_SK = t14.d_date_sk INNER JOIN web_site ON t13.WSR_WEB_SITE_SK = web_site.web_site_sk GROUP BY web_site.web_site_id) AS t17 GROUP BY ROLLUP(CHANNEL, ID) ORDER BY CHANNEL, ID FETCH NEXT 100 ROWS ONLY
select c_last_name ,c_first_name ,c_salutation ,c_preferred_cust_flag ,ss_ticket_number ,cnt from (select ss_ticket_number ,ss_customer_sk ,count(*) cnt from store_sales,date_dim,store,household_demographics where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28) and (household_demographics.hd_buy_potential = '501-1000' or household_demographics.hd_buy_potential = '5001-10000') and household_demographics.hd_vehicle_count > 0 and (case when household_demographics.hd_vehicle_count > 0 then household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end) > 1.2 and date_dim.d_year in (2000,2000+1,2000+2) and store.s_county in ('Williamson County','Williamson County','Williamson County','Williamson County', 'Williamson County','Williamson County','Williamson County','Williamson County') group by ss_ticket_number,ss_customer_sk) dn,customer where ss_customer_sk = c_customer_sk and cnt between 15 and 20 order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc, ss_ticket_number
SELECT customer.c_last_name AS C_LAST_NAME, customer.c_first_name AS C_FIRST_NAME, customer.c_salutation AS C_SALUTATION, customer.c_preferred_cust_flag AS C_PREFERRED_CUST_FLAG, t5.ss_ticket_number AS SS_TICKET_NUMBER, t5.CNT FROM customer INNER JOIN (SELECT t1.ss_ticket_number, t1.ss_customer_sk, COUNT(*) AS CNT FROM (SELECT store_sales.ss_sold_date_sk, store_sales.ss_sold_time_sk, store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_cdemo_sk, store_sales.ss_hdemo_sk, store_sales.ss_addr_sk, store_sales.ss_store_sk, store_sales.ss_promo_sk, store_sales.ss_ticket_number, store_sales.ss_quantity, store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_sales_price, store_sales.ss_ext_discount_amt, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_ext_list_price, store_sales.ss_ext_tax, store_sales.ss_coupon_amt, store_sales.ss_net_paid, store_sales.ss_net_paid_inc_tax, store_sales.ss_net_profit, t0.d_date_sk, t0.d_date_id, t0.d_date, t0.d_month_seq, t0.d_week_seq, t0.d_quarter_seq, t0.d_year, t0.d_dow, t0.d_moy, t0.d_dom, t0.d_qoy, t0.d_fy_year, t0.d_fy_quarter_seq, t0.d_fy_week_seq, t0.d_day_name, t0.d_quarter_name, t0.d_holiday, t0.d_weekend, t0.d_following_holiday, t0.d_first_dom, t0.d_last_dom, t0.d_same_day_ly, t0.d_same_day_lq, t0.d_current_day, t0.d_current_week, t0.d_current_month, t0.d_current_quarter, t0.d_current_year, t.hd_demo_sk, t.hd_income_band_sk, t.hd_buy_potential, t.hd_dep_count, t.hd_vehicle_count FROM store_sales INNER JOIN (SELECT * FROM household_demographics WHERE hd_buy_potential IN ('5001-10000', '501-1000') AND hd_vehicle_count > 0 AND CASE WHEN hd_vehicle_count > 0 THEN hd_dep_count / hd_vehicle_count > 1.2 ELSE FALSE END) AS t ON store_sales.ss_hdemo_sk = t.hd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE (d_dom >= 1 AND d_dom <= 3 OR d_dom >= 25 AND d_dom <= 28) AND (d_year = 2000 OR d_year = 2000 + 1 OR d_year = 2000 + 2)) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk) AS t1 INNER JOIN (SELECT * FROM store WHERE s_county = 'Williamson County') AS t2 ON t1.ss_store_sk = t2.s_store_sk GROUP BY t1.ss_customer_sk, t1.ss_ticket_number HAVING COUNT(*) >= 15 AND COUNT(*) <= 20) AS t5 ON customer.c_customer_sk = t5.ss_customer_sk ORDER BY customer.c_last_name, customer.c_first_name, customer.c_salutation, customer.c_preferred_cust_flag DESC, t5.ss_ticket_number
select * from (select avg(ss_list_price) B1_LP ,count(ss_list_price) B1_CNT ,count(distinct ss_list_price) B1_CNTD from store_sales where ss_quantity between 0 and 5 and (ss_list_price between 48 and 48+10 or ss_coupon_amt between 16371 and 16371+1000 or ss_wholesale_cost between 58 and 58+20)) B1, (select avg(ss_list_price) B2_LP ,count(ss_list_price) B2_CNT ,count(distinct ss_list_price) B2_CNTD from store_sales where ss_quantity between 6 and 10 and (ss_list_price between 7 and 7+10 or ss_coupon_amt between 13024 and 13024+1000 or ss_wholesale_cost between 74 and 74+20)) B2, (select avg(ss_list_price) B3_LP ,count(ss_list_price) B3_CNT ,count(distinct ss_list_price) B3_CNTD from store_sales where ss_quantity between 11 and 15 and (ss_list_price between 112 and 112+10 or ss_coupon_amt between 11192 and 11192+1000 or ss_wholesale_cost between 34 and 34+20)) B3, (select avg(ss_list_price) B4_LP ,count(ss_list_price) B4_CNT ,count(distinct ss_list_price) B4_CNTD from store_sales where ss_quantity between 16 and 20 and (ss_list_price between 8 and 8+10 or ss_coupon_amt between 17686 and 17686+1000 or ss_wholesale_cost between 3 and 3+20)) B4, (select avg(ss_list_price) B5_LP ,count(ss_list_price) B5_CNT ,count(distinct ss_list_price) B5_CNTD from store_sales where ss_quantity between 21 and 25 and (ss_list_price between 172 and 172+10 or ss_coupon_amt between 41 and 41+1000 or ss_wholesale_cost between 67 and 67+20)) B5, (select avg(ss_list_price) B6_LP ,count(ss_list_price) B6_CNT ,count(distinct ss_list_price) B6_CNTD from store_sales where ss_quantity between 26 and 30 and (ss_list_price between 93 and 93+10 or ss_coupon_amt between 3848 and 3848+1000 or ss_wholesale_cost between 47 and 47+20)) B6 limit 100
SELECT * FROM (SELECT AVG(ss_list_price) AS B1_LP, COUNT(ss_list_price) AS B1_CNT, COUNT(DISTINCT ss_list_price) AS B1_CNTD FROM store_sales WHERE ss_quantity >= 0 AND ss_quantity <= 5 AND (ss_list_price >= 48 AND ss_list_price <= 48 + 10 OR ss_coupon_amt >= 16371 AND ss_coupon_amt <= 16371 + 1000 OR ss_wholesale_cost >= 58 AND ss_wholesale_cost <= 58 + 20)) AS t0, (SELECT AVG(ss_list_price) AS B2_LP, COUNT(ss_list_price) AS B2_CNT, COUNT(DISTINCT ss_list_price) AS B2_CNTD FROM store_sales WHERE ss_quantity >= 6 AND ss_quantity <= 10 AND (ss_list_price >= 7 AND ss_list_price <= 7 + 10 OR ss_coupon_amt >= 13024 AND ss_coupon_amt <= 13024 + 1000 OR ss_wholesale_cost >= 74 AND ss_wholesale_cost <= 74 + 20)) AS t2, (SELECT AVG(ss_list_price) AS B3_LP, COUNT(ss_list_price) AS B3_CNT, COUNT(DISTINCT ss_list_price) AS B3_CNTD FROM store_sales WHERE ss_quantity >= 11 AND ss_quantity <= 15 AND (ss_list_price >= 112 AND ss_list_price <= 112 + 10 OR ss_coupon_amt >= 11192 AND ss_coupon_amt <= 11192 + 1000 OR ss_wholesale_cost >= 34 AND ss_wholesale_cost <= 34 + 20)) AS t4, (SELECT AVG(ss_list_price) AS B4_LP, COUNT(ss_list_price) AS B4_CNT, COUNT(DISTINCT ss_list_price) AS B4_CNTD FROM store_sales WHERE ss_quantity >= 16 AND ss_quantity <= 20 AND (ss_list_price >= 8 AND ss_list_price <= 8 + 10 OR ss_coupon_amt >= 17686 AND ss_coupon_amt <= 17686 + 1000 OR ss_wholesale_cost >= 3 AND ss_wholesale_cost <= 3 + 20)) AS t6, (SELECT AVG(ss_list_price) AS B5_LP, COUNT(ss_list_price) AS B5_CNT, COUNT(DISTINCT ss_list_price) AS B5_CNTD FROM store_sales WHERE ss_quantity >= 21 AND ss_quantity <= 25 AND (ss_list_price >= 172 AND ss_list_price <= 172 + 10 OR ss_coupon_amt >= 41 AND ss_coupon_amt <= 41 + 1000 OR ss_wholesale_cost >= 67 AND ss_wholesale_cost <= 67 + 20)) AS t8, (SELECT AVG(ss_list_price) AS B6_LP, COUNT(ss_list_price) AS B6_CNT, COUNT(DISTINCT ss_list_price) AS B6_CNTD FROM store_sales WHERE ss_quantity >= 26 AND ss_quantity <= 30 AND (ss_list_price >= 93 AND ss_list_price <= 93 + 10 OR ss_coupon_amt >= 3848 AND ss_coupon_amt <= 3848 + 1000 OR ss_wholesale_cost >= 47 AND ss_wholesale_cost <= 47 + 20)) AS t10 FETCH NEXT 100 ROWS ONLY
select case when (select count(*) from store_sales where ss_quantity between 1 and 20) > 37588 then (select avg(ss_ext_sales_price) from store_sales where ss_quantity between 1 and 20) else (select avg(ss_net_profit) from store_sales where ss_quantity between 1 and 20) end bucket1 , case when (select count(*) from store_sales where ss_quantity between 21 and 40) > 4587 then (select avg(ss_ext_sales_price) from store_sales where ss_quantity between 21 and 40) else (select avg(ss_net_profit) from store_sales where ss_quantity between 21 and 40) end bucket2, case when (select count(*) from store_sales where ss_quantity between 41 and 60) > 23513 then (select avg(ss_ext_sales_price) from store_sales where ss_quantity between 41 and 60) else (select avg(ss_net_profit) from store_sales where ss_quantity between 41 and 60) end bucket3, case when (select count(*) from store_sales where ss_quantity between 61 and 80) > 18745 then (select avg(ss_ext_sales_price) from store_sales where ss_quantity between 61 and 80) else (select avg(ss_net_profit) from store_sales where ss_quantity between 61 and 80) end bucket4, case when (select count(*) from store_sales where ss_quantity between 81 and 100) > 447 then (select avg(ss_ext_sales_price) from store_sales where ss_quantity between 81 and 100) else (select avg(ss_net_profit) from store_sales where ss_quantity between 81 and 100) end bucket5 from reason where r_reason_sk = 1
SELECT CASE WHEN (((SELECT COUNT(*) FROM store_sales WHERE ss_quantity >= 1 AND ss_quantity <= 20))) > 37588 THEN ((SELECT AVG(ss_ext_sales_price) FROM store_sales WHERE ss_quantity >= 1 AND ss_quantity <= 20)) ELSE ((SELECT AVG(ss_net_profit) FROM store_sales WHERE ss_quantity >= 1 AND ss_quantity <= 20)) END AS BUCKET1, CASE WHEN (((SELECT COUNT(*) FROM store_sales WHERE ss_quantity >= 21 AND ss_quantity <= 40))) > 4587 THEN ((SELECT AVG(ss_ext_sales_price) FROM store_sales WHERE ss_quantity >= 21 AND ss_quantity <= 40)) ELSE ((SELECT AVG(ss_net_profit) FROM store_sales WHERE ss_quantity >= 21 AND ss_quantity <= 40)) END AS BUCKET2, CASE WHEN (((SELECT COUNT(*) FROM store_sales WHERE ss_quantity >= 41 AND ss_quantity <= 60))) > 23513 THEN ((SELECT AVG(ss_ext_sales_price) FROM store_sales WHERE ss_quantity >= 41 AND ss_quantity <= 60)) ELSE ((SELECT AVG(ss_net_profit) FROM store_sales WHERE ss_quantity >= 41 AND ss_quantity <= 60)) END AS BUCKET3, CASE WHEN (((SELECT COUNT(*) FROM store_sales WHERE ss_quantity >= 61 AND ss_quantity <= 80))) > 18745 THEN ((SELECT AVG(ss_ext_sales_price) FROM store_sales WHERE ss_quantity >= 61 AND ss_quantity <= 80)) ELSE ((SELECT AVG(ss_net_profit) FROM store_sales WHERE ss_quantity >= 61 AND ss_quantity <= 80)) END AS BUCKET4, CASE WHEN (((SELECT COUNT(*) FROM store_sales WHERE ss_quantity >= 81 AND ss_quantity <= 100))) > 447 THEN ((SELECT AVG(ss_ext_sales_price) FROM store_sales WHERE ss_quantity >= 81 AND ss_quantity <= 100)) ELSE ((SELECT AVG(ss_net_profit) FROM store_sales WHERE ss_quantity >= 81 AND ss_quantity <= 100)) END AS BUCKET5 FROM reason WHERE r_reason_sk = 1
select * from (select count(*) h8_30_to_9 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 8 and time_dim.t_minute >= 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s1, (select count(*) h9_to_9_30 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 9 and time_dim.t_minute < 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s2, (select count(*) h9_30_to_10 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 9 and time_dim.t_minute >= 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s3, (select count(*) h10_to_10_30 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 10 and time_dim.t_minute < 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s4, (select count(*) h10_30_to_11 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 10 and time_dim.t_minute >= 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s5, (select count(*) h11_to_11_30 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 11 and time_dim.t_minute < 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s6, (select count(*) h11_30_to_12 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 11 and time_dim.t_minute >= 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s7, (select count(*) h12_to_12_30 from store_sales, household_demographics , time_dim, store where ss_sold_time_sk = time_dim.t_time_sk and ss_hdemo_sk = household_demographics.hd_demo_sk and ss_store_sk = s_store_sk and time_dim.t_hour = 12 and time_dim.t_minute < 30 and ((household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or (household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or (household_demographics.hd_dep_count = 4 and household_demographics.hd_vehicle_count<=4+2)) and store.s_store_name = 'ese') s8
SELECT * FROM (SELECT COUNT(*) AS H8_30_TO_9 FROM (SELECT * FROM store WHERE s_store_name = 'ese') AS t INNER JOIN (store_sales INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t0 ON store_sales.ss_hdemo_sk = t0.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 8 AND t_minute >= 30) AS t1 ON store_sales.ss_sold_time_sk = t1.t_time_sk) ON t.s_store_sk = store_sales.ss_store_sk) AS t2, (SELECT COUNT(*) AS H9_TO_9_30 FROM (SELECT * FROM store WHERE s_store_name = 'ese') AS t3 INNER JOIN (store_sales AS store_sales0 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t4 ON store_sales0.ss_hdemo_sk = t4.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 9 AND t_minute < 30) AS t5 ON store_sales0.ss_sold_time_sk = t5.t_time_sk) ON t3.s_store_sk = store_sales0.ss_store_sk) AS t6, (SELECT COUNT(*) AS H9_30_TO_10 FROM (SELECT * FROM store WHERE s_store_name = 'ese') AS t7 INNER JOIN (store_sales AS store_sales1 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t8 ON store_sales1.ss_hdemo_sk = t8.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 9 AND t_minute >= 30) AS t9 ON store_sales1.ss_sold_time_sk = t9.t_time_sk) ON t7.s_store_sk = store_sales1.ss_store_sk) AS t10, (SELECT COUNT(*) AS H10_TO_10_30 FROM store_sales AS store_sales2 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t11 ON store_sales2.ss_hdemo_sk = t11.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 10 AND t_minute < 30) AS t12 ON store_sales2.ss_sold_time_sk = t12.t_time_sk INNER JOIN (SELECT * FROM store WHERE s_store_name = 'ese') AS t13 ON store_sales2.ss_store_sk = t13.s_store_sk) AS t14, (SELECT COUNT(*) AS H10_30_TO_11 FROM store_sales AS store_sales3 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t15 ON store_sales3.ss_hdemo_sk = t15.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 10 AND t_minute >= 30) AS t16 ON store_sales3.ss_sold_time_sk = t16.t_time_sk INNER JOIN (SELECT * FROM store WHERE s_store_name = 'ese') AS t17 ON store_sales3.ss_store_sk = t17.s_store_sk) AS t18, (SELECT COUNT(*) AS H11_TO_11_30 FROM (SELECT * FROM store WHERE s_store_name = 'ese') AS t19 INNER JOIN (store_sales AS store_sales4 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t20 ON store_sales4.ss_hdemo_sk = t20.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 11 AND t_minute < 30) AS t21 ON store_sales4.ss_sold_time_sk = t21.t_time_sk) ON t19.s_store_sk = store_sales4.ss_store_sk) AS t22, (SELECT COUNT(*) AS H11_30_TO_12 FROM (SELECT * FROM store WHERE s_store_name = 'ese') AS t23 INNER JOIN (store_sales AS store_sales5 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t24 ON store_sales5.ss_hdemo_sk = t24.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 11 AND t_minute >= 30) AS t25 ON store_sales5.ss_sold_time_sk = t25.t_time_sk) ON t23.s_store_sk = store_sales5.ss_store_sk) AS t26, (SELECT COUNT(*) AS H12_TO_12_30 FROM store_sales AS store_sales6 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 0 AND hd_vehicle_count <= 2 OR hd_dep_count = 3 AND hd_vehicle_count <= 3 + 2 OR hd_dep_count = 4 AND hd_vehicle_count <= 4 + 2) AS t27 ON store_sales6.ss_hdemo_sk = t27.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour = 12 AND t_minute < 30) AS t28 ON store_sales6.ss_sold_time_sk = t28.t_time_sk INNER JOIN (SELECT * FROM store WHERE s_store_name = 'ese') AS t29 ON store_sales6.ss_store_sk = t29.s_store_sk) AS t30
select c_customer_id as customer_id , coalesce(c_last_name,'') || ', ' || coalesce(c_first_name,'') as customername from customer ,customer_address ,customer_demographics ,household_demographics ,income_band ,store_returns where ca_city = 'Jackson' and c_current_addr_sk = ca_address_sk and ib_lower_bound >= 8358 and ib_upper_bound <= 8358 + 50000 and ib_income_band_sk = hd_income_band_sk and cd_demo_sk = c_current_cdemo_sk and hd_demo_sk = c_current_hdemo_sk and sr_cdemo_sk = cd_demo_sk order by c_customer_id limit 100
SELECT customer.c_customer_id AS CUSTOMER_ID, CASE WHEN customer.c_last_name IS NOT NULL THEN CAST(customer.c_last_name AS CHAR) ELSE '' END || ', ' || CASE WHEN customer.c_first_name IS NOT NULL THEN CAST(customer.c_first_name AS CHAR) ELSE '' END AS CUSTOMERNAME FROM store_returns INNER JOIN (customer INNER JOIN (SELECT * FROM customer_address WHERE ca_city = 'Jackson') AS t ON customer.c_current_addr_sk = t.ca_address_sk INNER JOIN customer_demographics ON customer.c_current_cdemo_sk = customer_demographics.cd_demo_sk INNER JOIN household_demographics ON customer.c_current_hdemo_sk = household_demographics.hd_demo_sk INNER JOIN (SELECT * FROM income_band WHERE ib_lower_bound >= 8358 AND ib_upper_bound <= 8358 + 50000) AS t0 ON household_demographics.hd_income_band_sk = t0.ib_income_band_sk) ON store_returns.sr_cdemo_sk = customer_demographics.cd_demo_sk ORDER BY customer.c_customer_id IS NULL, customer.c_customer_id LIMIT 100
select i_brand_id brand_id, i_brand brand,t_hour,t_minute, sum(ext_price) ext_price from item, (select ws_ext_sales_price as ext_price, ws_sold_date_sk as sold_date_sk, ws_item_sk as sold_item_sk, ws_sold_time_sk as time_sk from web_sales,date_dim where d_date_sk = ws_sold_date_sk and d_moy=12 and d_year=2001 union all select cs_ext_sales_price as ext_price, cs_sold_date_sk as sold_date_sk, cs_item_sk as sold_item_sk, cs_sold_time_sk as time_sk from catalog_sales,date_dim where d_date_sk = cs_sold_date_sk and d_moy=12 and d_year=2001 union all select ss_ext_sales_price as ext_price, ss_sold_date_sk as sold_date_sk, ss_item_sk as sold_item_sk, ss_sold_time_sk as time_sk from store_sales,date_dim where d_date_sk = ss_sold_date_sk and d_moy=12 and d_year=2001 ) tmp,time_dim where sold_item_sk = i_item_sk and i_manager_id=1 and time_sk = t_time_sk and (t_meal_time = 'breakfast' or t_meal_time = 'dinner') group by i_brand, i_brand_id,t_hour,t_minute order by ext_price desc, i_brand_id
SELECT t.i_brand_id, t.i_brand, t7.t_hour, t7.t_minute, SUM(t6.EXT_PRICE) AS EXT_PRICE FROM (SELECT * FROM item WHERE i_manager_id = 1) AS t INNER JOIN (SELECT web_sales.ws_ext_sales_price AS EXT_PRICE, web_sales.ws_sold_date_sk AS SOLD_DATE_SK, web_sales.ws_item_sk AS SOLD_ITEM_SK, web_sales.ws_sold_time_sk AS TIME_SK FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_moy = 12 AND d_year = 2001) AS t0 ON web_sales.ws_sold_date_sk = t0.d_date_sk UNION ALL SELECT catalog_sales.cs_ext_sales_price AS EXT_PRICE, catalog_sales.cs_sold_date_sk AS SOLD_DATE_SK, catalog_sales.cs_item_sk AS SOLD_ITEM_SK, catalog_sales.cs_sold_time_sk AS TIME_SK FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_moy = 12 AND d_year = 2001) AS t2 ON catalog_sales.cs_sold_date_sk = t2.d_date_sk UNION ALL SELECT store_sales.ss_ext_sales_price AS EXT_PRICE, store_sales.ss_sold_date_sk AS SOLD_DATE_SK, store_sales.ss_item_sk AS SOLD_ITEM_SK, store_sales.ss_sold_time_sk AS TIME_SK FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_moy = 12 AND d_year = 2001) AS t4 ON store_sales.ss_sold_date_sk = t4.d_date_sk) AS t6 ON t.i_item_sk = t6.SOLD_ITEM_SK INNER JOIN (SELECT * FROM time_dim WHERE t_meal_time IN ('breakfast', 'dinner')) AS t7 ON t6.TIME_SK = t7.t_time_sk GROUP BY t.i_brand_id, t.i_brand, t7.t_hour, t7.t_minute ORDER BY 5 DESC, t.i_brand_id
select dt.d_year ,item.i_brand_id brand_id ,item.i_brand brand ,sum(ss_net_profit) sum_agg from date_dim dt ,store_sales ,item where dt.d_date_sk = store_sales.ss_sold_date_sk and store_sales.ss_item_sk = item.i_item_sk and item.i_manufact_id = 623 and dt.d_moy=12 group by dt.d_year ,item.i_brand ,item.i_brand_id order by dt.d_year ,sum_agg desc ,brand_id limit 100
SELECT t.d_year, t0.i_brand_id, t0.i_brand, SUM(store_sales.ss_net_profit) AS SUM_AGG FROM (SELECT * FROM date_dim WHERE d_moy = 12) AS t INNER JOIN store_sales ON t.d_date_sk = store_sales.ss_sold_date_sk INNER JOIN (SELECT * FROM item WHERE i_manufact_id = 623) AS t0 ON store_sales.ss_item_sk = t0.i_item_sk GROUP BY t.d_year, t0.i_brand_id, t0.i_brand ORDER BY t.d_year, 4 DESC, t0.i_brand_id FETCH NEXT 100 ROWS ONLY
with ws as (select d_year AS ws_sold_year, ws_item_sk, ws_bill_customer_sk ws_customer_sk, sum(ws_quantity) ws_qty, sum(ws_wholesale_cost) ws_wc, sum(ws_sales_price) ws_sp from web_sales left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk join date_dim on ws_sold_date_sk = d_date_sk where wr_order_number is null group by d_year, ws_item_sk, ws_bill_customer_sk ), cs as (select d_year AS cs_sold_year, cs_item_sk, cs_bill_customer_sk cs_customer_sk, sum(cs_quantity) cs_qty, sum(cs_wholesale_cost) cs_wc, sum(cs_sales_price) cs_sp from catalog_sales left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk join date_dim on cs_sold_date_sk = d_date_sk where cr_order_number is null group by d_year, cs_item_sk, cs_bill_customer_sk ), ss as (select d_year AS ss_sold_year, ss_item_sk, ss_customer_sk, sum(ss_quantity) ss_qty, sum(ss_wholesale_cost) ss_wc, sum(ss_sales_price) ss_sp from store_sales left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk join date_dim on ss_sold_date_sk = d_date_sk where sr_ticket_number is null group by d_year, ss_item_sk, ss_customer_sk ) select ss_sold_year, ss_item_sk, ss_customer_sk, round(ss_qty/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio, ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price, coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty, coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost, coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price from ss left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk) left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk) where (coalesce(ws_qty,0)>0 or coalesce(cs_qty, 0)>0) and ss_sold_year=2001 order by ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty desc, ss_wc desc, ss_sp desc, other_chan_qty, other_chan_wholesale_cost, other_chan_sales_price, ratio limit 100
SELECT t1.d_year AS SS_SOLD_YEAR, t1.ss_item_sk AS SS_ITEM_SK, t1.ss_customer_sk AS SS_CUSTOMER_SK, ROUND(t1.SS_QTY / (CASE WHEN t3.WS_QTY IS NOT NULL THEN CAST(t3.WS_QTY AS INTEGER) ELSE 0 END + CASE WHEN t6.CS_QTY IS NOT NULL THEN CAST(t6.CS_QTY AS INTEGER) ELSE 0 END), 2) AS RATIO, t1.SS_QTY AS STORE_QTY, t1.SS_WC AS STORE_WHOLESALE_COST, t1.SS_SP AS STORE_SALES_PRICE, CASE WHEN t3.WS_QTY IS NOT NULL THEN CAST(t3.WS_QTY AS INTEGER) ELSE 0 END + CASE WHEN t6.CS_QTY IS NOT NULL THEN CAST(t6.CS_QTY AS INTEGER) ELSE 0 END AS OTHER_CHAN_QTY, CASE WHEN t3.WS_WC IS NOT NULL THEN CAST(t3.WS_WC AS DECIMAL(19, 0)) ELSE 0 END + CASE WHEN t6.CS_WC IS NOT NULL THEN CAST(t6.CS_WC AS DECIMAL(19, 0)) ELSE 0 END AS OTHER_CHAN_WHOLESALE_COST, CASE WHEN t3.WS_SP IS NOT NULL THEN CAST(t3.WS_SP AS DECIMAL(19, 0)) ELSE 0 END + CASE WHEN t6.CS_SP IS NOT NULL THEN CAST(t6.CS_SP AS DECIMAL(19, 0)) ELSE 0 END AS OTHER_CHAN_SALES_PRICE FROM (SELECT t.d_year, t0.ss_item_sk, t0.ss_customer_sk, SUM(t0.ss_quantity) AS SS_QTY, SUM(t0.ss_wholesale_cost) AS SS_WC, SUM(t0.ss_sales_price) AS SS_SP FROM (SELECT * FROM date_dim WHERE d_year = 2001) AS t INNER JOIN (SELECT * FROM store_sales LEFT JOIN store_returns ON store_sales.ss_ticket_number = store_returns.sr_ticket_number AND store_sales.ss_item_sk = store_returns.sr_item_sk WHERE store_returns.sr_ticket_number IS NULL) AS t0 ON t.d_date_sk = t0.ss_sold_date_sk GROUP BY t.d_year, t0.ss_item_sk, t0.ss_customer_sk) AS t1 LEFT JOIN (SELECT date_dim0.d_year, t2.ws_item_sk, t2.ws_bill_customer_sk, SUM(t2.ws_quantity) AS WS_QTY, SUM(t2.ws_wholesale_cost) AS WS_WC, SUM(t2.ws_sales_price) AS WS_SP FROM date_dim AS date_dim0 INNER JOIN (SELECT * FROM web_sales LEFT JOIN web_returns ON web_sales.ws_order_number = web_returns.wr_order_number AND web_sales.ws_item_sk = web_returns.wr_item_sk WHERE web_returns.wr_order_number IS NULL) AS t2 ON date_dim0.d_date_sk = t2.ws_sold_date_sk GROUP BY date_dim0.d_year, t2.ws_item_sk, t2.ws_bill_customer_sk) AS t3 ON t1.d_year = t3.d_year AND t1.ss_item_sk = t3.ws_item_sk AND t1.ss_customer_sk = t3.ws_bill_customer_sk LEFT JOIN (SELECT date_dim1.d_year, t4.cs_item_sk, t4.cs_bill_customer_sk, SUM(t4.cs_quantity) AS CS_QTY, SUM(t4.cs_wholesale_cost) AS CS_WC, SUM(t4.cs_sales_price) AS CS_SP FROM (SELECT * FROM catalog_sales LEFT JOIN catalog_returns ON catalog_sales.cs_order_number = catalog_returns.cr_order_number AND catalog_sales.cs_item_sk = catalog_returns.cr_item_sk WHERE catalog_returns.cr_order_number IS NULL) AS t4 INNER JOIN date_dim AS date_dim1 ON t4.cs_sold_date_sk = date_dim1.d_date_sk GROUP BY t4.cs_bill_customer_sk, t4.cs_item_sk, date_dim1.d_year) AS t6 ON t1.d_year = t6.d_year AND t1.ss_item_sk = t6.cs_item_sk AND t1.ss_customer_sk = t6.cs_bill_customer_sk WHERE CASE WHEN t3.WS_QTY IS NOT NULL THEN CAST(t3.WS_QTY AS INTEGER) > 0 ELSE FALSE END OR CASE WHEN t6.CS_QTY IS NOT NULL THEN CAST(t6.CS_QTY AS INTEGER) > 0 ELSE FALSE END ORDER BY t1.d_year, t1.ss_item_sk, t1.ss_customer_sk, t1.SS_QTY DESC, t1.SS_WC DESC, t1.SS_SP DESC, 8, 9, 10, 4 FETCH NEXT 100 ROWS ONLY
with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_ext_sales_price) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id=6 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'magenta' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name
SELECT c_last_name AS C_LAST_NAME, c_first_name AS C_FIRST_NAME, s_store_name AS S_STORE_NAME, CASE WHEN $f4 = 0 THEN NULL ELSE PAID END AS PAID FROM (SELECT t1.s_store_name, t1.c_first_name, t1.c_last_name, COALESCE(SUM(t1.NETPAID), 0) AS PAID, COUNT(t1.NETPAID) AS $f4 FROM (SELECT t.s_store_name, t.s_state, t0.i_current_price, t0.i_size, t0.i_color, t0.i_units, t0.i_manager_id, customer.c_first_name, customer.c_last_name, customer_address.ca_state, SUM(store_sales.ss_ext_sales_price) AS NETPAID FROM store_sales INNER JOIN store_returns ON store_sales.ss_ticket_number = store_returns.sr_ticket_number AND store_sales.ss_item_sk = store_returns.sr_item_sk INNER JOIN (SELECT * FROM store WHERE s_market_id = 6) AS t ON store_sales.ss_store_sk = t.s_store_sk INNER JOIN (SELECT * FROM item WHERE i_color = 'magenta') AS t0 ON store_sales.ss_item_sk = t0.i_item_sk INNER JOIN (customer INNER JOIN customer_address ON customer.c_current_addr_sk = customer_address.ca_address_sk AND customer.c_birth_country <> UPPER(customer_address.ca_country)) ON store_sales.ss_customer_sk = customer.c_customer_sk AND t.s_zip = customer_address.ca_zip GROUP BY t.s_store_name, t.s_state, t0.i_current_price, t0.i_size, t0.i_color, t0.i_units, t0.i_manager_id, customer.c_first_name, customer.c_last_name, customer_address.ca_state) AS t1 GROUP BY t1.s_store_name, t1.c_first_name, t1.c_last_name HAVING CASE WHEN COUNT(t1.NETPAID) = 0 THEN FALSE ELSE COALESCE(SUM(t1.NETPAID), 0) > (((SELECT 0.05 * AVG(t6.NETPAID) FROM (SELECT SUM(store_sales0.ss_ext_sales_price) AS NETPAID FROM store_sales AS store_sales0, store_returns AS store_returns0, store AS store0, item AS item0, customer AS customer0, customer_address AS customer_address0 WHERE store_sales0.ss_ticket_number = store_returns0.sr_ticket_number AND store_sales0.ss_item_sk = store_returns0.sr_item_sk AND (store_sales0.ss_customer_sk = customer0.c_customer_sk AND store_sales0.ss_item_sk = item0.i_item_sk) AND (store_sales0.ss_store_sk = store0.s_store_sk AND customer0.c_current_addr_sk = customer_address0.ca_address_sk AND (customer0.c_birth_country <> UPPER(customer_address0.ca_country) AND (store0.s_zip = customer_address0.ca_zip AND store0.s_market_id = 6))) GROUP BY customer0.c_last_name, customer0.c_first_name, store0.s_store_name, customer_address0.ca_state, store0.s_state, item0.i_color, item0.i_current_price, item0.i_manager_id, item0.i_units, item0.i_size) AS t6))) END ORDER BY t1.c_last_name IS NULL, t1.c_last_name, t1.c_first_name IS NULL, t1.c_first_name, t1.s_store_name IS NULL, t1.s_store_name) AS t10
with ssales as (select c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size ,sum(ss_ext_sales_price) netpaid from store_sales ,store_returns ,store ,item ,customer ,customer_address where ss_ticket_number = sr_ticket_number and ss_item_sk = sr_item_sk and ss_customer_sk = c_customer_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and c_current_addr_sk = ca_address_sk and c_birth_country <> upper(ca_country) and s_zip = ca_zip and s_market_id = 6 group by c_last_name ,c_first_name ,s_store_name ,ca_state ,s_state ,i_color ,i_current_price ,i_manager_id ,i_units ,i_size) select c_last_name ,c_first_name ,s_store_name ,sum(netpaid) paid from ssales where i_color = 'cyan' group by c_last_name ,c_first_name ,s_store_name having sum(netpaid) > (select 0.05*avg(netpaid) from ssales) order by c_last_name ,c_first_name ,s_store_name
SELECT c_last_name AS C_LAST_NAME, c_first_name AS C_FIRST_NAME, s_store_name AS S_STORE_NAME, CASE WHEN $f4 = 0 THEN NULL ELSE PAID END AS PAID FROM (SELECT t1.s_store_name, t1.c_first_name, t1.c_last_name, COALESCE(SUM(t1.NETPAID), 0) AS PAID, COUNT(t1.NETPAID) AS $f4 FROM (SELECT t.s_store_name, t.s_state, t0.i_current_price, t0.i_size, t0.i_color, t0.i_units, t0.i_manager_id, customer.c_first_name, customer.c_last_name, customer_address.ca_state, SUM(store_sales.ss_ext_sales_price) AS NETPAID FROM store_sales INNER JOIN store_returns ON store_sales.ss_ticket_number = store_returns.sr_ticket_number AND store_sales.ss_item_sk = store_returns.sr_item_sk INNER JOIN (SELECT * FROM store WHERE s_market_id = 6) AS t ON store_sales.ss_store_sk = t.s_store_sk INNER JOIN (SELECT * FROM item WHERE i_color = 'cyan') AS t0 ON store_sales.ss_item_sk = t0.i_item_sk INNER JOIN (customer INNER JOIN customer_address ON customer.c_current_addr_sk = customer_address.ca_address_sk AND customer.c_birth_country <> UPPER(customer_address.ca_country)) ON store_sales.ss_customer_sk = customer.c_customer_sk AND t.s_zip = customer_address.ca_zip GROUP BY t.s_store_name, t.s_state, t0.i_current_price, t0.i_size, t0.i_color, t0.i_units, t0.i_manager_id, customer.c_first_name, customer.c_last_name, customer_address.ca_state) AS t1 GROUP BY t1.s_store_name, t1.c_first_name, t1.c_last_name HAVING CASE WHEN COUNT(t1.NETPAID) = 0 THEN FALSE ELSE COALESCE(SUM(t1.NETPAID), 0) > (((SELECT 0.05 * AVG(t6.NETPAID) FROM (SELECT SUM(store_sales0.ss_ext_sales_price) AS NETPAID FROM store_sales AS store_sales0, store_returns AS store_returns0, store AS store0, item AS item0, customer AS customer0, customer_address AS customer_address0 WHERE store_sales0.ss_ticket_number = store_returns0.sr_ticket_number AND store_sales0.ss_item_sk = store_returns0.sr_item_sk AND (store_sales0.ss_customer_sk = customer0.c_customer_sk AND store_sales0.ss_item_sk = item0.i_item_sk) AND (store_sales0.ss_store_sk = store0.s_store_sk AND customer0.c_current_addr_sk = customer_address0.ca_address_sk AND (customer0.c_birth_country <> UPPER(customer_address0.ca_country) AND (store0.s_zip = customer_address0.ca_zip AND store0.s_market_id = 6))) GROUP BY customer0.c_last_name, customer0.c_first_name, store0.s_store_name, customer_address0.ca_state, store0.s_state, item0.i_color, item0.i_current_price, item0.i_manager_id, item0.i_units, item0.i_size) AS t6))) END ORDER BY t1.c_last_name IS NULL, t1.c_last_name, t1.c_first_name IS NULL, t1.c_first_name, t1.s_store_name IS NULL, t1.s_store_name) AS t10
WITH web_tv as ( select ws_item_sk item_sk, d_date, sum(ws_sales_price) sumws, row_number() over (partition by ws_item_sk order by d_date) rk from web_sales ,date_dim where ws_sold_date_sk=d_date_sk and d_month_seq between 1212 and 1212+11 and ws_item_sk is not NULL group by ws_item_sk, d_date ), web_v1 as ( select v1.item_sk, v1.d_date, v1.sumws, sum(v2.sumws) cume_sales from web_tv v1, web_tv v2 where v1.item_sk = v2.item_sk and v1.rk >= v2.rk group by v1.item_sk, v1.d_date, v1.sumws ), store_tv as ( select ss_item_sk item_sk, d_date, sum(ss_sales_price) sumss, row_number() over (partition by ss_item_sk order by d_date) rk from store_sales ,date_dim where ss_sold_date_sk=d_date_sk and d_month_seq between 1212 and 1212+11 and ss_item_sk is not NULL group by ss_item_sk, d_date ), store_v1 as ( select v1.item_sk, v1.d_date, v1.sumss, sum(v2.sumss) cume_sales from store_tv v1, store_tv v2 where v1.item_sk = v2.item_sk and v1.rk >= v2.rk group by v1.item_sk, v1.d_date, v1.sumss ), v as ( select item_sk ,d_date ,web_sales ,store_sales ,row_number() over (partition by item_sk order by d_date) rk from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk ,case when web.d_date is not null then web.d_date else store.d_date end d_date ,web.cume_sales web_sales ,store.cume_sales store_sales from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk and web.d_date = store.d_date) ) ) select * from( select v1.item_sk, v1.d_date, v1.web_sales, v1.store_sales, max(v2.web_sales) web_cumulative, max(v2.store_sales) store_cumulative from v v1, v v2 where v1.item_sk = v2.item_sk and v1.rk >= v2.rk group by v1.item_sk, v1.d_date, v1.web_sales, v1.store_sales )x where web_cumulative > store_cumulative order by item_sk, d_date limit 100
SELECT t13.ITEM_SK, t13.D_DATE, t13.WEB_SALES, t13.STORE_SALES, MAX(t28.WEB_SALES) AS WEB_CUMULATIVE, MAX(t28.STORE_SALES) AS STORE_CUMULATIVE FROM (SELECT CASE WHEN t5.ITEM_SK IS NOT NULL THEN t5.ITEM_SK ELSE t12.ITEM_SK END AS ITEM_SK, CASE WHEN t5.D_DATE IS NOT NULL THEN t5.D_DATE ELSE t12.D_DATE END AS D_DATE, t5.CUME_SALES AS WEB_SALES, t12.CUME_SALES AS STORE_SALES, ROW_NUMBER() OVER (PARTITION BY CASE WHEN t5.ITEM_SK IS NOT NULL THEN t5.ITEM_SK ELSE t12.ITEM_SK END ORDER BY CASE WHEN t5.D_DATE IS NOT NULL THEN t5.D_DATE ELSE t12.D_DATE END) AS RK FROM (SELECT t1.ITEM_SK, t1.D_DATE, t1.SUMWS, SUM(t4.SUMWS) AS CUME_SALES FROM (SELECT web_sales.ws_item_sk AS ITEM_SK, t.d_date AS D_DATE, SUM(web_sales.ws_sales_price) AS SUMWS, ROW_NUMBER() OVER (PARTITION BY web_sales.ws_item_sk ORDER BY t.d_date) AS RK FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t ON web_sales.ws_sold_date_sk = t.d_date_sk GROUP BY web_sales.ws_item_sk, t.d_date) AS t1 INNER JOIN (SELECT web_sales0.ws_item_sk AS ITEM_SK, t2.d_date AS D_DATE, SUM(web_sales0.ws_sales_price) AS SUMWS, ROW_NUMBER() OVER (PARTITION BY web_sales0.ws_item_sk ORDER BY t2.d_date) AS RK FROM web_sales AS web_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t2 ON web_sales0.ws_sold_date_sk = t2.d_date_sk GROUP BY web_sales0.ws_item_sk, t2.d_date) AS t4 ON t1.ITEM_SK = t4.ITEM_SK AND t1.RK >= t4.RK GROUP BY t1.ITEM_SK, t1.D_DATE, t1.SUMWS) AS t5 FULL JOIN (SELECT t8.ITEM_SK, t8.D_DATE, t8.SUMSS, SUM(t11.SUMSS) AS CUME_SALES FROM (SELECT store_sales.ss_item_sk AS ITEM_SK, t6.d_date AS D_DATE, SUM(store_sales.ss_sales_price) AS SUMSS, ROW_NUMBER() OVER (PARTITION BY store_sales.ss_item_sk ORDER BY t6.d_date) AS RK FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t6 ON store_sales.ss_sold_date_sk = t6.d_date_sk GROUP BY store_sales.ss_item_sk, t6.d_date) AS t8 INNER JOIN (SELECT store_sales0.ss_item_sk AS ITEM_SK, t9.d_date AS D_DATE, SUM(store_sales0.ss_sales_price) AS SUMSS, ROW_NUMBER() OVER (PARTITION BY store_sales0.ss_item_sk ORDER BY t9.d_date) AS RK FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t9 ON store_sales0.ss_sold_date_sk = t9.d_date_sk GROUP BY store_sales0.ss_item_sk, t9.d_date) AS t11 ON t8.ITEM_SK = t11.ITEM_SK AND t8.RK >= t11.RK GROUP BY t8.ITEM_SK, t8.D_DATE, t8.SUMSS) AS t12 ON t5.ITEM_SK = t12.ITEM_SK AND t5.D_DATE = t12.D_DATE) AS t13 INNER JOIN (SELECT CASE WHEN t20.ITEM_SK IS NOT NULL THEN t20.ITEM_SK ELSE t27.ITEM_SK END AS ITEM_SK, CASE WHEN t20.D_DATE IS NOT NULL THEN t20.D_DATE ELSE t27.D_DATE END AS D_DATE, t20.CUME_SALES AS WEB_SALES, t27.CUME_SALES AS STORE_SALES, ROW_NUMBER() OVER (PARTITION BY CASE WHEN t20.ITEM_SK IS NOT NULL THEN t20.ITEM_SK ELSE t27.ITEM_SK END ORDER BY CASE WHEN t20.D_DATE IS NOT NULL THEN t20.D_DATE ELSE t27.D_DATE END) AS RK FROM (SELECT t16.ITEM_SK, t16.D_DATE, t16.SUMWS, SUM(t19.SUMWS) AS CUME_SALES FROM (SELECT web_sales1.ws_item_sk AS ITEM_SK, t14.d_date AS D_DATE, SUM(web_sales1.ws_sales_price) AS SUMWS, ROW_NUMBER() OVER (PARTITION BY web_sales1.ws_item_sk ORDER BY t14.d_date) AS RK FROM web_sales AS web_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t14 ON web_sales1.ws_sold_date_sk = t14.d_date_sk GROUP BY web_sales1.ws_item_sk, t14.d_date) AS t16 INNER JOIN (SELECT web_sales2.ws_item_sk AS ITEM_SK, t17.d_date AS D_DATE, SUM(web_sales2.ws_sales_price) AS SUMWS, ROW_NUMBER() OVER (PARTITION BY web_sales2.ws_item_sk ORDER BY t17.d_date) AS RK FROM web_sales AS web_sales2 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t17 ON web_sales2.ws_sold_date_sk = t17.d_date_sk GROUP BY web_sales2.ws_item_sk, t17.d_date) AS t19 ON t16.ITEM_SK = t19.ITEM_SK AND t16.RK >= t19.RK GROUP BY t16.ITEM_SK, t16.D_DATE, t16.SUMWS) AS t20 FULL JOIN (SELECT t23.ITEM_SK, t23.D_DATE, t23.SUMSS, SUM(t26.SUMSS) AS CUME_SALES FROM (SELECT store_sales1.ss_item_sk AS ITEM_SK, t21.d_date AS D_DATE, SUM(store_sales1.ss_sales_price) AS SUMSS, ROW_NUMBER() OVER (PARTITION BY store_sales1.ss_item_sk ORDER BY t21.d_date) AS RK FROM store_sales AS store_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t21 ON store_sales1.ss_sold_date_sk = t21.d_date_sk GROUP BY store_sales1.ss_item_sk, t21.d_date) AS t23 INNER JOIN (SELECT store_sales2.ss_item_sk AS ITEM_SK, t24.d_date AS D_DATE, SUM(store_sales2.ss_sales_price) AS SUMSS, ROW_NUMBER() OVER (PARTITION BY store_sales2.ss_item_sk ORDER BY t24.d_date) AS RK FROM store_sales AS store_sales2 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1212 AND d_month_seq <= 1212 + 11) AS t24 ON store_sales2.ss_sold_date_sk = t24.d_date_sk GROUP BY store_sales2.ss_item_sk, t24.d_date) AS t26 ON t23.ITEM_SK = t26.ITEM_SK AND t23.RK >= t26.RK GROUP BY t23.ITEM_SK, t23.D_DATE, t23.SUMSS) AS t27 ON t20.ITEM_SK = t27.ITEM_SK AND t20.D_DATE = t27.D_DATE) AS t28 ON t13.ITEM_SK = t28.ITEM_SK AND t13.RK >= t28.RK GROUP BY t13.ITEM_SK, t13.D_DATE, t13.WEB_SALES, t13.STORE_SALES HAVING MAX(t28.WEB_SALES) > MAX(t28.STORE_SALES) ORDER BY t13.ITEM_SK, t13.D_DATE FETCH NEXT 100 ROWS ONLY
select channel, item, return_ratio, return_rank, currency_rank from (select 'web' as channel ,web.item ,web.return_ratio ,web.return_rank ,web.currency_rank from ( select item ,return_ratio ,currency_ratio ,rank() over (order by return_ratio) as return_rank ,rank() over (order by currency_ratio) as currency_rank from ( select ws.ws_item_sk as item ,(cast(sum(coalesce(wr.wr_return_quantity,0)) as decimal(15,4))/ cast(sum(coalesce(ws.ws_quantity,0)) as decimal(15,4) )) as return_ratio ,(cast(sum(coalesce(wr.wr_return_amt,0)) as decimal(15,4))/ cast(sum(coalesce(ws.ws_net_paid,0)) as decimal(15,4) )) as currency_ratio from web_sales ws left outer join web_returns wr on (ws.ws_order_number = wr.wr_order_number and ws.ws_item_sk = wr.wr_item_sk) ,date_dim where wr.wr_return_amt > 10000 and ws.ws_net_profit > 1 and ws.ws_net_paid > 0 and ws.ws_quantity > 0 and ws_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 11 group by ws.ws_item_sk ) in_web ) web where ( web.return_rank <= 10 or web.currency_rank <= 10 ) union select 'catalog' as channel ,catalog.item ,catalog.return_ratio ,catalog.return_rank ,catalog.currency_rank from ( select item ,return_ratio ,currency_ratio ,rank() over (order by return_ratio) as return_rank ,rank() over (order by currency_ratio) as currency_rank from ( select cs.cs_item_sk as item ,(cast(sum(coalesce(cr.cr_return_quantity,0)) as decimal(15,4))/ cast(sum(coalesce(cs.cs_quantity,0)) as decimal(15,4) )) as return_ratio ,(cast(sum(coalesce(cr.cr_return_amount,0)) as decimal(15,4))/ cast(sum(coalesce(cs.cs_net_paid,0)) as decimal(15,4) )) as currency_ratio from catalog_sales cs left outer join catalog_returns cr on (cs.cs_order_number = cr.cr_order_number and cs.cs_item_sk = cr.cr_item_sk) ,date_dim where cr.cr_return_amount > 10000 and cs.cs_net_profit > 1 and cs.cs_net_paid > 0 and cs.cs_quantity > 0 and cs_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 11 group by cs.cs_item_sk ) in_cat ) catalog where ( catalog.return_rank <= 10 or catalog.currency_rank <=10 ) union select 'store' as channel ,store.item ,store.return_ratio ,store.return_rank ,store.currency_rank from ( select item ,return_ratio ,currency_ratio ,rank() over (order by return_ratio) as return_rank ,rank() over (order by currency_ratio) as currency_rank from ( select sts.ss_item_sk as item ,(cast(sum(coalesce(sr.sr_return_quantity,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as decimal(15,4) )) as return_ratio ,(cast(sum(coalesce(sr.sr_return_amt,0)) as decimal(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as decimal(15,4) )) as currency_ratio from store_sales sts left outer join store_returns sr on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk) ,date_dim where sr.sr_return_amt > 10000 and sts.ss_net_profit > 1 and sts.ss_net_paid > 0 and sts.ss_quantity > 0 and ss_sold_date_sk = d_date_sk and d_year = 2002 and d_moy = 11 group by sts.ss_item_sk ) in_store ) store where ( store.return_rank <= 10 or store.currency_rank <= 10 ) ) order by 1,4,5,2 limit 100
SELECT * FROM (SELECT 'web' AS CHANNEL, ITEM, RETURN_RATIO, RETURN_RANK, CURRENCY_RANK FROM (SELECT t4.ITEM, CAST(t4.$f1 AS DECIMAL(15, 4)) / CAST(t4.$f2 AS DECIMAL(15, 4)) AS RETURN_RATIO, CAST(t4.$f3 AS DECIMAL(15, 4)) / CAST(t4.$f4 AS DECIMAL(15, 4)) AS CURRENCY_RATIO, RANK() OVER (ORDER BY CAST(t4.$f1 AS DECIMAL(15, 4)) / CAST(t4.$f2 AS DECIMAL(15, 4))) AS RETURN_RANK, RANK() OVER (ORDER BY CAST(t4.$f3 AS DECIMAL(15, 4)) / CAST(t4.$f4 AS DECIMAL(15, 4))) AS CURRENCY_RANK FROM (SELECT t1.ws_item_sk AS ITEM, COALESCE(SUM(CASE WHEN t1.wr_return_quantity IS NOT NULL THEN CAST(t1.wr_return_quantity AS INTEGER) ELSE 0 END), 0) AS $f1, COALESCE(SUM(CASE WHEN t1.ws_quantity IS NOT NULL THEN CAST(t1.ws_quantity AS INTEGER) ELSE 0 END), 0) AS $f2, COALESCE(SUM(CASE WHEN t1.wr_return_amt IS NOT NULL THEN CAST(t1.wr_return_amt AS DECIMAL(19, 0)) ELSE 0 END), 0) AS $f3, COALESCE(SUM(CASE WHEN t1.ws_net_paid IS NOT NULL THEN CAST(t1.ws_net_paid AS DECIMAL(19, 0)) ELSE 0 END), 0) AS $f4 FROM (SELECT t.ws_sold_date_sk, t.ws_sold_time_sk, t.ws_ship_date_sk, t.ws_item_sk, t.ws_bill_customer_sk, t.ws_bill_cdemo_sk, t.ws_bill_hdemo_sk, t.ws_bill_addr_sk, t.ws_ship_customer_sk, t.ws_ship_cdemo_sk, t.ws_ship_hdemo_sk, t.ws_ship_addr_sk, t.ws_web_page_sk, t.ws_web_site_sk, t.ws_ship_mode_sk, t.ws_warehouse_sk, t.ws_promo_sk, t.ws_order_number, t.ws_quantity, t.ws_wholesale_cost, t.ws_list_price, t.ws_sales_price, t.ws_ext_discount_amt, t.ws_ext_sales_price, t.ws_ext_wholesale_cost, t.ws_ext_list_price, t.ws_ext_tax, t.ws_coupon_amt, t.ws_ext_ship_cost, t.ws_net_paid, t.ws_net_paid_inc_tax, t.ws_net_paid_inc_ship, t.ws_net_paid_inc_ship_tax, t.ws_net_profit, t0.wr_returned_date_sk, t0.wr_returned_time_sk, CAST(t0.wr_item_sk AS INTEGER) AS wr_item_sk, t0.wr_refunded_customer_sk, t0.wr_refunded_cdemo_sk, t0.wr_refunded_hdemo_sk, t0.wr_refunded_addr_sk, t0.wr_returning_customer_sk, t0.wr_returning_cdemo_sk, t0.wr_returning_hdemo_sk, t0.wr_returning_addr_sk, t0.wr_web_page_sk, t0.wr_reason_sk, CAST(t0.wr_order_number AS INTEGER) AS wr_order_number, t0.wr_return_quantity, t0.wr_return_amt, t0.wr_return_tax, t0.wr_return_amt_inc_tax, t0.wr_fee, t0.wr_return_ship_cost, t0.wr_refunded_cash, t0.wr_reversed_charge, t0.wr_account_credit, t0.wr_net_loss FROM (SELECT * FROM web_sales WHERE ws_net_profit > 1 AND ws_net_paid > 0 AND ws_quantity > 0) AS t INNER JOIN (SELECT * FROM web_returns WHERE wr_return_amt > 10000) AS t0 ON t.ws_order_number = t0.wr_order_number AND t.ws_item_sk = t0.wr_item_sk) AS t1 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 11) AS t2 ON t1.ws_sold_date_sk = t2.d_date_sk GROUP BY t1.ws_item_sk) AS t4) AS t5 WHERE RETURN_RANK <= 10 OR CURRENCY_RANK <= 10 UNION SELECT 'catalog' AS CHANNEL, ITEM, RETURN_RATIO, RETURN_RANK, CURRENCY_RANK FROM (SELECT t13.ITEM, CAST(t13.$f1 AS DECIMAL(15, 4)) / CAST(t13.$f2 AS DECIMAL(15, 4)) AS RETURN_RATIO, CAST(t13.$f3 AS DECIMAL(15, 4)) / CAST(t13.$f4 AS DECIMAL(15, 4)) AS CURRENCY_RATIO, RANK() OVER (ORDER BY CAST(t13.$f1 AS DECIMAL(15, 4)) / CAST(t13.$f2 AS DECIMAL(15, 4))) AS RETURN_RANK, RANK() OVER (ORDER BY CAST(t13.$f3 AS DECIMAL(15, 4)) / CAST(t13.$f4 AS DECIMAL(15, 4))) AS CURRENCY_RANK FROM (SELECT t10.cs_item_sk AS ITEM, COALESCE(SUM(CASE WHEN t10.cr_return_quantity IS NOT NULL THEN CAST(t10.cr_return_quantity AS INTEGER) ELSE 0 END), 0) AS $f1, COALESCE(SUM(CASE WHEN t10.cs_quantity IS NOT NULL THEN CAST(t10.cs_quantity AS INTEGER) ELSE 0 END), 0) AS $f2, COALESCE(SUM(CASE WHEN t10.cr_return_amount IS NOT NULL THEN CAST(t10.cr_return_amount AS DECIMAL(19, 0)) ELSE 0 END), 0) AS $f3, COALESCE(SUM(CASE WHEN t10.cs_net_paid IS NOT NULL THEN CAST(t10.cs_net_paid AS DECIMAL(19, 0)) ELSE 0 END), 0) AS $f4 FROM (SELECT t8.cs_sold_date_sk, t8.cs_sold_time_sk, t8.cs_ship_date_sk, t8.cs_bill_customer_sk, t8.cs_bill_cdemo_sk, t8.cs_bill_hdemo_sk, t8.cs_bill_addr_sk, t8.cs_ship_customer_sk, t8.cs_ship_cdemo_sk, t8.cs_ship_hdemo_sk, t8.cs_ship_addr_sk, t8.cs_call_center_sk, t8.cs_catalog_page_sk, t8.cs_ship_mode_sk, t8.cs_warehouse_sk, t8.cs_item_sk, t8.cs_promo_sk, t8.cs_order_number, t8.cs_quantity, t8.cs_wholesale_cost, t8.cs_list_price, t8.cs_sales_price, t8.cs_ext_discount_amt, t8.cs_ext_sales_price, t8.cs_ext_wholesale_cost, t8.cs_ext_list_price, t8.cs_ext_tax, t8.cs_coupon_amt, t8.cs_ext_ship_cost, t8.cs_net_paid, t8.cs_net_paid_inc_tax, t8.cs_net_paid_inc_ship, t8.cs_net_paid_inc_ship_tax, t8.cs_net_profit, t9.cr_returned_date_sk, t9.cr_returned_time_sk, CAST(t9.cr_item_sk AS INTEGER) AS cr_item_sk, t9.cr_refunded_customer_sk, t9.cr_refunded_cdemo_sk, t9.cr_refunded_hdemo_sk, t9.cr_refunded_addr_sk, t9.cr_returning_customer_sk, t9.cr_returning_cdemo_sk, t9.cr_returning_hdemo_sk, t9.cr_returning_addr_sk, t9.cr_call_center_sk, t9.cr_catalog_page_sk, t9.cr_ship_mode_sk, t9.cr_warehouse_sk, t9.cr_reason_sk, CAST(t9.cr_order_number AS INTEGER) AS cr_order_number, t9.cr_return_quantity, t9.cr_return_amount, t9.cr_return_tax, t9.cr_return_amt_inc_tax, t9.cr_fee, t9.cr_return_ship_cost, t9.cr_refunded_cash, t9.cr_reversed_charge, t9.cr_store_credit, t9.cr_net_loss FROM (SELECT * FROM catalog_sales WHERE cs_net_profit > 1 AND cs_net_paid > 0 AND cs_quantity > 0) AS t8 INNER JOIN (SELECT * FROM catalog_returns WHERE cr_return_amount > 10000) AS t9 ON t8.cs_order_number = t9.cr_order_number AND t8.cs_item_sk = t9.cr_item_sk) AS t10 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 11) AS t11 ON t10.cs_sold_date_sk = t11.d_date_sk GROUP BY t10.cs_item_sk) AS t13) AS t14 WHERE RETURN_RANK <= 10 OR CURRENCY_RANK <= 10 UNION SELECT 'store' AS CHANNEL, ITEM, RETURN_RATIO, RETURN_RANK, CURRENCY_RANK FROM (SELECT t22.ITEM, CAST(t22.$f1 AS DECIMAL(15, 4)) / CAST(t22.$f2 AS DECIMAL(15, 4)) AS RETURN_RATIO, CAST(t22.$f3 AS DECIMAL(15, 4)) / CAST(t22.$f4 AS DECIMAL(15, 4)) AS CURRENCY_RATIO, RANK() OVER (ORDER BY CAST(t22.$f1 AS DECIMAL(15, 4)) / CAST(t22.$f2 AS DECIMAL(15, 4))) AS RETURN_RANK, RANK() OVER (ORDER BY CAST(t22.$f3 AS DECIMAL(15, 4)) / CAST(t22.$f4 AS DECIMAL(15, 4))) AS CURRENCY_RANK FROM (SELECT t19.ss_item_sk AS ITEM, COALESCE(SUM(CASE WHEN t19.sr_return_quantity IS NOT NULL THEN CAST(t19.sr_return_quantity AS INTEGER) ELSE 0 END), 0) AS $f1, COALESCE(SUM(CASE WHEN t19.ss_quantity IS NOT NULL THEN CAST(t19.ss_quantity AS INTEGER) ELSE 0 END), 0) AS $f2, COALESCE(SUM(CASE WHEN t19.sr_return_amt IS NOT NULL THEN CAST(t19.sr_return_amt AS DECIMAL(19, 0)) ELSE 0 END), 0) AS $f3, COALESCE(SUM(CASE WHEN t19.ss_net_paid IS NOT NULL THEN CAST(t19.ss_net_paid AS DECIMAL(19, 0)) ELSE 0 END), 0) AS $f4 FROM (SELECT t17.ss_sold_date_sk, t17.ss_sold_time_sk, t17.ss_item_sk, t17.ss_customer_sk, t17.ss_cdemo_sk, t17.ss_hdemo_sk, t17.ss_addr_sk, t17.ss_store_sk, t17.ss_promo_sk, t17.ss_ticket_number, t17.ss_quantity, t17.ss_wholesale_cost, t17.ss_list_price, t17.ss_sales_price, t17.ss_ext_discount_amt, t17.ss_ext_sales_price, t17.ss_ext_wholesale_cost, t17.ss_ext_list_price, t17.ss_ext_tax, t17.ss_coupon_amt, t17.ss_net_paid, t17.ss_net_paid_inc_tax, t17.ss_net_profit, t18.sr_returned_date_sk, t18.sr_return_time_sk, CAST(t18.sr_item_sk AS INTEGER) AS sr_item_sk, t18.sr_customer_sk, t18.sr_cdemo_sk, t18.sr_hdemo_sk, t18.sr_addr_sk, t18.sr_store_sk, t18.sr_reason_sk, CAST(t18.sr_ticket_number AS INTEGER) AS sr_ticket_number, t18.sr_return_quantity, t18.sr_return_amt, t18.sr_return_tax, t18.sr_return_amt_inc_tax, t18.sr_fee, t18.sr_return_ship_cost, t18.sr_refunded_cash, t18.sr_reversed_charge, t18.sr_store_credit, t18.sr_net_loss FROM (SELECT * FROM store_sales WHERE ss_net_profit > 1 AND ss_net_paid > 0 AND ss_quantity > 0) AS t17 INNER JOIN (SELECT * FROM store_returns WHERE sr_return_amt > 10000) AS t18 ON t17.ss_ticket_number = t18.sr_ticket_number AND t17.ss_item_sk = t18.sr_item_sk) AS t19 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002 AND d_moy = 11) AS t20 ON t19.ss_sold_date_sk = t20.d_date_sk GROUP BY t19.ss_item_sk) AS t22) AS t23 WHERE RETURN_RANK <= 10 OR CURRENCY_RANK <= 10) ORDER BY CHANNEL, RETURN_RANK, CURRENCY_RANK, ITEM FETCH NEXT 100 ROWS ONLY
select count(*) from ((select distinct c_last_name, c_first_name, d_date from store_sales, date_dim, customer where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_customer_sk = customer.c_customer_sk and d_month_seq between 1221 and 1221+11) except (select distinct c_last_name, c_first_name, d_date from catalog_sales, date_dim, customer where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk and d_month_seq between 1221 and 1221+11) except (select distinct c_last_name, c_first_name, d_date from web_sales, date_dim, customer where web_sales.ws_sold_date_sk = date_dim.d_date_sk and web_sales.ws_bill_customer_sk = customer.c_customer_sk and d_month_seq between 1221 and 1221+11) ) cool_cust
SELECT COUNT(*) FROM (SELECT customer.c_last_name, customer.c_first_name, t.d_date FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1221 AND d_month_seq <= 1221 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN customer ON store_sales.ss_customer_sk = customer.c_customer_sk GROUP BY t.d_date, customer.c_first_name, customer.c_last_name EXCEPT SELECT customer0.c_last_name, customer0.c_first_name, t2.d_date FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1221 AND d_month_seq <= 1221 + 11) AS t2 ON catalog_sales.cs_sold_date_sk = t2.d_date_sk INNER JOIN customer AS customer0 ON catalog_sales.cs_bill_customer_sk = customer0.c_customer_sk GROUP BY t2.d_date, customer0.c_first_name, customer0.c_last_name EXCEPT SELECT customer1.c_last_name, customer1.c_first_name, t5.d_date FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1221 AND d_month_seq <= 1221 + 11) AS t5 ON web_sales.ws_sold_date_sk = t5.d_date_sk INNER JOIN customer AS customer1 ON web_sales.ws_bill_customer_sk = customer1.c_customer_sk GROUP BY t5.d_date, customer1.c_first_name, customer1.c_last_name) AS t8
with year_total as ( select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,c_preferred_cust_flag customer_preferred_cust_flag ,c_birth_country customer_birth_country ,c_login customer_login ,c_email_address customer_email_address ,d_year dyear ,sum(ss_ext_list_price-ss_ext_discount_amt) year_total ,'s' sale_type from customer ,store_sales ,date_dim where c_customer_sk = ss_customer_sk and ss_sold_date_sk = d_date_sk group by c_customer_id ,c_first_name ,c_last_name ,c_preferred_cust_flag ,c_birth_country ,c_login ,c_email_address ,d_year union all select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,c_preferred_cust_flag customer_preferred_cust_flag ,c_birth_country customer_birth_country ,c_login customer_login ,c_email_address customer_email_address ,d_year dyear ,sum(ws_ext_list_price-ws_ext_discount_amt) year_total ,'w' sale_type from customer ,web_sales ,date_dim where c_customer_sk = ws_bill_customer_sk and ws_sold_date_sk = d_date_sk group by c_customer_id ,c_first_name ,c_last_name ,c_preferred_cust_flag ,c_birth_country ,c_login ,c_email_address ,d_year ) select t_s_secyear.customer_id ,t_s_secyear.customer_first_name ,t_s_secyear.customer_last_name ,t_s_secyear.customer_login from year_total t_s_firstyear ,year_total t_s_secyear ,year_total t_w_firstyear ,year_total t_w_secyear where t_s_secyear.customer_id = t_s_firstyear.customer_id and t_s_firstyear.customer_id = t_w_secyear.customer_id and t_s_firstyear.customer_id = t_w_firstyear.customer_id and t_s_firstyear.sale_type = 's' and t_w_firstyear.sale_type = 'w' and t_s_secyear.sale_type = 's' and t_w_secyear.sale_type = 'w' and t_s_firstyear.dyear = 2001 and t_s_secyear.dyear = 2001+1 and t_w_firstyear.dyear = 2001 and t_w_secyear.dyear = 2001+1 and t_s_firstyear.year_total > 0 and t_w_firstyear.year_total > 0 and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else 0.0 end > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else 0.0 end order by t_s_secyear.customer_id ,t_s_secyear.customer_first_name ,t_s_secyear.customer_last_name ,t_s_secyear.customer_login limit 100
SELECT t14.CUSTOMER_ID, t14.CUSTOMER_FIRST_NAME, t14.CUSTOMER_LAST_NAME, t14.CUSTOMER_LOGIN FROM (SELECT * FROM (SELECT customer.c_customer_id AS CUSTOMER_ID, customer.c_first_name AS CUSTOMER_FIRST_NAME, customer.c_last_name AS CUSTOMER_LAST_NAME, customer.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer.c_login AS CUSTOMER_LOGIN, customer.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim.d_year AS DYEAR, SUM(store_sales.ss_ext_list_price - store_sales.ss_ext_discount_amt) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer INNER JOIN store_sales ON customer.c_customer_sk = store_sales.ss_customer_sk INNER JOIN date_dim ON store_sales.ss_sold_date_sk = date_dim.d_date_sk GROUP BY customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year UNION ALL SELECT customer0.c_customer_id AS CUSTOMER_ID, customer0.c_first_name AS CUSTOMER_FIRST_NAME, customer0.c_last_name AS CUSTOMER_LAST_NAME, customer0.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer0.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer0.c_login AS CUSTOMER_LOGIN, customer0.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim0.d_year AS DYEAR, SUM(web_sales.ws_ext_list_price - web_sales.ws_ext_discount_amt) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer0 INNER JOIN web_sales ON customer0.c_customer_sk = web_sales.ws_bill_customer_sk INNER JOIN date_dim AS date_dim0 ON web_sales.ws_sold_date_sk = date_dim0.d_date_sk GROUP BY customer0.c_customer_id, customer0.c_first_name, customer0.c_last_name, customer0.c_preferred_cust_flag, customer0.c_birth_country, customer0.c_login, customer0.c_email_address, date_dim0.d_year) AS t5 WHERE SALE_TYPE = 's' AND DYEAR = 2001 AND YEAR_TOTAL > 0) AS t6 INNER JOIN (SELECT * FROM (SELECT customer1.c_customer_id AS CUSTOMER_ID, customer1.c_first_name AS CUSTOMER_FIRST_NAME, customer1.c_last_name AS CUSTOMER_LAST_NAME, customer1.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer1.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer1.c_login AS CUSTOMER_LOGIN, customer1.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim1.d_year AS DYEAR, SUM(store_sales0.ss_ext_list_price - store_sales0.ss_ext_discount_amt) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer1 INNER JOIN store_sales AS store_sales0 ON customer1.c_customer_sk = store_sales0.ss_customer_sk INNER JOIN date_dim AS date_dim1 ON store_sales0.ss_sold_date_sk = date_dim1.d_date_sk GROUP BY customer1.c_customer_id, customer1.c_first_name, customer1.c_last_name, customer1.c_preferred_cust_flag, customer1.c_birth_country, customer1.c_login, customer1.c_email_address, date_dim1.d_year UNION ALL SELECT customer2.c_customer_id AS CUSTOMER_ID, customer2.c_first_name AS CUSTOMER_FIRST_NAME, customer2.c_last_name AS CUSTOMER_LAST_NAME, customer2.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer2.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer2.c_login AS CUSTOMER_LOGIN, customer2.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim2.d_year AS DYEAR, SUM(web_sales0.ws_ext_list_price - web_sales0.ws_ext_discount_amt) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer2 INNER JOIN web_sales AS web_sales0 ON customer2.c_customer_sk = web_sales0.ws_bill_customer_sk INNER JOIN date_dim AS date_dim2 ON web_sales0.ws_sold_date_sk = date_dim2.d_date_sk GROUP BY customer2.c_customer_id, customer2.c_first_name, customer2.c_last_name, customer2.c_preferred_cust_flag, customer2.c_birth_country, customer2.c_login, customer2.c_email_address, date_dim2.d_year) AS t13 WHERE SALE_TYPE = 's' AND DYEAR = 2001 + 1) AS t14 ON t6.CUSTOMER_ID = t14.CUSTOMER_ID INNER JOIN (SELECT * FROM (SELECT customer3.c_customer_id AS CUSTOMER_ID, customer3.c_first_name AS CUSTOMER_FIRST_NAME, customer3.c_last_name AS CUSTOMER_LAST_NAME, customer3.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer3.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer3.c_login AS CUSTOMER_LOGIN, customer3.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim3.d_year AS DYEAR, SUM(store_sales1.ss_ext_list_price - store_sales1.ss_ext_discount_amt) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer3 INNER JOIN store_sales AS store_sales1 ON customer3.c_customer_sk = store_sales1.ss_customer_sk INNER JOIN date_dim AS date_dim3 ON store_sales1.ss_sold_date_sk = date_dim3.d_date_sk GROUP BY customer3.c_customer_id, customer3.c_first_name, customer3.c_last_name, customer3.c_preferred_cust_flag, customer3.c_birth_country, customer3.c_login, customer3.c_email_address, date_dim3.d_year UNION ALL SELECT customer4.c_customer_id AS CUSTOMER_ID, customer4.c_first_name AS CUSTOMER_FIRST_NAME, customer4.c_last_name AS CUSTOMER_LAST_NAME, customer4.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer4.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer4.c_login AS CUSTOMER_LOGIN, customer4.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim4.d_year AS DYEAR, SUM(web_sales1.ws_ext_list_price - web_sales1.ws_ext_discount_amt) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer4 INNER JOIN web_sales AS web_sales1 ON customer4.c_customer_sk = web_sales1.ws_bill_customer_sk INNER JOIN date_dim AS date_dim4 ON web_sales1.ws_sold_date_sk = date_dim4.d_date_sk GROUP BY customer4.c_customer_id, customer4.c_first_name, customer4.c_last_name, customer4.c_preferred_cust_flag, customer4.c_birth_country, customer4.c_login, customer4.c_email_address, date_dim4.d_year) AS t21 WHERE SALE_TYPE = 'w' AND DYEAR = 2001 AND YEAR_TOTAL > 0) AS t22 ON t6.CUSTOMER_ID = t22.CUSTOMER_ID INNER JOIN (SELECT * FROM (SELECT customer5.c_customer_id AS CUSTOMER_ID, customer5.c_first_name AS CUSTOMER_FIRST_NAME, customer5.c_last_name AS CUSTOMER_LAST_NAME, customer5.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer5.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer5.c_login AS CUSTOMER_LOGIN, customer5.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim5.d_year AS DYEAR, SUM(store_sales2.ss_ext_list_price - store_sales2.ss_ext_discount_amt) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM customer AS customer5 INNER JOIN store_sales AS store_sales2 ON customer5.c_customer_sk = store_sales2.ss_customer_sk INNER JOIN date_dim AS date_dim5 ON store_sales2.ss_sold_date_sk = date_dim5.d_date_sk GROUP BY customer5.c_customer_id, customer5.c_first_name, customer5.c_last_name, customer5.c_preferred_cust_flag, customer5.c_birth_country, customer5.c_login, customer5.c_email_address, date_dim5.d_year UNION ALL SELECT customer6.c_customer_id AS CUSTOMER_ID, customer6.c_first_name AS CUSTOMER_FIRST_NAME, customer6.c_last_name AS CUSTOMER_LAST_NAME, customer6.c_preferred_cust_flag AS CUSTOMER_PREFERRED_CUST_FLAG, customer6.c_birth_country AS CUSTOMER_BIRTH_COUNTRY, customer6.c_login AS CUSTOMER_LOGIN, customer6.c_email_address AS CUSTOMER_EMAIL_ADDRESS, date_dim6.d_year AS DYEAR, SUM(web_sales2.ws_ext_list_price - web_sales2.ws_ext_discount_amt) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM customer AS customer6 INNER JOIN web_sales AS web_sales2 ON customer6.c_customer_sk = web_sales2.ws_bill_customer_sk INNER JOIN date_dim AS date_dim6 ON web_sales2.ws_sold_date_sk = date_dim6.d_date_sk GROUP BY customer6.c_customer_id, customer6.c_first_name, customer6.c_last_name, customer6.c_preferred_cust_flag, customer6.c_birth_country, customer6.c_login, customer6.c_email_address, date_dim6.d_year) AS t29 WHERE SALE_TYPE = 'w' AND DYEAR = 2001 + 1) AS t30 ON t6.CUSTOMER_ID = t30.CUSTOMER_ID AND CASE WHEN t6.YEAR_TOTAL > 0 THEN CASE WHEN t22.YEAR_TOTAL > 0 THEN t30.YEAR_TOTAL / t22.YEAR_TOTAL > t14.YEAR_TOTAL / t6.YEAR_TOTAL ELSE 0.0 > t14.YEAR_TOTAL / t6.YEAR_TOTAL END ELSE CASE WHEN t22.YEAR_TOTAL > 0 THEN t30.YEAR_TOTAL / t22.YEAR_TOTAL > 0.0 ELSE FALSE END END ORDER BY t14.CUSTOMER_ID, t14.CUSTOMER_FIRST_NAME, t14.CUSTOMER_LAST_NAME, t14.CUSTOMER_LOGIN FETCH NEXT 100 ROWS ONLY
with ws_wh as (select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2 from web_sales ws1,web_sales ws2 where ws1.ws_order_number = ws2.ws_order_number and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk) select count(distinct ws_order_number) as order_count ,sum(ws_ext_ship_cost) as total_shipping_cost ,sum(ws_net_profit) as total_net_profit from web_sales ws1 ,date_dim ,customer_address ,web_site where d_date between '2002-2-01' and (cast('2002-2-01' as date) + interval 60 days) and ws1.ws_ship_date_sk = d_date_sk and ws1.ws_ship_addr_sk = ca_address_sk and ca_state = 'WA' and ws1.ws_web_site_sk = web_site_sk and web_company_name = 'pri' and ws1.ws_order_number in (select ws_order_number from ws_wh) and ws1.ws_order_number in (select wr_order_number from web_returns,ws_wh where wr_order_number = ws_wh.ws_order_number) order by count(distinct ws_order_number) limit 100
SELECT COUNT(DISTINCT t5.ws_order_number) AS order_count, SUM(t5.ws_ext_ship_cost) AS total_shipping_cost, SUM(t5.ws_net_profit) AS total_net_profit FROM (SELECT * FROM web_sales WHERE ws_order_number IN (SELECT web_sales0.ws_order_number AS WS_ORDER_NUMBER FROM web_sales AS web_sales0, web_sales AS web_sales1 WHERE web_sales0.ws_order_number = web_sales1.ws_order_number AND web_sales0.ws_warehouse_sk <> web_sales1.ws_warehouse_sk) AND ws_order_number IN (SELECT web_returns.wr_order_number AS WR_ORDER_NUMBER FROM web_returns, (SELECT web_sales2.ws_order_number AS WS_ORDER_NUMBER, web_sales2.ws_warehouse_sk AS WH1, web_sales3.ws_warehouse_sk AS WH2 FROM web_sales AS web_sales2, web_sales AS web_sales3 WHERE web_sales2.ws_order_number = web_sales3.ws_order_number AND web_sales2.ws_warehouse_sk <> web_sales3.ws_warehouse_sk) AS t2 WHERE web_returns.wr_order_number = t2.WS_ORDER_NUMBER)) AS t5 INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2002-02-01' AND d_date <= (DATE '2002-02-01' + 60 * INTERVAL '1' DAY)) AS t6 ON t5.ws_ship_date_sk = t6.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state = 'WA') AS t7 ON t5.ws_ship_addr_sk = t7.ca_address_sk INNER JOIN (SELECT * FROM web_site WHERE web_company_name = 'pri') AS t8 ON t5.ws_web_site_sk = t8.web_site_sk ORDER BY 1 FETCH NEXT 100 ROWS ONLY
select s_store_name, s_store_id, sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales, sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales, sum(case when (d_day_name='Tuesday') then ss_sales_price else null end) tue_sales, sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales, sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales, sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales, sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales from date_dim, store_sales, store where d_date_sk = ss_sold_date_sk and s_store_sk = ss_store_sk and s_gmt_offset = -5 and d_year = 2002 group by s_store_name, s_store_id order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales limit 100
SELECT t0.s_store_name AS S_STORE_NAME, t0.s_store_id AS S_STORE_ID, SUM(CASE WHEN t.d_day_name = 'Sunday' THEN store_sales.ss_sales_price ELSE NULL END) AS SUN_SALES, SUM(CASE WHEN t.d_day_name = 'Monday' THEN store_sales.ss_sales_price ELSE NULL END) AS MON_SALES, SUM(CASE WHEN t.d_day_name = 'Tuesday' THEN store_sales.ss_sales_price ELSE NULL END) AS TUE_SALES, SUM(CASE WHEN t.d_day_name = 'Wednesday' THEN store_sales.ss_sales_price ELSE NULL END) AS WED_SALES, SUM(CASE WHEN t.d_day_name = 'Thursday' THEN store_sales.ss_sales_price ELSE NULL END) AS THU_SALES, SUM(CASE WHEN t.d_day_name = 'Friday' THEN store_sales.ss_sales_price ELSE NULL END) AS FRI_SALES, SUM(CASE WHEN t.d_day_name = 'Saturday' THEN store_sales.ss_sales_price ELSE NULL END) AS SAT_SALES FROM (SELECT * FROM date_dim WHERE d_year = 2002) AS t INNER JOIN store_sales ON t.d_date_sk = store_sales.ss_sold_date_sk INNER JOIN (SELECT * FROM store WHERE s_gmt_offset = -5) AS t0 ON store_sales.ss_store_sk = t0.s_store_sk GROUP BY t0.s_store_name, t0.s_store_id ORDER BY t0.s_store_name, t0.s_store_id, 3, 4, 5, 6, 7, 8, 9 FETCH NEXT 100 ROWS ONLY
select i_item_desc ,w_warehouse_name ,d1.d_week_seq ,sum(case when p_promo_sk is null then 1 else 0 end) no_promo ,sum(case when p_promo_sk is not null then 1 else 0 end) promo ,count(*) total_cnt from catalog_sales join inventory on (cs_item_sk = inv_item_sk) join warehouse on (w_warehouse_sk=inv_warehouse_sk) join item on (i_item_sk = cs_item_sk) join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk) join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk) join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk) join date_dim d2 on (inv_date_sk = d2.d_date_sk) join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk) left outer join promotion on (cs_promo_sk=p_promo_sk) left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number) where d1.d_week_seq = d2.d_week_seq and inv_quantity_on_hand < cs_quantity and d3.d_date > d1.d_date + interval 5 days and hd_buy_potential = '>10000' and d1.d_year = 2000 and cd_marital_status = 'S' group by i_item_desc,w_warehouse_name,d1.d_week_seq order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq limit 100
SELECT item.i_item_desc AS I_ITEM_DESC, warehouse.w_warehouse_name AS W_WAREHOUSE_NAME, t1.d_week_seq AS D_WEEK_SEQ, COALESCE(SUM(CASE WHEN promotion.p_promo_sk IS NULL THEN 1 ELSE 0 END), 0) AS NO_PROMO, COALESCE(SUM(CASE WHEN promotion.p_promo_sk IS NOT NULL THEN 1 ELSE 0 END), 0) AS PROMO, COUNT(*) AS TOTAL_CNT FROM catalog_sales INNER JOIN inventory ON catalog_sales.cs_item_sk = inventory.inv_item_sk AND catalog_sales.cs_quantity > inventory.inv_quantity_on_hand INNER JOIN warehouse ON inventory.inv_warehouse_sk = warehouse.w_warehouse_sk INNER JOIN item ON catalog_sales.cs_item_sk = item.i_item_sk INNER JOIN (SELECT * FROM customer_demographics WHERE cd_marital_status = 'S') AS t ON catalog_sales.cs_bill_cdemo_sk = t.cd_demo_sk INNER JOIN (SELECT * FROM household_demographics WHERE hd_buy_potential = '>10000') AS t0 ON catalog_sales.cs_bill_hdemo_sk = t0.hd_demo_sk INNER JOIN ((SELECT * FROM date_dim WHERE d_year = 2000) AS t1 INNER JOIN date_dim AS date_dim0 ON t1.d_week_seq = date_dim0.d_week_seq INNER JOIN date_dim AS date_dim1 ON date_dim1.d_date > (t1.d_date + 5 * INTERVAL '1' DAY)) ON catalog_sales.cs_sold_date_sk = t1.d_date_sk AND inventory.inv_date_sk = date_dim0.d_date_sk AND catalog_sales.cs_ship_date_sk = date_dim1.d_date_sk LEFT JOIN promotion ON catalog_sales.cs_promo_sk = promotion.p_promo_sk LEFT JOIN catalog_returns ON catalog_sales.cs_item_sk = catalog_returns.cr_item_sk AND catalog_sales.cs_order_number = catalog_returns.cr_order_number GROUP BY item.i_item_desc, warehouse.w_warehouse_name, t1.d_week_seq ORDER BY 6 DESC, item.i_item_desc, warehouse.w_warehouse_name, t1.d_week_seq FETCH NEXT 100 ROWS ONLY
select avg(ss_quantity) ,avg(ss_ext_sales_price) ,avg(ss_ext_wholesale_cost) ,sum(ss_ext_wholesale_cost) from store_sales ,store ,customer_demographics ,household_demographics ,customer_address ,date_dim where s_store_sk = ss_store_sk and ss_sold_date_sk = d_date_sk and d_year = 2001 and((ss_hdemo_sk=hd_demo_sk and cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'W' and cd_education_status = 'Unknown' and ss_sales_price between 100.00 and 150.00 and hd_dep_count = 3 )or (ss_hdemo_sk=hd_demo_sk and cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'U' and cd_education_status = '2 yr Degree' and ss_sales_price between 50.00 and 100.00 and hd_dep_count = 1 ) or (ss_hdemo_sk=hd_demo_sk and cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'M' and cd_education_status = 'Secondary' and ss_sales_price between 150.00 and 200.00 and hd_dep_count = 1 )) and((ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('KY', 'FL', 'NC') and ss_net_profit between 100 and 200 ) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('AL', 'ID', 'OR') and ss_net_profit between 150 and 300 ) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('OK', 'NE', 'SC') and ss_net_profit between 50 and 250 ))
SELECT AVG(store_sales.ss_quantity), AVG(store_sales.ss_ext_sales_price), AVG(store_sales.ss_ext_wholesale_cost), SUM(store_sales.ss_ext_wholesale_cost) FROM store_sales INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk CROSS JOIN customer_demographics INNER JOIN household_demographics ON store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk AND (customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk AND customer_demographics.cd_marital_status = 'W') AND (customer_demographics.cd_education_status = 'Unknown' AND (store_sales.ss_sales_price >= 100.00 AND store_sales.ss_sales_price <= 150.00 AND household_demographics.hd_dep_count = 3)) OR store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk AND (customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk AND customer_demographics.cd_marital_status = 'U') AND (customer_demographics.cd_education_status = '2 yr Degree' AND (store_sales.ss_sales_price >= 50.00 AND store_sales.ss_sales_price <= 100.00 AND household_demographics.hd_dep_count = 1)) OR store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk AND (customer_demographics.cd_demo_sk = store_sales.ss_cdemo_sk AND customer_demographics.cd_marital_status = 'M') AND (customer_demographics.cd_education_status = 'Secondary' AND (store_sales.ss_sales_price >= 150.00 AND store_sales.ss_sales_price <= 200.00 AND household_demographics.hd_dep_count = 1)) INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN customer_address ON store_sales.ss_addr_sk = customer_address.ca_address_sk AND customer_address.ca_country = 'United States' AND customer_address.ca_state IN ('FL', 'KY', 'NC') AND (store_sales.ss_net_profit >= 100 AND store_sales.ss_net_profit <= 200) OR store_sales.ss_addr_sk = customer_address.ca_address_sk AND customer_address.ca_country = 'United States' AND customer_address.ca_state IN ('AL', 'ID', 'OR') AND (store_sales.ss_net_profit >= 150 AND store_sales.ss_net_profit <= 300) OR store_sales.ss_addr_sk = customer_address.ca_address_sk AND customer_address.ca_country = 'United States' AND customer_address.ca_state IN ('NE', 'OK', 'SC') AND (store_sales.ss_net_profit >= 50 AND store_sales.ss_net_profit <= 250)
with results as (select i_item_id, s_state, 0 as g_state, ss_quantity agg1, ss_list_price agg2, ss_coupon_amt agg3, ss_sales_price agg4 from store_sales, customer_demographics, date_dim, store, item where ss_sold_date_sk = d_date_sk and ss_item_sk = i_item_sk and ss_store_sk = s_store_sk and ss_cdemo_sk = cd_demo_sk and cd_gender = 'M' and cd_marital_status = 'S' and cd_education_status = 'Advanced Degree' and d_year = 1998 and s_state in ('TN','TN', 'TN', 'TN', 'TN', 'TN') ) select i_item_id, s_state, g_state, agg1, agg2, agg3, agg4 from ( select i_item_id, s_state, 0 as g_state, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4 from results group by i_item_id, s_state union all select i_item_id, NULL AS s_state, 1 AS g_state, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4 from results group by i_item_id union all select NULL AS i_item_id, NULL as s_state, 1 as g_state, avg(agg1) agg1, avg(agg2) agg2, avg(agg3) agg3, avg(agg4) agg4 from results ) foo order by i_item_id, s_state limit 100
SELECT * FROM (SELECT item.i_item_id AS I_ITEM_ID, t1.s_state AS S_STATE, 0 AS G_STATE, AVG(store_sales.ss_quantity) AS AGG1, AVG(store_sales.ss_list_price) AS AGG2, AVG(store_sales.ss_coupon_amt) AS AGG3, AVG(store_sales.ss_sales_price) AS AGG4 FROM store_sales INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'M' AND cd_marital_status = 'S' AND cd_education_status = 'Advanced Degree') AS t ON store_sales.ss_cdemo_sk = t.cd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t1 ON store_sales.ss_store_sk = t1.s_store_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY t1.s_state, item.i_item_id UNION ALL SELECT item0.i_item_id AS I_ITEM_ID, NULL AS S_STATE, 1 AS G_STATE, AVG(store_sales0.ss_quantity) AS AGG1, AVG(store_sales0.ss_list_price) AS AGG2, AVG(store_sales0.ss_coupon_amt) AS AGG3, AVG(store_sales0.ss_sales_price) AS AGG4 FROM item AS item0 INNER JOIN (store_sales AS store_sales0 INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'M' AND cd_marital_status = 'S' AND cd_education_status = 'Advanced Degree') AS t4 ON store_sales0.ss_cdemo_sk = t4.cd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t5 ON store_sales0.ss_sold_date_sk = t5.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t6 ON store_sales0.ss_store_sk = t6.s_store_sk) ON item0.i_item_sk = store_sales0.ss_item_sk GROUP BY item0.i_item_id UNION ALL SELECT NULL AS I_ITEM_ID, NULL AS S_STATE, 1 AS G_STATE, AVG(store_sales1.ss_quantity) AS AGG1, AVG(store_sales1.ss_list_price) AS AGG2, AVG(store_sales1.ss_coupon_amt) AS AGG3, AVG(store_sales1.ss_sales_price) AS AGG4 FROM store_sales AS store_sales1 INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'M' AND cd_marital_status = 'S' AND cd_education_status = 'Advanced Degree') AS t9 ON store_sales1.ss_cdemo_sk = t9.cd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t10 ON store_sales1.ss_sold_date_sk = t10.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state = 'TN') AS t11 ON store_sales1.ss_store_sk = t11.s_store_sk INNER JOIN item AS item1 ON store_sales1.ss_item_sk = item1.i_item_sk) ORDER BY I_ITEM_ID, S_STATE FETCH NEXT 100 ROWS ONLY
WITH all_sales AS ( SELECT d_year ,i_brand_id ,i_class_id ,i_category_id ,i_manufact_id ,SUM(sales_cnt) AS sales_cnt ,SUM(sales_amt) AS sales_amt FROM (SELECT d_year ,i_brand_id ,i_class_id ,i_category_id ,i_manufact_id ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk JOIN date_dim ON d_date_sk=cs_sold_date_sk LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number AND cs_item_sk=cr_item_sk) WHERE i_category='Children' UNION SELECT d_year ,i_brand_id ,i_class_id ,i_category_id ,i_manufact_id ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt FROM store_sales JOIN item ON i_item_sk=ss_item_sk JOIN date_dim ON d_date_sk=ss_sold_date_sk LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number AND ss_item_sk=sr_item_sk) WHERE i_category='Children' UNION SELECT d_year ,i_brand_id ,i_class_id ,i_category_id ,i_manufact_id ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt FROM web_sales JOIN item ON i_item_sk=ws_item_sk JOIN date_dim ON d_date_sk=ws_sold_date_sk LEFT JOIN web_returns ON (ws_order_number=wr_order_number AND ws_item_sk=wr_item_sk) WHERE i_category='Children') sales_detail GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id) SELECT prev_yr.d_year AS prev_year ,curr_yr.d_year AS year ,curr_yr.i_brand_id ,curr_yr.i_class_id ,curr_yr.i_category_id ,curr_yr.i_manufact_id ,prev_yr.sales_cnt AS prev_yr_cnt ,curr_yr.sales_cnt AS curr_yr_cnt ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff FROM all_sales curr_yr, all_sales prev_yr WHERE curr_yr.i_brand_id=prev_yr.i_brand_id AND curr_yr.i_class_id=prev_yr.i_class_id AND curr_yr.i_category_id=prev_yr.i_category_id AND curr_yr.i_manufact_id=prev_yr.i_manufact_id AND curr_yr.d_year=2000 AND prev_yr.d_year=2000-1 AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9 ORDER BY sales_cnt_diff,sales_amt_diff limit 100
SELECT t16.D_YEAR AS PREV_YEAR, t7.D_YEAR AS YEAR, t7.I_BRAND_ID, t7.I_CLASS_ID, t7.I_CATEGORY_ID, t7.I_MANUFACT_ID, t16.SALES_CNT AS PREV_YR_CNT, t7.SALES_CNT AS CURR_YR_CNT, t7.SALES_CNT - t16.SALES_CNT AS SALES_CNT_DIFF, t7.SALES_AMT - t16.SALES_AMT AS SALES_AMT_DIFF FROM (SELECT D_YEAR, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID, I_MANUFACT_ID, SUM(SALES_CNT) AS SALES_CNT, SUM(SALES_AMT) AS SALES_AMT FROM (SELECT date_dim.d_year AS D_YEAR, t.i_brand_id AS I_BRAND_ID, t.i_class_id AS I_CLASS_ID, t.i_category_id AS I_CATEGORY_ID, t.i_manufact_id AS I_MANUFACT_ID, catalog_sales.cs_quantity - CASE WHEN catalog_returns.cr_return_quantity IS NOT NULL THEN CAST(catalog_returns.cr_return_quantity AS INTEGER) ELSE 0 END AS SALES_CNT, catalog_sales.cs_ext_sales_price - CASE WHEN catalog_returns.cr_return_amount IS NOT NULL THEN CAST(catalog_returns.cr_return_amount AS DECIMAL(19, 0)) ELSE 0.0 END AS SALES_AMT FROM catalog_sales INNER JOIN (SELECT * FROM item WHERE i_category = 'Children') AS t ON catalog_sales.cs_item_sk = t.i_item_sk INNER JOIN date_dim ON catalog_sales.cs_sold_date_sk = date_dim.d_date_sk LEFT JOIN catalog_returns ON catalog_sales.cs_order_number = catalog_returns.cr_order_number AND catalog_sales.cs_item_sk = catalog_returns.cr_item_sk UNION SELECT date_dim0.d_year AS D_YEAR, t1.i_brand_id AS I_BRAND_ID, t1.i_class_id AS I_CLASS_ID, t1.i_category_id AS I_CATEGORY_ID, t1.i_manufact_id AS I_MANUFACT_ID, store_sales.ss_quantity - CASE WHEN store_returns.sr_return_quantity IS NOT NULL THEN CAST(store_returns.sr_return_quantity AS INTEGER) ELSE 0 END AS SALES_CNT, store_sales.ss_ext_sales_price - CASE WHEN store_returns.sr_return_amt IS NOT NULL THEN CAST(store_returns.sr_return_amt AS DECIMAL(19, 0)) ELSE 0.0 END AS SALES_AMT FROM store_sales INNER JOIN (SELECT * FROM item WHERE i_category = 'Children') AS t1 ON store_sales.ss_item_sk = t1.i_item_sk INNER JOIN date_dim AS date_dim0 ON store_sales.ss_sold_date_sk = date_dim0.d_date_sk LEFT JOIN store_returns ON store_sales.ss_ticket_number = store_returns.sr_ticket_number AND store_sales.ss_item_sk = store_returns.sr_item_sk UNION SELECT date_dim1.d_year AS D_YEAR, t3.i_brand_id AS I_BRAND_ID, t3.i_class_id AS I_CLASS_ID, t3.i_category_id AS I_CATEGORY_ID, t3.i_manufact_id AS I_MANUFACT_ID, web_sales.ws_quantity - CASE WHEN web_returns.wr_return_quantity IS NOT NULL THEN CAST(web_returns.wr_return_quantity AS INTEGER) ELSE 0 END AS SALES_CNT, web_sales.ws_ext_sales_price - CASE WHEN web_returns.wr_return_amt IS NOT NULL THEN CAST(web_returns.wr_return_amt AS DECIMAL(19, 0)) ELSE 0.0 END AS SALES_AMT FROM web_sales INNER JOIN (SELECT * FROM item WHERE i_category = 'Children') AS t3 ON web_sales.ws_item_sk = t3.i_item_sk INNER JOIN date_dim AS date_dim1 ON web_sales.ws_sold_date_sk = date_dim1.d_date_sk LEFT JOIN web_returns ON web_sales.ws_order_number = web_returns.wr_order_number AND web_sales.ws_item_sk = web_returns.wr_item_sk) AS t5 GROUP BY D_YEAR, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID, I_MANUFACT_ID HAVING D_YEAR = 2000) AS t7 INNER JOIN (SELECT D_YEAR, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID, I_MANUFACT_ID, SUM(SALES_CNT) AS SALES_CNT, SUM(SALES_AMT) AS SALES_AMT FROM (SELECT date_dim2.d_year AS D_YEAR, t8.i_brand_id AS I_BRAND_ID, t8.i_class_id AS I_CLASS_ID, t8.i_category_id AS I_CATEGORY_ID, t8.i_manufact_id AS I_MANUFACT_ID, catalog_sales0.cs_quantity - CASE WHEN catalog_returns0.cr_return_quantity IS NOT NULL THEN CAST(catalog_returns0.cr_return_quantity AS INTEGER) ELSE 0 END AS SALES_CNT, catalog_sales0.cs_ext_sales_price - CASE WHEN catalog_returns0.cr_return_amount IS NOT NULL THEN CAST(catalog_returns0.cr_return_amount AS DECIMAL(19, 0)) ELSE 0.0 END AS SALES_AMT FROM catalog_sales AS catalog_sales0 INNER JOIN (SELECT * FROM item WHERE i_category = 'Children') AS t8 ON catalog_sales0.cs_item_sk = t8.i_item_sk INNER JOIN date_dim AS date_dim2 ON catalog_sales0.cs_sold_date_sk = date_dim2.d_date_sk LEFT JOIN catalog_returns AS catalog_returns0 ON catalog_sales0.cs_order_number = catalog_returns0.cr_order_number AND catalog_sales0.cs_item_sk = catalog_returns0.cr_item_sk UNION SELECT date_dim3.d_year AS D_YEAR, t10.i_brand_id AS I_BRAND_ID, t10.i_class_id AS I_CLASS_ID, t10.i_category_id AS I_CATEGORY_ID, t10.i_manufact_id AS I_MANUFACT_ID, store_sales0.ss_quantity - CASE WHEN store_returns0.sr_return_quantity IS NOT NULL THEN CAST(store_returns0.sr_return_quantity AS INTEGER) ELSE 0 END AS SALES_CNT, store_sales0.ss_ext_sales_price - CASE WHEN store_returns0.sr_return_amt IS NOT NULL THEN CAST(store_returns0.sr_return_amt AS DECIMAL(19, 0)) ELSE 0.0 END AS SALES_AMT FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM item WHERE i_category = 'Children') AS t10 ON store_sales0.ss_item_sk = t10.i_item_sk INNER JOIN date_dim AS date_dim3 ON store_sales0.ss_sold_date_sk = date_dim3.d_date_sk LEFT JOIN store_returns AS store_returns0 ON store_sales0.ss_ticket_number = store_returns0.sr_ticket_number AND store_sales0.ss_item_sk = store_returns0.sr_item_sk UNION SELECT date_dim4.d_year AS D_YEAR, t12.i_brand_id AS I_BRAND_ID, t12.i_class_id AS I_CLASS_ID, t12.i_category_id AS I_CATEGORY_ID, t12.i_manufact_id AS I_MANUFACT_ID, web_sales0.ws_quantity - CASE WHEN web_returns0.wr_return_quantity IS NOT NULL THEN CAST(web_returns0.wr_return_quantity AS INTEGER) ELSE 0 END AS SALES_CNT, web_sales0.ws_ext_sales_price - CASE WHEN web_returns0.wr_return_amt IS NOT NULL THEN CAST(web_returns0.wr_return_amt AS DECIMAL(19, 0)) ELSE 0.0 END AS SALES_AMT FROM web_sales AS web_sales0 INNER JOIN (SELECT * FROM item WHERE i_category = 'Children') AS t12 ON web_sales0.ws_item_sk = t12.i_item_sk INNER JOIN date_dim AS date_dim4 ON web_sales0.ws_sold_date_sk = date_dim4.d_date_sk LEFT JOIN web_returns AS web_returns0 ON web_sales0.ws_order_number = web_returns0.wr_order_number AND web_sales0.ws_item_sk = web_returns0.wr_item_sk) AS t14 GROUP BY D_YEAR, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID, I_MANUFACT_ID HAVING D_YEAR = 2000 - 1) AS t16 ON t7.I_BRAND_ID = t16.I_BRAND_ID AND t7.I_CLASS_ID = t16.I_CLASS_ID AND t7.I_CATEGORY_ID = t16.I_CATEGORY_ID AND t7.I_MANUFACT_ID = t16.I_MANUFACT_ID AND CAST(t7.SALES_CNT AS DECIMAL(17, 2)) / CAST(t16.SALES_CNT AS DECIMAL(17, 2)) < 0.9 ORDER BY 9, 10 FETCH NEXT 100 ROWS ONLY
with results as ( select sum(ws_net_paid) as total_sum, i_category, i_class, 0 as g_category, 0 as g_class from web_sales ,date_dim d1 ,item where d1.d_month_seq between 1206 and 1206+11 and d1.d_date_sk = ws_sold_date_sk and i_item_sk = ws_item_sk group by i_category,i_class ) , results_rollup as ( select total_sum ,i_category ,i_class, g_category, g_class, 0 as lochierarchy from results union select sum(total_sum) as total_sum, i_category, NULL as i_class, 0 as g_category, 1 as g_class, 1 as lochierarchy from results group by i_category union select sum(total_sum) as total_sum, NULL as i_category, NULL as i_class, 1 as g_category, 1 as g_class, 2 as lochierarchy from results) select total_sum ,i_category ,i_class, lochierarchy ,rank() over ( partition by lochierarchy, case when g_class = 0 then i_category end order by total_sum desc) as rank_within_parent from results_rollup order by lochierarchy desc, case when lochierarchy = 0 then i_category end, rank_within_parent limit 100
SELECT TOTAL_SUM, I_CATEGORY, I_CLASS, LOCHIERARCHY, RANK() OVER (PARTITION BY LOCHIERARCHY, CASE WHEN G_CLASS = 0 THEN I_CATEGORY ELSE NULL END ORDER BY TOTAL_SUM DESC) AS RANK_WITHIN_PARENT, CASE WHEN LOCHIERARCHY = 0 THEN I_CATEGORY ELSE NULL END FROM (SELECT SUM(web_sales.ws_net_paid) AS TOTAL_SUM, item.i_category AS I_CATEGORY, item.i_class AS I_CLASS, 0 AS G_CATEGORY, 0 AS G_CLASS, 0 AS LOCHIERARCHY FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1206 AND d_month_seq <= 1206 + 11) AS t ON web_sales.ws_sold_date_sk = t.d_date_sk INNER JOIN item ON web_sales.ws_item_sk = item.i_item_sk GROUP BY item.i_class, item.i_category UNION SELECT SUM(web_sales0.ws_net_paid) AS TOTAL_SUM, item0.i_category AS I_CATEGORY, NULL AS I_CLASS, 0 AS G_CATEGORY, 1 AS G_CLASS, 1 AS LOCHIERARCHY FROM web_sales AS web_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1206 AND d_month_seq <= 1206 + 11) AS t2 ON web_sales0.ws_sold_date_sk = t2.d_date_sk INNER JOIN item AS item0 ON web_sales0.ws_item_sk = item0.i_item_sk GROUP BY item0.i_category UNION SELECT SUM(web_sales1.ws_net_paid) AS TOTAL_SUM, NULL AS I_CATEGORY, NULL AS I_CLASS, 1 AS G_CATEGORY, 1 AS G_CLASS, 2 AS LOCHIERARCHY FROM web_sales AS web_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1206 AND d_month_seq <= 1206 + 11) AS t5 ON web_sales1.ws_sold_date_sk = t5.d_date_sk INNER JOIN item AS item1 ON web_sales1.ws_item_sk = item1.i_item_sk) AS t8 ORDER BY LOCHIERARCHY DESC, 6, 5 FETCH NEXT 100 ROWS ONLY
select cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio from ( select count(*) amc from web_sales, household_demographics , time_dim, web_page where ws_sold_time_sk = time_dim.t_time_sk and ws_ship_hdemo_sk = household_demographics.hd_demo_sk and ws_web_page_sk = web_page.wp_web_page_sk and time_dim.t_hour between 7 and 7+1 and household_demographics.hd_dep_count = 7 and web_page.wp_char_count between 5000 and 5200) at, ( select count(*) pmc from web_sales, household_demographics , time_dim, web_page where ws_sold_time_sk = time_dim.t_time_sk and ws_ship_hdemo_sk = household_demographics.hd_demo_sk and ws_web_page_sk = web_page.wp_web_page_sk and time_dim.t_hour between 14 and 14+1 and household_demographics.hd_dep_count = 7 and web_page.wp_char_count between 5000 and 5200) pt order by am_pm_ratio limit 100
SELECT CAST(t2.AMC AS DECIMAL(15, 4)) / CAST(t6.PMC AS DECIMAL(15, 4)) AS AM_PM_RATIO FROM (SELECT COUNT(*) AS AMC FROM (SELECT * FROM web_page WHERE wp_char_count >= 5000 AND wp_char_count <= 5200) AS t INNER JOIN (web_sales INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 7) AS t0 ON web_sales.ws_ship_hdemo_sk = t0.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour >= 7 AND t_hour <= 7 + 1) AS t1 ON web_sales.ws_sold_time_sk = t1.t_time_sk) ON t.wp_web_page_sk = web_sales.ws_web_page_sk) AS t2, (SELECT COUNT(*) AS PMC FROM (SELECT * FROM web_page WHERE wp_char_count >= 5000 AND wp_char_count <= 5200) AS t3 INNER JOIN (web_sales AS web_sales0 INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 7) AS t4 ON web_sales0.ws_ship_hdemo_sk = t4.hd_demo_sk INNER JOIN (SELECT * FROM time_dim WHERE t_hour >= 14 AND t_hour <= 14 + 1) AS t5 ON web_sales0.ws_sold_time_sk = t5.t_time_sk) ON t3.wp_web_page_sk = web_sales0.ws_web_page_sk) AS t6 ORDER BY 1 FETCH NEXT 100 ROWS ONLY
select c_last_name ,c_first_name ,c_salutation ,c_preferred_cust_flag ,ss_ticket_number ,cnt from (select ss_ticket_number ,ss_customer_sk ,count(*) cnt from store_sales,date_dim,store,household_demographics where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk and date_dim.d_dom between 1 and 2 and (household_demographics.hd_buy_potential = '501-1000' or household_demographics.hd_buy_potential = 'Unknown') and household_demographics.hd_vehicle_count > 0 and case when household_demographics.hd_vehicle_count > 0 then household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1 and date_dim.d_year in (2000,2000+1,2000+2) and store.s_county in ('Williamson County','Williamson County','Williamson County','Williamson County') group by ss_ticket_number,ss_customer_sk) dj,customer where ss_customer_sk = c_customer_sk and cnt between 1 and 5 order by cnt desc, c_last_name asc
SELECT customer.c_last_name AS C_LAST_NAME, customer.c_first_name AS C_FIRST_NAME, customer.c_salutation AS C_SALUTATION, customer.c_preferred_cust_flag AS C_PREFERRED_CUST_FLAG, t5.ss_ticket_number AS SS_TICKET_NUMBER, t5.CNT FROM customer INNER JOIN (SELECT t1.ss_ticket_number, t1.ss_customer_sk, COUNT(*) AS CNT FROM (SELECT store_sales.ss_sold_date_sk, store_sales.ss_sold_time_sk, store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_cdemo_sk, store_sales.ss_hdemo_sk, store_sales.ss_addr_sk, store_sales.ss_store_sk, store_sales.ss_promo_sk, store_sales.ss_ticket_number, store_sales.ss_quantity, store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_sales_price, store_sales.ss_ext_discount_amt, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_ext_list_price, store_sales.ss_ext_tax, store_sales.ss_coupon_amt, store_sales.ss_net_paid, store_sales.ss_net_paid_inc_tax, store_sales.ss_net_profit, t0.d_date_sk, t0.d_date_id, t0.d_date, t0.d_month_seq, t0.d_week_seq, t0.d_quarter_seq, t0.d_year, t0.d_dow, t0.d_moy, t0.d_dom, t0.d_qoy, t0.d_fy_year, t0.d_fy_quarter_seq, t0.d_fy_week_seq, t0.d_day_name, t0.d_quarter_name, t0.d_holiday, t0.d_weekend, t0.d_following_holiday, t0.d_first_dom, t0.d_last_dom, t0.d_same_day_ly, t0.d_same_day_lq, t0.d_current_day, t0.d_current_week, t0.d_current_month, t0.d_current_quarter, t0.d_current_year, t.hd_demo_sk, t.hd_income_band_sk, t.hd_buy_potential, t.hd_dep_count, t.hd_vehicle_count FROM store_sales INNER JOIN (SELECT * FROM household_demographics WHERE hd_buy_potential IN ('501-1000', 'Unknown') AND hd_vehicle_count > 0 AND CASE WHEN hd_vehicle_count > 0 THEN hd_dep_count / hd_vehicle_count > 1 ELSE FALSE END) AS t ON store_sales.ss_hdemo_sk = t.hd_demo_sk INNER JOIN (SELECT * FROM date_dim WHERE d_dom >= 1 AND d_dom <= 2 AND (d_year = 2000 OR d_year = 2000 + 1 OR d_year = 2000 + 2)) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk) AS t1 INNER JOIN (SELECT * FROM store WHERE s_county = 'Williamson County') AS t2 ON t1.ss_store_sk = t2.s_store_sk GROUP BY t1.ss_customer_sk, t1.ss_ticket_number HAVING COUNT(*) >= 1 AND COUNT(*) <= 5) AS t5 ON customer.c_customer_sk = t5.ss_customer_sk ORDER BY t5.CNT DESC, customer.c_last_name
with ss_items as (select i_item_id item_id ,sum(ss_ext_sales_price) ss_item_rev from store_sales ,item ,date_dim where ss_item_sk = i_item_sk and d_date in (select d_date from date_dim where d_week_seq = (select d_week_seq from date_dim where d_date = '1998-07-18')) and ss_sold_date_sk = d_date_sk group by i_item_id), cs_items as (select i_item_id item_id ,sum(cs_ext_sales_price) cs_item_rev from catalog_sales ,item ,date_dim where cs_item_sk = i_item_sk and d_date in (select d_date from date_dim where d_week_seq = (select d_week_seq from date_dim where d_date = '1998-07-18')) and cs_sold_date_sk = d_date_sk group by i_item_id), ws_items as (select i_item_id item_id ,sum(ws_ext_sales_price) ws_item_rev from web_sales ,item ,date_dim where ws_item_sk = i_item_sk and d_date in (select d_date from date_dim where d_week_seq =(select d_week_seq from date_dim where d_date = '1998-07-18')) and ws_sold_date_sk = d_date_sk group by i_item_id) select ss_items.item_id ,ss_item_rev ,ss_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ss_dev ,cs_item_rev ,cs_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 cs_dev ,ws_item_rev ,ws_item_rev/((ss_item_rev+cs_item_rev+ws_item_rev)/3) * 100 ws_dev ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average from ss_items,cs_items,ws_items where ss_items.item_id=cs_items.item_id and ss_items.item_id=ws_items.item_id and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev order by item_id ,ss_item_rev limit 100
SELECT t4.i_item_id AS ITEM_ID, t4.SS_ITEM_REV, t4.SS_ITEM_REV / ((t4.SS_ITEM_REV + t10.CS_ITEM_REV + t16.WS_ITEM_REV) / 3) * 100 AS SS_DEV, t10.CS_ITEM_REV, t10.CS_ITEM_REV / ((t4.SS_ITEM_REV + t10.CS_ITEM_REV + t16.WS_ITEM_REV) / 3) * 100 AS CS_DEV, t16.WS_ITEM_REV, t16.WS_ITEM_REV / ((t4.SS_ITEM_REV + t10.CS_ITEM_REV + t16.WS_ITEM_REV) / 3) * 100 AS WS_DEV, (t4.SS_ITEM_REV + t10.CS_ITEM_REV + t16.WS_ITEM_REV) / 3 AS AVERAGE FROM (SELECT item.i_item_id, SUM(store_sales.ss_ext_sales_price) AS SS_ITEM_REV FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date IN (SELECT d_date AS D_DATE FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_date = '1998-07-18'))))) AS t3 ON store_sales.ss_sold_date_sk = t3.d_date_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY item.i_item_id) AS t4 INNER JOIN (SELECT item0.i_item_id, SUM(catalog_sales.cs_ext_sales_price) AS CS_ITEM_REV FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date IN (SELECT d_date AS D_DATE FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_date = '1998-07-18'))))) AS t9 ON catalog_sales.cs_sold_date_sk = t9.d_date_sk INNER JOIN item AS item0 ON catalog_sales.cs_item_sk = item0.i_item_sk GROUP BY item0.i_item_id) AS t10 ON t4.i_item_id = t10.i_item_id AND t4.SS_ITEM_REV >= 0.9 * t10.CS_ITEM_REV AND t4.SS_ITEM_REV <= 1.1 * t10.CS_ITEM_REV AND t10.CS_ITEM_REV >= 0.9 * t4.SS_ITEM_REV AND t10.CS_ITEM_REV <= 1.1 * t4.SS_ITEM_REV INNER JOIN (SELECT item1.i_item_id, SUM(web_sales.ws_ext_sales_price) AS WS_ITEM_REV FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_date IN (SELECT d_date AS D_DATE FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_date = '1998-07-18'))))) AS t15 ON web_sales.ws_sold_date_sk = t15.d_date_sk INNER JOIN item AS item1 ON web_sales.ws_item_sk = item1.i_item_sk GROUP BY item1.i_item_id) AS t16 ON t4.i_item_id = t16.i_item_id AND t4.SS_ITEM_REV >= 0.9 * t16.WS_ITEM_REV AND (t4.SS_ITEM_REV <= 1.1 * t16.WS_ITEM_REV AND t10.CS_ITEM_REV >= 0.9 * t16.WS_ITEM_REV) AND (t10.CS_ITEM_REV <= 1.1 * t16.WS_ITEM_REV AND t16.WS_ITEM_REV >= 0.9 * t4.SS_ITEM_REV AND (t16.WS_ITEM_REV <= 1.1 * t4.SS_ITEM_REV AND (t16.WS_ITEM_REV >= 0.9 * t10.CS_ITEM_REV AND t16.WS_ITEM_REV <= 1.1 * t10.CS_ITEM_REV))) ORDER BY t4.i_item_id, t4.SS_ITEM_REV FETCH NEXT 100 ROWS ONLY
select sum(ws_net_paid) as total_sum ,i_category ,i_class ,grouping(i_category)+grouping(i_class) as lochierarchy ,rank() over ( partition by grouping(i_category)+grouping(i_class), case when grouping(i_class) = 0 then i_category end order by sum(ws_net_paid) desc) as rank_within_parent from web_sales ,date_dim d1 ,item where d1.d_month_seq between 1203 and 1203+11 and d1.d_date_sk = ws_sold_date_sk and i_item_sk = ws_item_sk group by rollup(i_category,i_class) order by lochierarchy desc, case when lochierarchy = 0 then i_category end, rank_within_parent limit 100
SELECT SUM(web_sales.ws_net_paid) AS TOTAL_SUM, item.i_category AS I_CATEGORY, item.i_class AS I_CLASS, GROUPING(item.i_category) + GROUPING(item.i_class) AS LOCHIERARCHY, RANK() OVER (PARTITION BY GROUPING(item.i_category) + GROUPING(item.i_class), CASE WHEN GROUPING(item.i_class) = 0 THEN item.i_category ELSE NULL END ORDER BY SUM(web_sales.ws_net_paid) DESC) AS RANK_WITHIN_PARENT, CASE WHEN GROUPING(item.i_category) + GROUPING(item.i_class) = 0 THEN item.i_category ELSE NULL END FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1203 AND d_month_seq <= 1203 + 11) AS t ON web_sales.ws_sold_date_sk = t.d_date_sk INNER JOIN item ON web_sales.ws_item_sk = item.i_item_sk GROUP BY ROLLUP(item.i_category, item.i_class) ORDER BY 4 DESC, 6, 5 FETCH NEXT 100 ROWS ONLY
select * from (select i_category ,i_class ,i_brand ,i_product_name ,d_year ,d_qoy ,d_moy ,s_store_id ,sumsales ,rank() over (partition by i_category order by sumsales desc) rk from (select i_category ,i_class ,i_brand ,i_product_name ,d_year ,d_qoy ,d_moy ,s_store_id ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales from store_sales ,date_dim ,store ,item where ss_sold_date_sk=d_date_sk and ss_item_sk=i_item_sk and ss_store_sk = s_store_sk and d_month_seq between 1189 and 1189+11 group by rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2 where rk <= 100 order by i_category ,i_class ,i_brand ,i_product_name ,d_year ,d_qoy ,d_moy ,s_store_id ,sumsales ,rk limit 100
SELECT * FROM (SELECT t1.I_CATEGORY, t1.I_CLASS, t1.I_BRAND, t1.I_PRODUCT_NAME, t1.D_YEAR, t1.D_QOY, t1.D_MOY, t1.S_STORE_ID, t1.SUMSALES, RANK() OVER (PARTITION BY t1.I_CATEGORY ORDER BY t1.SUMSALES DESC) AS RK FROM (SELECT item.i_category AS I_CATEGORY, item.i_class AS I_CLASS, item.i_brand AS I_BRAND, item.i_product_name AS I_PRODUCT_NAME, t.d_year AS D_YEAR, t.d_qoy AS D_QOY, t.d_moy AS D_MOY, store.s_store_id AS S_STORE_ID, COALESCE(SUM(CASE WHEN store_sales.ss_sales_price IS NOT NULL AND store_sales.ss_quantity IS NOT NULL THEN CAST(store_sales.ss_sales_price * store_sales.ss_quantity AS DECIMAL(19, 0)) ELSE 0 END), 0) AS SUMSALES FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1189 AND d_month_seq <= 1189 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk INNER JOIN item ON store_sales.ss_item_sk = item.i_item_sk GROUP BY ROLLUP(item.i_category, item.i_class, item.i_brand, item.i_product_name, t.d_year, t.d_qoy, t.d_moy, store.s_store_id)) AS t1) AS t2 WHERE RK <= 100 ORDER BY I_CATEGORY, I_CLASS, I_BRAND, I_PRODUCT_NAME, D_YEAR, D_QOY, D_MOY, S_STORE_ID, SUMSALES, RK FETCH NEXT 100 ROWS ONLY
select s_store_name, i_item_desc, sc.revenue, i_current_price, i_wholesale_cost, i_brand from store, item, (select ss_store_sk, avg(revenue) as ave from (select ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue from store_sales, date_dim where ss_sold_date_sk = d_date_sk and d_month_seq between 1195 and 1195+11 group by ss_store_sk, ss_item_sk) sa group by ss_store_sk) sb, (select ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue from store_sales, date_dim where ss_sold_date_sk = d_date_sk and d_month_seq between 1195 and 1195+11 group by ss_store_sk, ss_item_sk) sc where sb.ss_store_sk = sc.ss_store_sk and sc.revenue <= 0.1 * sb.ave and s_store_sk = sc.ss_store_sk and i_item_sk = sc.ss_item_sk order by s_store_name, i_item_desc limit 100
SELECT store.s_store_name AS S_STORE_NAME, item.i_item_desc AS I_ITEM_DESC, t1.REVENUE, item.i_current_price AS I_CURRENT_PRICE, item.i_wholesale_cost AS I_WHOLESALE_COST, item.i_brand AS I_BRAND FROM store INNER JOIN ((SELECT store_sales.ss_store_sk, store_sales.ss_item_sk, SUM(store_sales.ss_sales_price) AS REVENUE FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1195 AND d_month_seq <= 1195 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk GROUP BY store_sales.ss_item_sk, store_sales.ss_store_sk) AS t1 INNER JOIN (SELECT t3.ss_store_sk, AVG(t3.REVENUE) AS AVE FROM (SELECT store_sales0.ss_item_sk, store_sales0.ss_store_sk, SUM(store_sales0.ss_sales_price) AS REVENUE FROM store_sales AS store_sales0 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1195 AND d_month_seq <= 1195 + 11) AS t2 ON store_sales0.ss_sold_date_sk = t2.d_date_sk GROUP BY store_sales0.ss_item_sk, store_sales0.ss_store_sk) AS t3 GROUP BY t3.ss_store_sk) AS t4 ON t1.REVENUE <= 0.1 * t4.AVE AND t1.ss_store_sk = t4.ss_store_sk) ON store.s_store_sk = t4.ss_store_sk INNER JOIN item ON t1.ss_item_sk = item.i_item_sk ORDER BY store.s_store_name, item.i_item_desc FETCH NEXT 100 ROWS ONLY
select * from( select i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum(ss_sales_price) sum_sales, avg(sum(ss_sales_price)) over (partition by i_category, i_brand, s_store_name, s_company_name) avg_monthly_sales from item, store_sales, date_dim, store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and d_year in (1998) and ((i_category in ('Books','Shoes','Women') and i_class in ('fiction','womens','maternity') ) or (i_category in ('Men','Home','Children') and i_class in ('sports-apparel','blinds/shades','newborn') )) group by i_category, i_class, i_brand, s_store_name, s_company_name, d_moy) tmp1 where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1 order by sum_sales - avg_monthly_sales, s_store_name limit 100
SELECT I_CATEGORY, I_CLASS, I_BRAND, S_STORE_NAME, S_COMPANY_NAME, D_MOY, SUM_SALES, AVG_MONTHLY_SALES, SUM_SALES - AVG_MONTHLY_SALES FROM (SELECT t.i_category AS I_CATEGORY, t.i_class AS I_CLASS, t.i_brand AS I_BRAND, store.s_store_name AS S_STORE_NAME, store.s_company_name AS S_COMPANY_NAME, t0.d_moy AS D_MOY, SUM(store_sales.ss_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_category, t.i_brand, store.s_store_name, store.s_company_name RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_category, t.i_brand, store.s_store_name, store.s_company_name RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_category, t.i_brand, store.s_store_name, store.s_company_name RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES FROM (SELECT * FROM item WHERE i_category IN ('Books', 'Shoes', 'Women') AND i_class IN ('fiction', 'maternity', 'womens') OR i_category IN ('Children', 'Home', 'Men') AND i_class IN ('blinds/shades', 'newborn', 'sports-apparel')) AS t INNER JOIN store_sales ON t.i_item_sk = store_sales.ss_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk GROUP BY t.i_brand, t.i_class, t.i_category, t0.d_moy, store.s_store_name, store.s_company_name) AS t2 WHERE CASE WHEN t2.AVG_MONTHLY_SALES <> 0 THEN ABS(t2.SUM_SALES - t2.AVG_MONTHLY_SALES) / t2.AVG_MONTHLY_SALES > 0.1 ELSE FALSE END ORDER BY 9, S_STORE_NAME FETCH NEXT 100 ROWS ONLY
select count(*) from ( select distinct c_last_name, c_first_name, d_date from store_sales, date_dim, customer where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_customer_sk = customer.c_customer_sk and d_month_seq between 1205 and 1205 + 11 intersect select distinct c_last_name, c_first_name, d_date from catalog_sales, date_dim, customer where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk and d_month_seq between 1205 and 1205 + 11 intersect select distinct c_last_name, c_first_name, d_date from web_sales, date_dim, customer where web_sales.ws_sold_date_sk = date_dim.d_date_sk and web_sales.ws_bill_customer_sk = customer.c_customer_sk and d_month_seq between 1205 and 1205 + 11 ) hot_cust limit 100
SELECT COUNT(*) FROM (SELECT C_LAST_NAME, C_FIRST_NAME, D_DATE FROM (SELECT customer.c_last_name AS C_LAST_NAME, customer.c_first_name AS C_FIRST_NAME, t.d_date AS D_DATE, 1 AS $f3 FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1205 AND d_month_seq <= 1205 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN customer ON store_sales.ss_customer_sk = customer.c_customer_sk GROUP BY t.d_date, customer.c_first_name, customer.c_last_name UNION ALL SELECT customer0.c_last_name AS C_LAST_NAME, customer0.c_first_name AS C_FIRST_NAME, t2.d_date AS D_DATE, 1 AS $f3 FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1205 AND d_month_seq <= 1205 + 11) AS t2 ON catalog_sales.cs_sold_date_sk = t2.d_date_sk INNER JOIN customer AS customer0 ON catalog_sales.cs_bill_customer_sk = customer0.c_customer_sk GROUP BY t2.d_date, customer0.c_first_name, customer0.c_last_name) AS t5 GROUP BY C_LAST_NAME, C_FIRST_NAME, D_DATE HAVING COUNT(*) = 2 INTERSECT SELECT customer1.c_last_name, customer1.c_first_name, t9.d_date FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1205 AND d_month_seq <= 1205 + 11) AS t9 ON web_sales.ws_sold_date_sk = t9.d_date_sk INNER JOIN customer AS customer1 ON web_sales.ws_bill_customer_sk = customer1.c_customer_sk GROUP BY t9.d_date, customer1.c_first_name, customer1.c_last_name) AS t12 FETCH NEXT 100 ROWS ONLY
select sum (ss_quantity) from store_sales, store, customer_demographics, customer_address, date_dim where s_store_sk = ss_store_sk and ss_sold_date_sk = d_date_sk and d_year = 2001 and ( ( cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'S' and cd_education_status = '4 yr Degree' and ss_sales_price between 100.00 and 150.00 ) or ( cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'D' and cd_education_status = '2 yr Degree' and ss_sales_price between 50.00 and 100.00 ) or ( cd_demo_sk = ss_cdemo_sk and cd_marital_status = 'M' and cd_education_status = 'College' and ss_sales_price between 150.00 and 200.00 ) ) and ( ( ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('NE', 'GA', 'KY') and ss_net_profit between 0 and 2000 ) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('PA', 'WV', 'LA') and ss_net_profit between 150 and 3000 ) or (ss_addr_sk = ca_address_sk and ca_country = 'United States' and ca_state in ('FL', 'ND', 'OK') and ss_net_profit between 50 and 25000 ) )
SELECT SUM(store_sales.ss_quantity) FROM store_sales INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk INNER JOIN customer_demographics ON store_sales.ss_cdemo_sk = customer_demographics.cd_demo_sk AND customer_demographics.cd_marital_status = 'S' AND customer_demographics.cd_education_status = '4 yr Degree' AND (store_sales.ss_sales_price >= 100.00 AND store_sales.ss_sales_price <= 150.00) OR store_sales.ss_cdemo_sk = customer_demographics.cd_demo_sk AND customer_demographics.cd_marital_status = 'D' AND customer_demographics.cd_education_status = '2 yr Degree' AND (store_sales.ss_sales_price >= 50.00 AND store_sales.ss_sales_price <= 100.00) OR store_sales.ss_cdemo_sk = customer_demographics.cd_demo_sk AND customer_demographics.cd_marital_status = 'M' AND customer_demographics.cd_education_status = 'College' AND (store_sales.ss_sales_price >= 150.00 AND store_sales.ss_sales_price <= 200.00) INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN customer_address ON store_sales.ss_addr_sk = customer_address.ca_address_sk AND customer_address.ca_country = 'United States' AND customer_address.ca_state IN ('GA', 'KY', 'NE') AND (store_sales.ss_net_profit >= 0 AND store_sales.ss_net_profit <= 2000) OR store_sales.ss_addr_sk = customer_address.ca_address_sk AND customer_address.ca_country = 'United States' AND customer_address.ca_state IN ('LA', 'PA', 'WV') AND (store_sales.ss_net_profit >= 150 AND store_sales.ss_net_profit <= 3000) OR store_sales.ss_addr_sk = customer_address.ca_address_sk AND customer_address.ca_country = 'United States' AND customer_address.ca_state IN ('FL', 'ND', 'OK') AND (store_sales.ss_net_profit >= 50 AND store_sales.ss_net_profit <= 25000)
select i_brand_id brand_id, i_brand brand, sum(ss_ext_sales_price) ext_price from date_dim, store_sales, item where d_date_sk = ss_sold_date_sk and ss_item_sk = i_item_sk and i_manager_id=69 and d_moy=11 and d_year=2000 group by i_brand, i_brand_id order by ext_price desc, i_brand_id limit 100
SELECT t0.i_brand_id, t0.i_brand, SUM(store_sales.ss_ext_sales_price) AS EXT_PRICE FROM (SELECT * FROM date_dim WHERE d_moy = 11 AND d_year = 2000) AS t INNER JOIN store_sales ON t.d_date_sk = store_sales.ss_sold_date_sk INNER JOIN (SELECT * FROM item WHERE i_manager_id = 69) AS t0 ON store_sales.ss_item_sk = t0.i_item_sk GROUP BY t0.i_brand_id, t0.i_brand ORDER BY 3 DESC, t0.i_brand_id FETCH NEXT 100 ROWS ONLY
select i_item_id ,i_item_desc ,i_category ,i_class ,i_current_price ,sum(ss_ext_sales_price) as itemrevenue ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over (partition by i_class) as revenueratio from store_sales ,item ,date_dim where ss_item_sk = i_item_sk and i_category in ('Music', 'Shoes', 'Children') and ss_sold_date_sk = d_date_sk and d_date between cast('1999-03-04' as date) and (cast('1999-03-04' as date) + interval 30 days) group by i_item_id ,i_item_desc ,i_category ,i_class ,i_current_price order by i_category ,i_class ,i_item_id ,i_item_desc ,revenueratio
SELECT t.i_item_id AS I_ITEM_ID, t.i_item_desc AS I_ITEM_DESC, t.i_category AS I_CATEGORY, t.i_class AS I_CLASS, t.i_current_price AS I_CURRENT_PRICE, SUM(store_sales.ss_ext_sales_price) AS ITEMREVENUE, SUM(store_sales.ss_ext_sales_price) * 100 / CASE WHEN (COUNT(SUM(store_sales.ss_ext_sales_price)) OVER (PARTITION BY t.i_class RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales.ss_ext_sales_price)) OVER (PARTITION BY t.i_class RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END AS REVENUERATIO FROM store_sales INNER JOIN (SELECT * FROM item WHERE i_category IN ('Children', 'Music', 'Shoes')) AS t ON store_sales.ss_item_sk = t.i_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-03-04' AND d_date <= (DATE '1999-03-04' + 30 * INTERVAL '1' DAY)) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk GROUP BY t.i_item_id, t.i_item_desc, t.i_current_price, t.i_class, t.i_category ORDER BY t.i_category, t.i_class, t.i_item_id, t.i_item_desc, 7
with cross_items as (select i_item_sk ss_item_sk from item, (select iss.i_brand_id brand_id ,iss.i_class_id class_id ,iss.i_category_id category_id from store_sales ,item iss ,date_dim d1 where ss_item_sk = iss.i_item_sk and ss_sold_date_sk = d1.d_date_sk and d1.d_year between 1999 AND 1999 + 2 intersect select ics.i_brand_id ,ics.i_class_id ,ics.i_category_id from catalog_sales ,item ics ,date_dim d2 where cs_item_sk = ics.i_item_sk and cs_sold_date_sk = d2.d_date_sk and d2.d_year between 1999 AND 1999 + 2 intersect select iws.i_brand_id ,iws.i_class_id ,iws.i_category_id from web_sales ,item iws ,date_dim d3 where ws_item_sk = iws.i_item_sk and ws_sold_date_sk = d3.d_date_sk and d3.d_year between 1999 AND 1999 + 2) x where i_brand_id = brand_id and i_class_id = class_id and i_category_id = category_id ), avg_sales as (select avg(quantity*list_price) average_sales from (select ss_quantity quantity ,ss_list_price list_price from store_sales ,date_dim where ss_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2 union all select cs_quantity quantity ,cs_list_price list_price from catalog_sales ,date_dim where cs_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2 union all select ws_quantity quantity ,ws_list_price list_price from web_sales ,date_dim where ws_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2) x) select * from (select 'store' channel, i_brand_id,i_class_id,i_category_id ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales from store_sales ,item ,date_dim where ss_item_sk in (select ss_item_sk from cross_items) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_week_seq = (select d_week_seq from date_dim where d_year = 1998 + 1 and d_moy = 12 and d_dom = 9) group by i_brand_id,i_class_id,i_category_id having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year, (select 'store' channel, i_brand_id,i_class_id ,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales from store_sales ,item ,date_dim where ss_item_sk in (select ss_item_sk from cross_items) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_week_seq = (select d_week_seq from date_dim where d_year = 1998 and d_moy = 12 and d_dom = 9) group by i_brand_id,i_class_id,i_category_id having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year where this_year.i_brand_id= last_year.i_brand_id and this_year.i_class_id = last_year.i_class_id and this_year.i_category_id = last_year.i_category_id order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id limit 100
SELECT * FROM (SELECT 'store' AS CHANNEL, item3.i_brand_id AS I_BRAND_ID, item3.i_class_id AS I_CLASS_ID, item3.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t9.ss_quantity * t9.ss_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t9.ss_quantity * t9.ss_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM store_sales WHERE ss_item_sk IN (SELECT item.i_item_sk AS SS_ITEM_SK FROM item, (SELECT * FROM (SELECT item0.i_brand_id AS BRAND_ID, item0.i_class_id AS CLASS_ID, item0.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales0, item AS item0, date_dim WHERE store_sales0.ss_item_sk = item0.i_item_sk AND store_sales0.ss_sold_date_sk = date_dim.d_date_sk AND date_dim.d_year >= 1999 AND date_dim.d_year <= 1999 + 2 INTERSECT SELECT item1.i_brand_id AS I_BRAND_ID, item1.i_class_id AS I_CLASS_ID, item1.i_category_id AS I_CATEGORY_ID FROM catalog_sales, item AS item1, date_dim AS date_dim0 WHERE catalog_sales.cs_item_sk = item1.i_item_sk AND catalog_sales.cs_sold_date_sk = date_dim0.d_date_sk AND date_dim0.d_year >= 1999 AND date_dim0.d_year <= 1999 + 2) INTERSECT SELECT item2.i_brand_id AS I_BRAND_ID, item2.i_class_id AS I_CLASS_ID, item2.i_category_id AS I_CATEGORY_ID FROM web_sales, item AS item2, date_dim AS date_dim1 WHERE web_sales.ws_item_sk = item2.i_item_sk AND web_sales.ws_sold_date_sk = date_dim1.d_date_sk AND date_dim1.d_year >= 1999 AND date_dim1.d_year <= 1999 + 2) AS t6 WHERE item.i_brand_id = t6.BRAND_ID AND item.i_class_id = t6.CLASS_ID AND item.i_category_id = t6.CATEGORY_ID)) AS t9 INNER JOIN (SELECT * FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_year = 1998 + 1 AND d_moy = 12 AND d_dom = 9)))) AS t12 ON t9.ss_sold_date_sk = t12.d_date_sk INNER JOIN item AS item3 ON t9.ss_item_sk = item3.i_item_sk GROUP BY item3.i_brand_id, item3.i_class_id, item3.i_category_id HAVING CASE WHEN COUNT(t9.ss_quantity * t9.ss_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t9.ss_quantity * t9.ss_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales1.ss_quantity AS QUANTITY, store_sales1.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales1, date_dim AS date_dim4 WHERE store_sales1.ss_sold_date_sk = date_dim4.d_date_sk AND date_dim4.d_year >= 1998 AND date_dim4.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales0.cs_quantity AS QUANTITY, catalog_sales0.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales0, date_dim AS date_dim5 WHERE catalog_sales0.cs_sold_date_sk = date_dim5.d_date_sk AND date_dim5.d_year >= 1998 AND date_dim5.d_year <= 1998 + 2) UNION ALL SELECT web_sales0.ws_quantity AS QUANTITY, web_sales0.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales0, date_dim AS date_dim6 WHERE web_sales0.ws_sold_date_sk = date_dim6.d_date_sk AND date_dim6.d_year >= 1998 AND date_dim6.d_year <= 1998 + 2) AS t22))) END) AS t27 INNER JOIN (SELECT 'store' AS CHANNEL, item8.i_brand_id AS I_BRAND_ID, item8.i_class_id AS I_CLASS_ID, item8.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t38.ss_quantity * t38.ss_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t38.ss_quantity * t38.ss_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM store_sales WHERE ss_item_sk IN (SELECT item4.i_item_sk AS SS_ITEM_SK FROM item AS item4, (SELECT * FROM (SELECT item5.i_brand_id AS BRAND_ID, item5.i_class_id AS CLASS_ID, item5.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales3, item AS item5, date_dim AS date_dim7 WHERE store_sales3.ss_item_sk = item5.i_item_sk AND store_sales3.ss_sold_date_sk = date_dim7.d_date_sk AND date_dim7.d_year >= 1999 AND date_dim7.d_year <= 1999 + 2 INTERSECT SELECT item6.i_brand_id AS I_BRAND_ID, item6.i_class_id AS I_CLASS_ID, item6.i_category_id AS I_CATEGORY_ID FROM catalog_sales AS catalog_sales1, item AS item6, date_dim AS date_dim8 WHERE catalog_sales1.cs_item_sk = item6.i_item_sk AND catalog_sales1.cs_sold_date_sk = date_dim8.d_date_sk AND date_dim8.d_year >= 1999 AND date_dim8.d_year <= 1999 + 2) INTERSECT SELECT item7.i_brand_id AS I_BRAND_ID, item7.i_class_id AS I_CLASS_ID, item7.i_category_id AS I_CATEGORY_ID FROM web_sales AS web_sales1, item AS item7, date_dim AS date_dim9 WHERE web_sales1.ws_item_sk = item7.i_item_sk AND web_sales1.ws_sold_date_sk = date_dim9.d_date_sk AND date_dim9.d_year >= 1999 AND date_dim9.d_year <= 1999 + 2) AS t35 WHERE item4.i_brand_id = t35.BRAND_ID AND item4.i_class_id = t35.CLASS_ID AND item4.i_category_id = t35.CATEGORY_ID)) AS t38 INNER JOIN (SELECT * FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_year = 1998 AND d_moy = 12 AND d_dom = 9)))) AS t41 ON t38.ss_sold_date_sk = t41.d_date_sk INNER JOIN item AS item8 ON t38.ss_item_sk = item8.i_item_sk GROUP BY item8.i_brand_id, item8.i_class_id, item8.i_category_id HAVING CASE WHEN COUNT(t38.ss_quantity * t38.ss_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t38.ss_quantity * t38.ss_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales4.ss_quantity AS QUANTITY, store_sales4.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales4, date_dim AS date_dim12 WHERE store_sales4.ss_sold_date_sk = date_dim12.d_date_sk AND date_dim12.d_year >= 1998 AND date_dim12.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales2.cs_quantity AS QUANTITY, catalog_sales2.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales2, date_dim AS date_dim13 WHERE catalog_sales2.cs_sold_date_sk = date_dim13.d_date_sk AND date_dim13.d_year >= 1998 AND date_dim13.d_year <= 1998 + 2) UNION ALL SELECT web_sales2.ws_quantity AS QUANTITY, web_sales2.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales2, date_dim AS date_dim14 WHERE web_sales2.ws_sold_date_sk = date_dim14.d_date_sk AND date_dim14.d_year >= 1998 AND date_dim14.d_year <= 1998 + 2) AS t51))) END) AS t56 ON t27.I_BRAND_ID = t56.I_BRAND_ID AND t27.I_CLASS_ID = t56.I_CLASS_ID AND t27.I_CATEGORY_ID = t56.I_CATEGORY_ID ORDER BY t27.CHANNEL, t27.I_BRAND_ID, t27.I_CLASS_ID, t27.I_CATEGORY_ID FETCH NEXT 100 ROWS ONLY
WITH web_v1 as ( select ws_item_sk item_sk, d_date, sum(sum(ws_sales_price)) over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales from web_sales ,date_dim where ws_sold_date_sk=d_date_sk and d_month_seq between 1182 and 1182+11 and ws_item_sk is not NULL group by ws_item_sk, d_date), store_v1 as ( select ss_item_sk item_sk, d_date, sum(sum(ss_sales_price)) over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales from store_sales ,date_dim where ss_sold_date_sk=d_date_sk and d_month_seq between 1182 and 1182+11 and ss_item_sk is not NULL group by ss_item_sk, d_date) select * from (select item_sk ,d_date ,web_sales ,store_sales ,max(web_sales) over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative ,max(store_sales) over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk ,case when web.d_date is not null then web.d_date else store.d_date end d_date ,web.cume_sales web_sales ,store.cume_sales store_sales from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk and web.d_date = store.d_date) )x )y where web_cumulative > store_cumulative order by item_sk ,d_date limit 100
SELECT * FROM (SELECT CASE WHEN t1.ITEM_SK IS NOT NULL THEN t1.ITEM_SK ELSE t4.ITEM_SK END AS ITEM_SK, CASE WHEN t1.D_DATE IS NOT NULL THEN t1.D_DATE ELSE t4.D_DATE END AS D_DATE, t1.CUME_SALES AS WEB_SALES, t4.CUME_SALES AS STORE_SALES, MAX(t1.CUME_SALES) OVER (PARTITION BY CASE WHEN t1.ITEM_SK IS NOT NULL THEN t1.ITEM_SK ELSE t4.ITEM_SK END ORDER BY CASE WHEN t1.D_DATE IS NOT NULL THEN t1.D_DATE ELSE t4.D_DATE END ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS WEB_CUMULATIVE, MAX(t4.CUME_SALES) OVER (PARTITION BY CASE WHEN t1.ITEM_SK IS NOT NULL THEN t1.ITEM_SK ELSE t4.ITEM_SK END ORDER BY CASE WHEN t1.D_DATE IS NOT NULL THEN t1.D_DATE ELSE t4.D_DATE END ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS STORE_CUMULATIVE FROM (SELECT web_sales.ws_item_sk AS ITEM_SK, t.d_date AS D_DATE, CASE WHEN (COUNT(SUM(web_sales.ws_sales_price)) OVER (PARTITION BY web_sales.ws_item_sk ORDER BY t.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) > 0 THEN COALESCE(SUM(SUM(web_sales.ws_sales_price)) OVER (PARTITION BY web_sales.ws_item_sk ORDER BY t.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) ELSE NULL END AS CUME_SALES FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1182 AND d_month_seq <= 1182 + 11) AS t ON web_sales.ws_sold_date_sk = t.d_date_sk GROUP BY web_sales.ws_item_sk, t.d_date) AS t1 FULL JOIN (SELECT store_sales.ss_item_sk AS ITEM_SK, t2.d_date AS D_DATE, CASE WHEN (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY store_sales.ss_item_sk ORDER BY t2.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) > 0 THEN COALESCE(SUM(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY store_sales.ss_item_sk ORDER BY t2.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) ELSE NULL END AS CUME_SALES FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1182 AND d_month_seq <= 1182 + 11) AS t2 ON store_sales.ss_sold_date_sk = t2.d_date_sk GROUP BY store_sales.ss_item_sk, t2.d_date) AS t4 ON t1.ITEM_SK = t4.ITEM_SK AND t1.D_DATE = t4.D_DATE) AS t5 WHERE t5.WEB_CUMULATIVE > t5.STORE_CUMULATIVE ORDER BY ITEM_SK, D_DATE FETCH NEXT 100 ROWS ONLY
select dt.d_year ,item.i_brand_id brand_id ,item.i_brand brand ,sum(ss_ext_sales_price) ext_price from date_dim dt ,store_sales ,item where dt.d_date_sk = store_sales.ss_sold_date_sk and store_sales.ss_item_sk = item.i_item_sk and item.i_manager_id = 1 and dt.d_moy=11 and dt.d_year=1998 group by dt.d_year ,item.i_brand ,item.i_brand_id order by dt.d_year ,ext_price desc ,brand_id limit 100
SELECT t.d_year, t0.i_brand_id, t0.i_brand, SUM(store_sales.ss_ext_sales_price) AS EXT_PRICE FROM (SELECT * FROM date_dim WHERE d_moy = 11 AND d_year = 1998) AS t INNER JOIN store_sales ON t.d_date_sk = store_sales.ss_sold_date_sk INNER JOIN (SELECT * FROM item WHERE i_manager_id = 1) AS t0 ON store_sales.ss_item_sk = t0.i_item_sk GROUP BY t.d_year, t0.i_brand_id, t0.i_brand ORDER BY t.d_year, 4 DESC, t0.i_brand_id FETCH NEXT 100 ROWS ONLY
select i_item_id ,i_item_desc ,s_store_id ,s_store_name ,min(ss_quantity) as store_sales_quantity ,min(sr_return_quantity) as store_returns_quantity ,min(cs_quantity) as catalog_sales_quantity from store_sales ,store_returns ,catalog_sales ,date_dim d1 ,date_dim d2 ,date_dim d3 ,store ,item where d1.d_moy = 4 and d1.d_year = 2000 and d1.d_date_sk = ss_sold_date_sk and i_item_sk = ss_item_sk and s_store_sk = ss_store_sk and ss_customer_sk = sr_customer_sk and ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number and sr_returned_date_sk = d2.d_date_sk and d2.d_moy between 4 and 4 + 3 and d2.d_year = 2000 and sr_customer_sk = cs_bill_customer_sk and sr_item_sk = cs_item_sk and cs_sold_date_sk = d3.d_date_sk and d3.d_year in (2000,2000+1,2000+2) group by i_item_id ,i_item_desc ,s_store_id ,s_store_name order by i_item_id ,i_item_desc ,s_store_id ,s_store_name limit 100
SELECT item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name, MIN(t0.ss_quantity) AS STORE_SALES_QUANTITY, MIN(t0.sr_return_quantity) AS STORE_RETURNS_QUANTITY, MIN(t0.cs_quantity) AS CATALOG_SALES_QUANTITY FROM item INNER JOIN ((SELECT store_sales.ss_sold_date_sk, store_sales.ss_sold_time_sk, store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_cdemo_sk, store_sales.ss_hdemo_sk, store_sales.ss_addr_sk, store_sales.ss_store_sk, store_sales.ss_promo_sk, store_sales.ss_ticket_number, store_sales.ss_quantity, store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_sales_price, store_sales.ss_ext_discount_amt, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_ext_list_price, store_sales.ss_ext_tax, store_sales.ss_coupon_amt, store_sales.ss_net_paid, store_sales.ss_net_paid_inc_tax, store_sales.ss_net_profit, store_returns.sr_returned_date_sk, store_returns.sr_return_time_sk, store_returns.sr_item_sk, store_returns.sr_customer_sk, store_returns.sr_cdemo_sk, store_returns.sr_hdemo_sk, store_returns.sr_addr_sk, store_returns.sr_store_sk, store_returns.sr_reason_sk, store_returns.sr_ticket_number, store_returns.sr_return_quantity, store_returns.sr_return_amt, store_returns.sr_return_tax, store_returns.sr_return_amt_inc_tax, store_returns.sr_fee, store_returns.sr_return_ship_cost, store_returns.sr_refunded_cash, store_returns.sr_reversed_charge, store_returns.sr_store_credit, store_returns.sr_net_loss, catalog_sales.cs_sold_date_sk, catalog_sales.cs_sold_time_sk, catalog_sales.cs_ship_date_sk, catalog_sales.cs_bill_customer_sk, catalog_sales.cs_bill_cdemo_sk, catalog_sales.cs_bill_hdemo_sk, catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ship_customer_sk, catalog_sales.cs_ship_cdemo_sk, catalog_sales.cs_ship_hdemo_sk, catalog_sales.cs_ship_addr_sk, catalog_sales.cs_call_center_sk, catalog_sales.cs_catalog_page_sk, catalog_sales.cs_ship_mode_sk, catalog_sales.cs_warehouse_sk, catalog_sales.cs_item_sk, catalog_sales.cs_promo_sk, catalog_sales.cs_order_number, catalog_sales.cs_quantity, catalog_sales.cs_wholesale_cost, catalog_sales.cs_list_price, catalog_sales.cs_sales_price, catalog_sales.cs_ext_discount_amt, catalog_sales.cs_ext_sales_price, catalog_sales.cs_ext_wholesale_cost, catalog_sales.cs_ext_list_price, catalog_sales.cs_ext_tax, catalog_sales.cs_coupon_amt, catalog_sales.cs_ext_ship_cost, catalog_sales.cs_net_paid, catalog_sales.cs_net_paid_inc_tax, catalog_sales.cs_net_paid_inc_ship, catalog_sales.cs_net_paid_inc_ship_tax, catalog_sales.cs_net_profit, t.d_date_sk, t.d_date_id, t.d_date, t.d_month_seq, t.d_week_seq, t.d_quarter_seq, t.d_year, t.d_dow, t.d_moy, t.d_dom, t.d_qoy, t.d_fy_year, t.d_fy_quarter_seq, t.d_fy_week_seq, t.d_day_name, t.d_quarter_name, t.d_holiday, t.d_weekend, t.d_following_holiday, t.d_first_dom, t.d_last_dom, t.d_same_day_ly, t.d_same_day_lq, t.d_current_day, t.d_current_week, t.d_current_month, t.d_current_quarter, t.d_current_year FROM store_sales INNER JOIN store_returns ON store_sales.ss_customer_sk = store_returns.sr_customer_sk AND store_sales.ss_item_sk = store_returns.sr_item_sk AND store_sales.ss_ticket_number = store_returns.sr_ticket_number INNER JOIN (SELECT * FROM date_dim WHERE d_moy = 4 AND d_year = 2000) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN catalog_sales ON store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk AND store_returns.sr_item_sk = catalog_sales.cs_item_sk) AS t0 INNER JOIN (SELECT * FROM date_dim WHERE d_moy >= 4 AND d_moy <= 4 + 3 AND d_year = 2000) AS t1 ON t0.sr_returned_date_sk = t1.d_date_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2000 OR d_year = 2000 + 1 OR d_year = 2000 + 2) AS t2 ON t0.cs_sold_date_sk = t2.d_date_sk INNER JOIN store ON t0.ss_store_sk = store.s_store_sk) ON item.i_item_sk = t0.ss_item_sk GROUP BY item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name ORDER BY item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name FETCH NEXT 100 ROWS ONLY
with v1 as( select i_category, i_brand, cc_name, d_year, d_moy, sum(cs_sales_price) sum_sales, avg(sum(cs_sales_price)) over (partition by i_category, i_brand, cc_name, d_year) avg_monthly_sales, rank() over (partition by i_category, i_brand, cc_name order by d_year, d_moy) rn from item, catalog_sales, date_dim, call_center where cs_item_sk = i_item_sk and cs_sold_date_sk = d_date_sk and cc_call_center_sk= cs_call_center_sk and ( d_year = 1999 or ( d_year = 1999-1 and d_moy =12) or ( d_year = 1999+1 and d_moy =1) ) group by i_category, i_brand, cc_name , d_year, d_moy), v2 as( select v1.i_brand ,v1.d_year, v1.d_moy ,v1.avg_monthly_sales ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum from v1, v1 v1_lag, v1 v1_lead where v1.i_category = v1_lag.i_category and v1.i_category = v1_lead.i_category and v1.i_brand = v1_lag.i_brand and v1.i_brand = v1_lead.i_brand and v1. cc_name = v1_lag. cc_name and v1. cc_name = v1_lead. cc_name and v1.rn = v1_lag.rn + 1 and v1.rn = v1_lead.rn - 1) select * from v2 where d_year = 1999 and avg_monthly_sales > 0 and case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1 order by sum_sales - avg_monthly_sales, sum_sales limit 100
SELECT t2.I_BRAND, t2.D_YEAR, t2.D_MOY, t2.AVG_MONTHLY_SALES, t2.SUM_SALES, t5.SUM_SALES AS PSUM, t8.SUM_SALES AS NSUM, t2.SUM_SALES - t2.AVG_MONTHLY_SALES FROM (SELECT * FROM (SELECT item.i_category AS I_CATEGORY, item.i_brand AS I_BRAND, call_center.cc_name AS CC_NAME, t.d_year AS D_YEAR, t.d_moy AS D_MOY, SUM(catalog_sales.cs_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(catalog_sales.cs_sales_price)) OVER (PARTITION BY item.i_category, item.i_brand, call_center.cc_name, t.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(catalog_sales.cs_sales_price)) OVER (PARTITION BY item.i_category, item.i_brand, call_center.cc_name, t.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(catalog_sales.cs_sales_price)) OVER (PARTITION BY item.i_category, item.i_brand, call_center.cc_name, t.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES, RANK() OVER (PARTITION BY item.i_category, item.i_brand, call_center.cc_name ORDER BY t.d_year, t.d_moy) AS RN FROM item INNER JOIN catalog_sales ON item.i_item_sk = catalog_sales.cs_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1999 OR d_year = 1999 - 1 AND d_moy = 12 OR d_year = 1999 + 1 AND d_moy = 1) AS t ON catalog_sales.cs_sold_date_sk = t.d_date_sk INNER JOIN call_center ON catalog_sales.cs_call_center_sk = call_center.cc_call_center_sk GROUP BY item.i_brand, item.i_category, t.d_year, t.d_moy, call_center.cc_name) AS t1 WHERE t1.D_YEAR = 1999 AND t1.AVG_MONTHLY_SALES > 0 AND CASE WHEN t1.AVG_MONTHLY_SALES > 0 THEN ABS(t1.SUM_SALES - t1.AVG_MONTHLY_SALES) / t1.AVG_MONTHLY_SALES > 0.1 ELSE FALSE END) AS t2 INNER JOIN (SELECT item0.i_category AS I_CATEGORY, item0.i_brand AS I_BRAND, call_center0.cc_name AS CC_NAME, t3.d_year AS D_YEAR, t3.d_moy AS D_MOY, SUM(catalog_sales0.cs_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(catalog_sales0.cs_sales_price)) OVER (PARTITION BY item0.i_category, item0.i_brand, call_center0.cc_name, t3.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(catalog_sales0.cs_sales_price)) OVER (PARTITION BY item0.i_category, item0.i_brand, call_center0.cc_name, t3.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(catalog_sales0.cs_sales_price)) OVER (PARTITION BY item0.i_category, item0.i_brand, call_center0.cc_name, t3.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES, RANK() OVER (PARTITION BY item0.i_category, item0.i_brand, call_center0.cc_name ORDER BY t3.d_year, t3.d_moy) AS RN FROM item AS item0 INNER JOIN catalog_sales AS catalog_sales0 ON item0.i_item_sk = catalog_sales0.cs_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1999 OR d_year = 1999 - 1 AND d_moy = 12 OR d_year = 1999 + 1 AND d_moy = 1) AS t3 ON catalog_sales0.cs_sold_date_sk = t3.d_date_sk INNER JOIN call_center AS call_center0 ON catalog_sales0.cs_call_center_sk = call_center0.cc_call_center_sk GROUP BY item0.i_brand, item0.i_category, t3.d_year, t3.d_moy, call_center0.cc_name) AS t5 ON t2.I_CATEGORY = t5.I_CATEGORY AND t2.I_BRAND = t5.I_BRAND AND t2.CC_NAME = t5.CC_NAME AND t2.RN = t5.RN + 1 INNER JOIN (SELECT item1.i_category AS I_CATEGORY, item1.i_brand AS I_BRAND, call_center1.cc_name AS CC_NAME, t6.d_year AS D_YEAR, t6.d_moy AS D_MOY, SUM(catalog_sales1.cs_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(catalog_sales1.cs_sales_price)) OVER (PARTITION BY item1.i_category, item1.i_brand, call_center1.cc_name, t6.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(catalog_sales1.cs_sales_price)) OVER (PARTITION BY item1.i_category, item1.i_brand, call_center1.cc_name, t6.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(catalog_sales1.cs_sales_price)) OVER (PARTITION BY item1.i_category, item1.i_brand, call_center1.cc_name, t6.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES, RANK() OVER (PARTITION BY item1.i_category, item1.i_brand, call_center1.cc_name ORDER BY t6.d_year, t6.d_moy) AS RN FROM item AS item1 INNER JOIN catalog_sales AS catalog_sales1 ON item1.i_item_sk = catalog_sales1.cs_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1999 OR d_year = 1999 - 1 AND d_moy = 12 OR d_year = 1999 + 1 AND d_moy = 1) AS t6 ON catalog_sales1.cs_sold_date_sk = t6.d_date_sk INNER JOIN call_center AS call_center1 ON catalog_sales1.cs_call_center_sk = call_center1.cc_call_center_sk GROUP BY item1.i_brand, item1.i_category, t6.d_year, t6.d_moy, call_center1.cc_name) AS t8 ON t2.I_CATEGORY = t8.I_CATEGORY AND t2.I_BRAND = t8.I_BRAND AND t2.CC_NAME = t8.CC_NAME AND t2.RN = t8.RN - 1 ORDER BY 8, t2.SUM_SALES FETCH NEXT 100 ROWS ONLY
select i_item_id ,i_item_desc ,i_current_price from item, inventory, date_dim, catalog_sales where i_current_price between 47 and 47 + 30 and inv_item_sk = i_item_sk and d_date_sk=inv_date_sk and d_date between cast('2001-01-12' as date) and (cast('2001-01-12' as date) + interval 60 days) and i_manufact_id in (995,847,740,882) and inv_quantity_on_hand between 100 and 500 and cs_item_sk = i_item_sk group by i_item_id,i_item_desc,i_current_price order by i_item_id limit 100
SELECT t.i_item_id, t.i_item_desc, t.i_current_price FROM (SELECT * FROM item WHERE i_current_price >= 47 AND i_current_price <= 47 + 30 AND i_manufact_id IN (740, 847, 882, 995)) AS t INNER JOIN (SELECT * FROM inventory WHERE inv_quantity_on_hand >= 100 AND inv_quantity_on_hand <= 500) AS t0 ON t.i_item_sk = t0.inv_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2001-01-12' AND d_date <= (DATE '2001-01-12' + 60 * INTERVAL '1' DAY)) AS t1 ON t0.inv_date_sk = t1.d_date_sk INNER JOIN catalog_sales ON t.i_item_sk = catalog_sales.cs_item_sk GROUP BY t.i_item_id, t.i_item_desc, t.i_current_price ORDER BY t.i_item_id FETCH NEXT 100 ROWS ONLY
select c_last_name ,c_first_name ,ca_city ,bought_city ,ss_ticket_number ,extended_price ,extended_tax ,list_price from (select ss_ticket_number ,ss_customer_sk ,ca_city bought_city ,sum(ss_ext_sales_price) extended_price ,sum(ss_ext_list_price) list_price ,sum(ss_ext_tax) extended_tax from store_sales ,date_dim ,store ,household_demographics ,customer_address where store_sales.ss_sold_date_sk = date_dim.d_date_sk and store_sales.ss_store_sk = store.s_store_sk and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk and store_sales.ss_addr_sk = customer_address.ca_address_sk and date_dim.d_dom between 1 and 2 and (household_demographics.hd_dep_count = 7 or household_demographics.hd_vehicle_count= 2) and date_dim.d_year in (1999,1999+1,1999+2) and store.s_city in ('Fairview','Midway') group by ss_ticket_number ,ss_customer_sk ,ss_addr_sk,ca_city) dn ,customer ,customer_address current_addr where ss_customer_sk = c_customer_sk and customer.c_current_addr_sk = current_addr.ca_address_sk and current_addr.ca_city <> bought_city order by c_last_name ,ss_ticket_number limit 100
SELECT customer.c_last_name AS C_LAST_NAME, customer.c_first_name AS C_FIRST_NAME, customer_address0.ca_city AS CA_CITY, t3.BOUGHT_CITY, t3.SS_TICKET_NUMBER, t3.EXTENDED_PRICE, t3.EXTENDED_TAX, t3.LIST_PRICE FROM (SELECT store_sales.ss_ticket_number AS SS_TICKET_NUMBER, store_sales.ss_customer_sk AS SS_CUSTOMER_SK, customer_address.ca_city AS BOUGHT_CITY, SUM(store_sales.ss_ext_sales_price) AS EXTENDED_PRICE, SUM(store_sales.ss_ext_list_price) AS LIST_PRICE, SUM(store_sales.ss_ext_tax) AS EXTENDED_TAX FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_dom >= 1 AND d_dom <= 2 AND (d_year = 1999 OR d_year = 1999 + 1 OR d_year = 1999 + 2)) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_city IN ('Fairview', 'Midway')) AS t0 ON store_sales.ss_store_sk = t0.s_store_sk INNER JOIN (SELECT * FROM household_demographics WHERE hd_dep_count = 7 OR hd_vehicle_count = 2) AS t1 ON store_sales.ss_hdemo_sk = t1.hd_demo_sk INNER JOIN customer_address ON store_sales.ss_addr_sk = customer_address.ca_address_sk GROUP BY store_sales.ss_customer_sk, store_sales.ss_addr_sk, store_sales.ss_ticket_number, customer_address.ca_city) AS t3 INNER JOIN (customer_address AS customer_address0 INNER JOIN customer ON customer_address0.ca_address_sk = customer.c_current_addr_sk) ON customer_address0.ca_city <> t3.BOUGHT_CITY AND t3.SS_CUSTOMER_SK = customer.c_customer_sk ORDER BY customer.c_last_name, t3.SS_TICKET_NUMBER FETCH NEXT 100 ROWS ONLY
with wss as (select d_week_seq, ss_store_sk, sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales, sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales, sum(case when (d_day_name='Tuesday') then ss_sales_price else null end) tue_sales, sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales, sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales, sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales, sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales from store_sales,date_dim where d_date_sk = ss_sold_date_sk group by d_week_seq,ss_store_sk ) select s_store_name1,s_store_id1,d_week_seq1 ,sun_sales1/sun_sales2,mon_sales1/mon_sales2 ,tue_sales1/tue_sales2,wed_sales1/wed_sales2,thu_sales1/thu_sales2 ,fri_sales1/fri_sales2,sat_sales1/sat_sales2 from (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1 ,s_store_id s_store_id1,sun_sales sun_sales1 ,mon_sales mon_sales1,tue_sales tue_sales1 ,wed_sales wed_sales1,thu_sales thu_sales1 ,fri_sales fri_sales1,sat_sales sat_sales1 from wss,store,date_dim d where d.d_week_seq = wss.d_week_seq and ss_store_sk = s_store_sk and d_month_seq between 1180 and 1180 + 11) y, (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2 ,s_store_id s_store_id2,sun_sales sun_sales2 ,mon_sales mon_sales2,tue_sales tue_sales2 ,wed_sales wed_sales2,thu_sales thu_sales2 ,fri_sales fri_sales2,sat_sales sat_sales2 from wss,store,date_dim d where d.d_week_seq = wss.d_week_seq and ss_store_sk = s_store_sk and d_month_seq between 1180+ 12 and 1180 + 23) x where s_store_id1=s_store_id2 and d_week_seq1=d_week_seq2-52 order by s_store_name1,s_store_id1,d_week_seq1 limit 100
SELECT t2.S_STORE_NAME1, t2.S_STORE_ID1, t2.D_WEEK_SEQ1, t2.SUN_SALES1 / t6.SUN_SALES2, t2.MON_SALES1 / t6.MON_SALES2, t2.TUE_SALES1 / t6.TUE_SALES2, t2.WED_SALES1 / t6.WED_SALES2, t2.THU_SALES1 / t6.THU_SALES2, t2.FRI_SALES1 / t6.FRI_SALES2, t2.SAT_SALES1 / t6.SAT_SALES2 FROM (SELECT store.s_store_name AS S_STORE_NAME1, t0.D_WEEK_SEQ AS D_WEEK_SEQ1, store.s_store_id AS S_STORE_ID1, t0.SUN_SALES AS SUN_SALES1, t0.MON_SALES AS MON_SALES1, t0.TUE_SALES AS TUE_SALES1, t0.WED_SALES AS WED_SALES1, t0.THU_SALES AS THU_SALES1, t0.FRI_SALES AS FRI_SALES1, t0.SAT_SALES AS SAT_SALES1 FROM (SELECT date_dim.d_week_seq AS D_WEEK_SEQ, store_sales.ss_store_sk AS SS_STORE_SK, SUM(CASE WHEN date_dim.d_day_name = 'Sunday' THEN store_sales.ss_sales_price ELSE NULL END) AS SUN_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Monday' THEN store_sales.ss_sales_price ELSE NULL END) AS MON_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Tuesday' THEN store_sales.ss_sales_price ELSE NULL END) AS TUE_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Wednesday' THEN store_sales.ss_sales_price ELSE NULL END) AS WED_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Thursday' THEN store_sales.ss_sales_price ELSE NULL END) AS THU_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Friday' THEN store_sales.ss_sales_price ELSE NULL END) AS FRI_SALES, SUM(CASE WHEN date_dim.d_day_name = 'Saturday' THEN store_sales.ss_sales_price ELSE NULL END) AS SAT_SALES FROM store_sales INNER JOIN date_dim ON store_sales.ss_sold_date_sk = date_dim.d_date_sk GROUP BY date_dim.d_week_seq, store_sales.ss_store_sk) AS t0 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1180 AND d_month_seq <= 1180 + 11) AS t1 ON t0.D_WEEK_SEQ = t1.d_week_seq INNER JOIN store ON t0.SS_STORE_SK = store.s_store_sk) AS t2 INNER JOIN (SELECT store0.s_store_name AS S_STORE_NAME2, t4.D_WEEK_SEQ AS D_WEEK_SEQ2, store0.s_store_id AS S_STORE_ID2, t4.SUN_SALES AS SUN_SALES2, t4.MON_SALES AS MON_SALES2, t4.TUE_SALES AS TUE_SALES2, t4.WED_SALES AS WED_SALES2, t4.THU_SALES AS THU_SALES2, t4.FRI_SALES AS FRI_SALES2, t4.SAT_SALES AS SAT_SALES2 FROM (SELECT date_dim1.d_week_seq AS D_WEEK_SEQ, store_sales0.ss_store_sk AS SS_STORE_SK, SUM(CASE WHEN date_dim1.d_day_name = 'Sunday' THEN store_sales0.ss_sales_price ELSE NULL END) AS SUN_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Monday' THEN store_sales0.ss_sales_price ELSE NULL END) AS MON_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Tuesday' THEN store_sales0.ss_sales_price ELSE NULL END) AS TUE_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Wednesday' THEN store_sales0.ss_sales_price ELSE NULL END) AS WED_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Thursday' THEN store_sales0.ss_sales_price ELSE NULL END) AS THU_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Friday' THEN store_sales0.ss_sales_price ELSE NULL END) AS FRI_SALES, SUM(CASE WHEN date_dim1.d_day_name = 'Saturday' THEN store_sales0.ss_sales_price ELSE NULL END) AS SAT_SALES FROM store_sales AS store_sales0 INNER JOIN date_dim AS date_dim1 ON store_sales0.ss_sold_date_sk = date_dim1.d_date_sk GROUP BY date_dim1.d_week_seq, store_sales0.ss_store_sk) AS t4 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1180 + 12 AND d_month_seq <= 1180 + 23) AS t5 ON t4.D_WEEK_SEQ = t5.d_week_seq INNER JOIN store AS store0 ON t4.SS_STORE_SK = store0.s_store_sk) AS t6 ON t2.S_STORE_ID1 = t6.S_STORE_ID2 AND t2.D_WEEK_SEQ1 = t6.D_WEEK_SEQ2 - 52 ORDER BY t2.S_STORE_NAME1, t2.S_STORE_ID1, t2.D_WEEK_SEQ1 FETCH NEXT 100 ROWS ONLY
select i_item_id ,i_item_desc ,s_store_id ,s_store_name ,avg(ss_net_profit) as store_sales_profit ,avg(sr_net_loss) as store_returns_loss ,avg(cs_net_profit) as catalog_sales_profit from store_sales ,store_returns ,catalog_sales ,date_dim d1 ,date_dim d2 ,date_dim d3 ,store ,item where d1.d_moy = 4 and d1.d_year = 1999 and d1.d_date_sk = ss_sold_date_sk and i_item_sk = ss_item_sk and s_store_sk = ss_store_sk and ss_customer_sk = sr_customer_sk and ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number and sr_returned_date_sk = d2.d_date_sk and d2.d_moy between 4 and 10 and d2.d_year = 1999 and sr_customer_sk = cs_bill_customer_sk and sr_item_sk = cs_item_sk and cs_sold_date_sk = d3.d_date_sk and d3.d_moy between 4 and 10 and d3.d_year = 1999 group by i_item_id ,i_item_desc ,s_store_id ,s_store_name order by i_item_id ,i_item_desc ,s_store_id ,s_store_name limit 100
SELECT item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name, AVG(t0.ss_net_profit) AS STORE_SALES_PROFIT, AVG(t0.sr_net_loss) AS STORE_RETURNS_LOSS, AVG(t0.cs_net_profit) AS CATALOG_SALES_PROFIT FROM item INNER JOIN ((SELECT store_sales.ss_sold_date_sk, store_sales.ss_sold_time_sk, store_sales.ss_item_sk, store_sales.ss_customer_sk, store_sales.ss_cdemo_sk, store_sales.ss_hdemo_sk, store_sales.ss_addr_sk, store_sales.ss_store_sk, store_sales.ss_promo_sk, store_sales.ss_ticket_number, store_sales.ss_quantity, store_sales.ss_wholesale_cost, store_sales.ss_list_price, store_sales.ss_sales_price, store_sales.ss_ext_discount_amt, store_sales.ss_ext_sales_price, store_sales.ss_ext_wholesale_cost, store_sales.ss_ext_list_price, store_sales.ss_ext_tax, store_sales.ss_coupon_amt, store_sales.ss_net_paid, store_sales.ss_net_paid_inc_tax, store_sales.ss_net_profit, store_returns.sr_returned_date_sk, store_returns.sr_return_time_sk, store_returns.sr_item_sk, store_returns.sr_customer_sk, store_returns.sr_cdemo_sk, store_returns.sr_hdemo_sk, store_returns.sr_addr_sk, store_returns.sr_store_sk, store_returns.sr_reason_sk, store_returns.sr_ticket_number, store_returns.sr_return_quantity, store_returns.sr_return_amt, store_returns.sr_return_tax, store_returns.sr_return_amt_inc_tax, store_returns.sr_fee, store_returns.sr_return_ship_cost, store_returns.sr_refunded_cash, store_returns.sr_reversed_charge, store_returns.sr_store_credit, store_returns.sr_net_loss, catalog_sales.cs_sold_date_sk, catalog_sales.cs_sold_time_sk, catalog_sales.cs_ship_date_sk, catalog_sales.cs_bill_customer_sk, catalog_sales.cs_bill_cdemo_sk, catalog_sales.cs_bill_hdemo_sk, catalog_sales.cs_bill_addr_sk, catalog_sales.cs_ship_customer_sk, catalog_sales.cs_ship_cdemo_sk, catalog_sales.cs_ship_hdemo_sk, catalog_sales.cs_ship_addr_sk, catalog_sales.cs_call_center_sk, catalog_sales.cs_catalog_page_sk, catalog_sales.cs_ship_mode_sk, catalog_sales.cs_warehouse_sk, catalog_sales.cs_item_sk, catalog_sales.cs_promo_sk, catalog_sales.cs_order_number, catalog_sales.cs_quantity, catalog_sales.cs_wholesale_cost, catalog_sales.cs_list_price, catalog_sales.cs_sales_price, catalog_sales.cs_ext_discount_amt, catalog_sales.cs_ext_sales_price, catalog_sales.cs_ext_wholesale_cost, catalog_sales.cs_ext_list_price, catalog_sales.cs_ext_tax, catalog_sales.cs_coupon_amt, catalog_sales.cs_ext_ship_cost, catalog_sales.cs_net_paid, catalog_sales.cs_net_paid_inc_tax, catalog_sales.cs_net_paid_inc_ship, catalog_sales.cs_net_paid_inc_ship_tax, catalog_sales.cs_net_profit, t.d_date_sk, t.d_date_id, t.d_date, t.d_month_seq, t.d_week_seq, t.d_quarter_seq, t.d_year, t.d_dow, t.d_moy, t.d_dom, t.d_qoy, t.d_fy_year, t.d_fy_quarter_seq, t.d_fy_week_seq, t.d_day_name, t.d_quarter_name, t.d_holiday, t.d_weekend, t.d_following_holiday, t.d_first_dom, t.d_last_dom, t.d_same_day_ly, t.d_same_day_lq, t.d_current_day, t.d_current_week, t.d_current_month, t.d_current_quarter, t.d_current_year FROM store_sales INNER JOIN store_returns ON store_sales.ss_customer_sk = store_returns.sr_customer_sk AND store_sales.ss_item_sk = store_returns.sr_item_sk AND store_sales.ss_ticket_number = store_returns.sr_ticket_number INNER JOIN (SELECT * FROM date_dim WHERE d_moy = 4 AND d_year = 1999) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN catalog_sales ON store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk AND store_returns.sr_item_sk = catalog_sales.cs_item_sk) AS t0 INNER JOIN (SELECT * FROM date_dim WHERE d_moy >= 4 AND d_moy <= 10 AND d_year = 1999) AS t1 ON t0.sr_returned_date_sk = t1.d_date_sk INNER JOIN (SELECT * FROM date_dim WHERE d_moy >= 4 AND d_moy <= 10 AND d_year = 1999) AS t2 ON t0.cs_sold_date_sk = t2.d_date_sk INNER JOIN store ON t0.ss_store_sk = store.s_store_sk) ON item.i_item_sk = t0.ss_item_sk GROUP BY item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name ORDER BY item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name FETCH NEXT 100 ROWS ONLY
with sr_items as (select i_item_id item_id, sum(sr_return_quantity) sr_item_qty from store_returns, item, date_dim where sr_item_sk = i_item_sk and d_date in (select d_date from date_dim where d_week_seq in (select d_week_seq from date_dim where d_date in ('2001-02-07','2001-08-10','2001-11-06'))) and sr_returned_date_sk = d_date_sk group by i_item_id), cr_items as (select i_item_id item_id, sum(cr_return_quantity) cr_item_qty from catalog_returns, item, date_dim where cr_item_sk = i_item_sk and d_date in (select d_date from date_dim where d_week_seq in (select d_week_seq from date_dim where d_date in ('2001-02-07','2001-08-10','2001-11-06'))) and cr_returned_date_sk = d_date_sk group by i_item_id), wr_items as (select i_item_id item_id, sum(wr_return_quantity) wr_item_qty from web_returns, item, date_dim where wr_item_sk = i_item_sk and d_date in (select d_date from date_dim where d_week_seq in (select d_week_seq from date_dim where d_date in ('2001-02-07','2001-08-10','2001-11-06'))) and wr_returned_date_sk = d_date_sk group by i_item_id) select sr_items.item_id ,sr_item_qty ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev ,cr_item_qty ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev ,wr_item_qty ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average from sr_items ,cr_items ,wr_items where sr_items.item_id=cr_items.item_id and sr_items.item_id=wr_items.item_id order by sr_items.item_id ,sr_item_qty limit 100
SELECT t4.i_item_id AS ITEM_ID, t4.SR_ITEM_QTY, t4.SR_ITEM_QTY / (t4.SR_ITEM_QTY + t10.CR_ITEM_QTY + t16.WR_ITEM_QTY) / 3.0 * 100 AS SR_DEV, t10.CR_ITEM_QTY, t10.CR_ITEM_QTY / (t4.SR_ITEM_QTY + t10.CR_ITEM_QTY + t16.WR_ITEM_QTY) / 3.0 * 100 AS CR_DEV, t16.WR_ITEM_QTY, t16.WR_ITEM_QTY / (t4.SR_ITEM_QTY + t10.CR_ITEM_QTY + t16.WR_ITEM_QTY) / 3.0 * 100 AS WR_DEV, (t4.SR_ITEM_QTY + t10.CR_ITEM_QTY + t16.WR_ITEM_QTY) / 3.0 AS AVERAGE FROM (SELECT item.i_item_id, SUM(store_returns.sr_return_quantity) AS SR_ITEM_QTY FROM store_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date IN (SELECT d_date AS D_DATE FROM date_dim WHERE d_week_seq IN (SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_date = '2001-02-07' OR d_date = '2001-08-10' OR d_date = '2001-11-06'))) AS t3 ON store_returns.sr_returned_date_sk = t3.d_date_sk INNER JOIN item ON store_returns.sr_item_sk = item.i_item_sk GROUP BY item.i_item_id) AS t4 INNER JOIN (SELECT item0.i_item_id, SUM(catalog_returns.cr_return_quantity) AS CR_ITEM_QTY FROM catalog_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date IN (SELECT d_date AS D_DATE FROM date_dim WHERE d_week_seq IN (SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_date = '2001-02-07' OR d_date = '2001-08-10' OR d_date = '2001-11-06'))) AS t9 ON catalog_returns.cr_returned_date_sk = t9.d_date_sk INNER JOIN item AS item0 ON catalog_returns.cr_item_sk = item0.i_item_sk GROUP BY item0.i_item_id) AS t10 ON t4.i_item_id = t10.i_item_id INNER JOIN (SELECT item1.i_item_id, SUM(web_returns.wr_return_quantity) AS WR_ITEM_QTY FROM web_returns INNER JOIN (SELECT * FROM date_dim WHERE d_date IN (SELECT d_date AS D_DATE FROM date_dim WHERE d_week_seq IN (SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_date = '2001-02-07' OR d_date = '2001-08-10' OR d_date = '2001-11-06'))) AS t15 ON web_returns.wr_returned_date_sk = t15.d_date_sk INNER JOIN item AS item1 ON web_returns.wr_item_sk = item1.i_item_sk GROUP BY item1.i_item_id) AS t16 ON t4.i_item_id = t16.i_item_id ORDER BY t4.i_item_id, t4.SR_ITEM_QTY FETCH NEXT 100 ROWS ONLY
select i_item_id ,i_item_desc ,i_category ,i_class ,i_current_price ,sum(ws_ext_sales_price) as itemrevenue ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over (partition by i_class) as revenueratio from web_sales ,item ,date_dim where ws_item_sk = i_item_sk and i_category in ('Women', 'Men', 'Shoes') and ws_sold_date_sk = d_date_sk and d_date between cast('1999-01-12' as date) and (cast('1999-01-12' as date) + interval 30 days) group by i_item_id ,i_item_desc ,i_category ,i_class ,i_current_price order by i_category ,i_class ,i_item_id ,i_item_desc ,revenueratio limit 100
SELECT t.i_item_id AS I_ITEM_ID, t.i_item_desc AS I_ITEM_DESC, t.i_category AS I_CATEGORY, t.i_class AS I_CLASS, t.i_current_price AS I_CURRENT_PRICE, SUM(web_sales.ws_ext_sales_price) AS ITEMREVENUE, SUM(web_sales.ws_ext_sales_price) * 100 / CASE WHEN (COUNT(SUM(web_sales.ws_ext_sales_price)) OVER (PARTITION BY t.i_class RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(web_sales.ws_ext_sales_price)) OVER (PARTITION BY t.i_class RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END AS REVENUERATIO FROM web_sales INNER JOIN (SELECT * FROM item WHERE i_category IN ('Men', 'Shoes', 'Women')) AS t ON web_sales.ws_item_sk = t.i_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '1999-01-12' AND d_date <= (DATE '1999-01-12' + 30 * INTERVAL '1' DAY)) AS t0 ON web_sales.ws_sold_date_sk = t0.d_date_sk GROUP BY t.i_item_id, t.i_item_desc, t.i_current_price, t.i_class, t.i_category ORDER BY t.i_category, t.i_class, t.i_item_id, t.i_item_desc, 7 FETCH NEXT 100 ROWS ONLY
with results as ( select sum(ss_net_profit) as total_sum ,s_state ,s_county, 0 as gstate, 0 as g_county from store_sales ,date_dim d1 ,store where d1.d_month_seq between 1199 and 1199 + 11 and d1.d_date_sk = ss_sold_date_sk and s_store_sk = ss_store_sk and s_state in ( select s_state from (select s_state as s_state, rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking from store_sales, store, date_dim where d_month_seq between 1199 and 1199 + 11 and d_date_sk = ss_sold_date_sk and s_store_sk = ss_store_sk group by s_state ) tmp1 where ranking <= 5) group by s_state,s_county) , results_rollup as (select total_sum ,s_state ,s_county, 0 as g_state, 0 as g_county, 0 as lochierarchy from results union select sum(total_sum) as total_sum,s_state, NULL as s_county, 0 as g_state, 1 as g_county, 1 as lochierarchy from results group by s_state union select sum(total_sum) as total_sum ,NULL as s_state ,NULL as s_county, 1 as g_state, 1 as g_county, 2 as lochierarchy from results) select total_sum ,s_state ,s_county, lochierarchy ,rank() over ( partition by lochierarchy, case when g_county = 0 then s_state end order by total_sum desc) as rank_within_parent from results_rollup order by lochierarchy desc ,case when lochierarchy = 0 then s_state end ,rank_within_parent limit 100
SELECT TOTAL_SUM, S_STATE, S_COUNTY, LOCHIERARCHY, RANK() OVER (PARTITION BY LOCHIERARCHY, CASE WHEN G_COUNTY = 0 THEN S_STATE ELSE NULL END ORDER BY TOTAL_SUM DESC) AS RANK_WITHIN_PARENT, CASE WHEN LOCHIERARCHY = 0 THEN S_STATE ELSE NULL END FROM (SELECT SUM(store_sales.ss_net_profit) AS TOTAL_SUM, t6.s_state AS S_STATE, t6.s_county AS S_COUNTY, 0 AS G_STATE, 0 AS G_COUNTY, 0 AS LOCHIERARCHY FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1199 AND d_month_seq <= 1199 + 11) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state IN (SELECT S_STATE FROM (SELECT t2.S_STATE, RANK() OVER (PARTITION BY t2.S_STATE ORDER BY t2.$f1 DESC) AS RANKING FROM (SELECT store0.s_state AS S_STATE, SUM(store_sales0.ss_net_profit) AS $f1 FROM store_sales AS store_sales0, store AS store0, date_dim AS date_dim0 WHERE date_dim0.d_month_seq >= 1199 AND date_dim0.d_month_seq <= 1199 + 11 AND date_dim0.d_date_sk = store_sales0.ss_sold_date_sk AND store0.s_store_sk = store_sales0.ss_store_sk GROUP BY store0.s_state) AS t2) AS t3 WHERE RANKING <= 5)) AS t6 ON store_sales.ss_store_sk = t6.s_store_sk GROUP BY t6.s_county, t6.s_state UNION SELECT SUM(store_sales1.ss_net_profit) AS TOTAL_SUM, t16.s_state AS S_STATE, NULL AS S_COUNTY, 0 AS G_STATE, 1 AS G_COUNTY, 1 AS LOCHIERARCHY FROM store_sales AS store_sales1 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1199 AND d_month_seq <= 1199 + 11) AS t9 ON store_sales1.ss_sold_date_sk = t9.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state IN (SELECT S_STATE FROM (SELECT t12.S_STATE, RANK() OVER (PARTITION BY t12.S_STATE ORDER BY t12.$f1 DESC) AS RANKING FROM (SELECT store2.s_state AS S_STATE, SUM(store_sales2.ss_net_profit) AS $f1 FROM store_sales AS store_sales2, store AS store2, date_dim AS date_dim2 WHERE date_dim2.d_month_seq >= 1199 AND date_dim2.d_month_seq <= 1199 + 11 AND date_dim2.d_date_sk = store_sales2.ss_sold_date_sk AND store2.s_store_sk = store_sales2.ss_store_sk GROUP BY store2.s_state) AS t12) AS t13 WHERE RANKING <= 5)) AS t16 ON store_sales1.ss_store_sk = t16.s_store_sk GROUP BY t16.s_state UNION SELECT SUM(store_sales3.ss_net_profit) AS TOTAL_SUM, NULL AS S_STATE, NULL AS S_COUNTY, 1 AS G_STATE, 1 AS G_COUNTY, 2 AS LOCHIERARCHY FROM store_sales AS store_sales3 INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq >= 1199 AND d_month_seq <= 1199 + 11) AS t19 ON store_sales3.ss_sold_date_sk = t19.d_date_sk INNER JOIN (SELECT * FROM store WHERE s_state IN (SELECT S_STATE FROM (SELECT t22.S_STATE, RANK() OVER (PARTITION BY t22.S_STATE ORDER BY t22.$f1 DESC) AS RANKING FROM (SELECT store4.s_state AS S_STATE, SUM(store_sales4.ss_net_profit) AS $f1 FROM store_sales AS store_sales4, store AS store4, date_dim AS date_dim4 WHERE date_dim4.d_month_seq >= 1199 AND date_dim4.d_month_seq <= 1199 + 11 AND date_dim4.d_date_sk = store_sales4.ss_sold_date_sk AND store4.s_store_sk = store_sales4.ss_store_sk GROUP BY store4.s_state) AS t22) AS t23 WHERE RANKING <= 5)) AS t26 ON store_sales3.ss_store_sk = t26.s_store_sk) AS t29 ORDER BY LOCHIERARCHY DESC, 6, 5 FETCH NEXT 100 ROWS ONLY
select w_warehouse_name ,w_warehouse_sq_ft ,w_city ,w_county ,w_state ,w_country ,ship_carriers ,year ,sum(jan_sales) as jan_sales ,sum(feb_sales) as feb_sales ,sum(mar_sales) as mar_sales ,sum(apr_sales) as apr_sales ,sum(may_sales) as may_sales ,sum(jun_sales) as jun_sales ,sum(jul_sales) as jul_sales ,sum(aug_sales) as aug_sales ,sum(sep_sales) as sep_sales ,sum(oct_sales) as oct_sales ,sum(nov_sales) as nov_sales ,sum(dec_sales) as dec_sales ,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot ,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot ,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot ,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot ,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot ,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot ,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot ,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot ,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot ,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot ,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot ,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot ,sum(jan_net) as jan_net ,sum(feb_net) as feb_net ,sum(mar_net) as mar_net ,sum(apr_net) as apr_net ,sum(may_net) as may_net ,sum(jun_net) as jun_net ,sum(jul_net) as jul_net ,sum(aug_net) as aug_net ,sum(sep_net) as sep_net ,sum(oct_net) as oct_net ,sum(nov_net) as nov_net ,sum(dec_net) as dec_net from ( select w_warehouse_name ,w_warehouse_sq_ft ,w_city ,w_county ,w_state ,w_country ,'LATVIAN' || ',' || 'ALLIANCE' as ship_carriers ,d_year as year ,sum(case when d_moy = 1 then ws_ext_sales_price* ws_quantity else 0 end) as jan_sales ,sum(case when d_moy = 2 then ws_ext_sales_price* ws_quantity else 0 end) as feb_sales ,sum(case when d_moy = 3 then ws_ext_sales_price* ws_quantity else 0 end) as mar_sales ,sum(case when d_moy = 4 then ws_ext_sales_price* ws_quantity else 0 end) as apr_sales ,sum(case when d_moy = 5 then ws_ext_sales_price* ws_quantity else 0 end) as may_sales ,sum(case when d_moy = 6 then ws_ext_sales_price* ws_quantity else 0 end) as jun_sales ,sum(case when d_moy = 7 then ws_ext_sales_price* ws_quantity else 0 end) as jul_sales ,sum(case when d_moy = 8 then ws_ext_sales_price* ws_quantity else 0 end) as aug_sales ,sum(case when d_moy = 9 then ws_ext_sales_price* ws_quantity else 0 end) as sep_sales ,sum(case when d_moy = 10 then ws_ext_sales_price* ws_quantity else 0 end) as oct_sales ,sum(case when d_moy = 11 then ws_ext_sales_price* ws_quantity else 0 end) as nov_sales ,sum(case when d_moy = 12 then ws_ext_sales_price* ws_quantity else 0 end) as dec_sales ,sum(case when d_moy = 1 then ws_net_profit * ws_quantity else 0 end) as jan_net ,sum(case when d_moy = 2 then ws_net_profit * ws_quantity else 0 end) as feb_net ,sum(case when d_moy = 3 then ws_net_profit * ws_quantity else 0 end) as mar_net ,sum(case when d_moy = 4 then ws_net_profit * ws_quantity else 0 end) as apr_net ,sum(case when d_moy = 5 then ws_net_profit * ws_quantity else 0 end) as may_net ,sum(case when d_moy = 6 then ws_net_profit * ws_quantity else 0 end) as jun_net ,sum(case when d_moy = 7 then ws_net_profit * ws_quantity else 0 end) as jul_net ,sum(case when d_moy = 8 then ws_net_profit * ws_quantity else 0 end) as aug_net ,sum(case when d_moy = 9 then ws_net_profit * ws_quantity else 0 end) as sep_net ,sum(case when d_moy = 10 then ws_net_profit * ws_quantity else 0 end) as oct_net ,sum(case when d_moy = 11 then ws_net_profit * ws_quantity else 0 end) as nov_net ,sum(case when d_moy = 12 then ws_net_profit * ws_quantity else 0 end) as dec_net from web_sales ,warehouse ,date_dim ,time_dim ,ship_mode where ws_warehouse_sk = w_warehouse_sk and ws_sold_date_sk = d_date_sk and ws_sold_time_sk = t_time_sk and ws_ship_mode_sk = sm_ship_mode_sk and d_year = 2002 and t_time between 25590 and 25590+28800 and sm_carrier in ('LATVIAN','ALLIANCE') group by w_warehouse_name ,w_warehouse_sq_ft ,w_city ,w_county ,w_state ,w_country ,d_year union all select w_warehouse_name ,w_warehouse_sq_ft ,w_city ,w_county ,w_state ,w_country ,'LATVIAN' || ',' || 'ALLIANCE' as ship_carriers ,d_year as year ,sum(case when d_moy = 1 then cs_ext_list_price* cs_quantity else 0 end) as jan_sales ,sum(case when d_moy = 2 then cs_ext_list_price* cs_quantity else 0 end) as feb_sales ,sum(case when d_moy = 3 then cs_ext_list_price* cs_quantity else 0 end) as mar_sales ,sum(case when d_moy = 4 then cs_ext_list_price* cs_quantity else 0 end) as apr_sales ,sum(case when d_moy = 5 then cs_ext_list_price* cs_quantity else 0 end) as may_sales ,sum(case when d_moy = 6 then cs_ext_list_price* cs_quantity else 0 end) as jun_sales ,sum(case when d_moy = 7 then cs_ext_list_price* cs_quantity else 0 end) as jul_sales ,sum(case when d_moy = 8 then cs_ext_list_price* cs_quantity else 0 end) as aug_sales ,sum(case when d_moy = 9 then cs_ext_list_price* cs_quantity else 0 end) as sep_sales ,sum(case when d_moy = 10 then cs_ext_list_price* cs_quantity else 0 end) as oct_sales ,sum(case when d_moy = 11 then cs_ext_list_price* cs_quantity else 0 end) as nov_sales ,sum(case when d_moy = 12 then cs_ext_list_price* cs_quantity else 0 end) as dec_sales ,sum(case when d_moy = 1 then cs_net_paid_inc_ship * cs_quantity else 0 end) as jan_net ,sum(case when d_moy = 2 then cs_net_paid_inc_ship * cs_quantity else 0 end) as feb_net ,sum(case when d_moy = 3 then cs_net_paid_inc_ship * cs_quantity else 0 end) as mar_net ,sum(case when d_moy = 4 then cs_net_paid_inc_ship * cs_quantity else 0 end) as apr_net ,sum(case when d_moy = 5 then cs_net_paid_inc_ship * cs_quantity else 0 end) as may_net ,sum(case when d_moy = 6 then cs_net_paid_inc_ship * cs_quantity else 0 end) as jun_net ,sum(case when d_moy = 7 then cs_net_paid_inc_ship * cs_quantity else 0 end) as jul_net ,sum(case when d_moy = 8 then cs_net_paid_inc_ship * cs_quantity else 0 end) as aug_net ,sum(case when d_moy = 9 then cs_net_paid_inc_ship * cs_quantity else 0 end) as sep_net ,sum(case when d_moy = 10 then cs_net_paid_inc_ship * cs_quantity else 0 end) as oct_net ,sum(case when d_moy = 11 then cs_net_paid_inc_ship * cs_quantity else 0 end) as nov_net ,sum(case when d_moy = 12 then cs_net_paid_inc_ship * cs_quantity else 0 end) as dec_net from catalog_sales ,warehouse ,date_dim ,time_dim ,ship_mode where cs_warehouse_sk = w_warehouse_sk and cs_sold_date_sk = d_date_sk and cs_sold_time_sk = t_time_sk and cs_ship_mode_sk = sm_ship_mode_sk and d_year = 2002 and t_time between 25590 AND 25590+28800 and sm_carrier in ('LATVIAN','ALLIANCE') group by w_warehouse_name ,w_warehouse_sq_ft ,w_city ,w_county ,w_state ,w_country ,d_year ) x group by w_warehouse_name ,w_warehouse_sq_ft ,w_city ,w_county ,w_state ,w_country ,ship_carriers ,year order by w_warehouse_name limit 100
SELECT W_WAREHOUSE_NAME, W_WAREHOUSE_SQ_FT, W_CITY, W_COUNTY, W_STATE, W_COUNTRY, SHIP_CARRIERS, YEAR, SUM(JAN_SALES) AS JAN_SALES, SUM(FEB_SALES) AS FEB_SALES, SUM(MAR_SALES) AS MAR_SALES, SUM(APR_SALES) AS APR_SALES, SUM(MAY_SALES) AS MAY_SALES, SUM(JUN_SALES) AS JUN_SALES, SUM(JUL_SALES) AS JUL_SALES, SUM(AUG_SALES) AS AUG_SALES, SUM(SEP_SALES) AS SEP_SALES, SUM(OCT_SALES) AS OCT_SALES, SUM(NOV_SALES) AS NOV_SALES, SUM(DEC_SALES) AS DEC_SALES, SUM(JAN_SALES / W_WAREHOUSE_SQ_FT) AS JAN_SALES_PER_SQ_FOOT, SUM(FEB_SALES / W_WAREHOUSE_SQ_FT) AS FEB_SALES_PER_SQ_FOOT, SUM(MAR_SALES / W_WAREHOUSE_SQ_FT) AS MAR_SALES_PER_SQ_FOOT, SUM(APR_SALES / W_WAREHOUSE_SQ_FT) AS APR_SALES_PER_SQ_FOOT, SUM(MAY_SALES / W_WAREHOUSE_SQ_FT) AS MAY_SALES_PER_SQ_FOOT, SUM(JUN_SALES / W_WAREHOUSE_SQ_FT) AS JUN_SALES_PER_SQ_FOOT, SUM(JUL_SALES / W_WAREHOUSE_SQ_FT) AS JUL_SALES_PER_SQ_FOOT, SUM(AUG_SALES / W_WAREHOUSE_SQ_FT) AS AUG_SALES_PER_SQ_FOOT, SUM(SEP_SALES / W_WAREHOUSE_SQ_FT) AS SEP_SALES_PER_SQ_FOOT, SUM(OCT_SALES / W_WAREHOUSE_SQ_FT) AS OCT_SALES_PER_SQ_FOOT, SUM(NOV_SALES / W_WAREHOUSE_SQ_FT) AS NOV_SALES_PER_SQ_FOOT, SUM(DEC_SALES / W_WAREHOUSE_SQ_FT) AS DEC_SALES_PER_SQ_FOOT, SUM(JAN_NET) AS JAN_NET, SUM(FEB_NET) AS FEB_NET, SUM(MAR_NET) AS MAR_NET, SUM(APR_NET) AS APR_NET, SUM(MAY_NET) AS MAY_NET, SUM(JUN_NET) AS JUN_NET, SUM(JUL_NET) AS JUL_NET, SUM(AUG_NET) AS AUG_NET, SUM(SEP_NET) AS SEP_NET, SUM(OCT_NET) AS OCT_NET, SUM(NOV_NET) AS NOV_NET, SUM(DEC_NET) AS DEC_NET FROM (SELECT warehouse.w_warehouse_name AS W_WAREHOUSE_NAME, warehouse.w_warehouse_sq_ft AS W_WAREHOUSE_SQ_FT, warehouse.w_city AS W_CITY, warehouse.w_county AS W_COUNTY, warehouse.w_state AS W_STATE, warehouse.w_country AS W_COUNTRY, 'LATVIAN' || ',' || 'ALLIANCE' AS SHIP_CARRIERS, t0.d_year AS YEAR, SUM(CASE WHEN t0.d_moy = 1 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS JAN_SALES, SUM(CASE WHEN t0.d_moy = 2 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS FEB_SALES, SUM(CASE WHEN t0.d_moy = 3 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS MAR_SALES, SUM(CASE WHEN t0.d_moy = 4 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS APR_SALES, SUM(CASE WHEN t0.d_moy = 5 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS MAY_SALES, SUM(CASE WHEN t0.d_moy = 6 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS JUN_SALES, SUM(CASE WHEN t0.d_moy = 7 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS JUL_SALES, SUM(CASE WHEN t0.d_moy = 8 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS AUG_SALES, SUM(CASE WHEN t0.d_moy = 9 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS SEP_SALES, SUM(CASE WHEN t0.d_moy = 10 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS OCT_SALES, SUM(CASE WHEN t0.d_moy = 11 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS NOV_SALES, SUM(CASE WHEN t0.d_moy = 12 THEN web_sales.ws_ext_sales_price * web_sales.ws_quantity ELSE 0 END) AS DEC_SALES, SUM(CASE WHEN t0.d_moy = 1 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS JAN_NET, SUM(CASE WHEN t0.d_moy = 2 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS FEB_NET, SUM(CASE WHEN t0.d_moy = 3 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS MAR_NET, SUM(CASE WHEN t0.d_moy = 4 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS APR_NET, SUM(CASE WHEN t0.d_moy = 5 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS MAY_NET, SUM(CASE WHEN t0.d_moy = 6 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS JUN_NET, SUM(CASE WHEN t0.d_moy = 7 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS JUL_NET, SUM(CASE WHEN t0.d_moy = 8 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS AUG_NET, SUM(CASE WHEN t0.d_moy = 9 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS SEP_NET, SUM(CASE WHEN t0.d_moy = 10 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS OCT_NET, SUM(CASE WHEN t0.d_moy = 11 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS NOV_NET, SUM(CASE WHEN t0.d_moy = 12 THEN web_sales.ws_net_profit * web_sales.ws_quantity ELSE 0 END) AS DEC_NET FROM (SELECT * FROM ship_mode WHERE sm_carrier IN ('ALLIANCE', 'LATVIAN')) AS t INNER JOIN (web_sales INNER JOIN warehouse ON web_sales.ws_warehouse_sk = warehouse.w_warehouse_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002) AS t0 ON web_sales.ws_sold_date_sk = t0.d_date_sk INNER JOIN (SELECT * FROM time_dim WHERE t_time >= 25590 AND t_time <= 25590 + 28800) AS t1 ON web_sales.ws_sold_time_sk = t1.t_time_sk) ON t.sm_ship_mode_sk = web_sales.ws_ship_mode_sk GROUP BY warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country, t0.d_year UNION ALL SELECT warehouse0.w_warehouse_name AS W_WAREHOUSE_NAME, warehouse0.w_warehouse_sq_ft AS W_WAREHOUSE_SQ_FT, warehouse0.w_city AS W_CITY, warehouse0.w_county AS W_COUNTY, warehouse0.w_state AS W_STATE, warehouse0.w_country AS W_COUNTRY, 'LATVIAN' || ',' || 'ALLIANCE' AS SHIP_CARRIERS, t6.d_year AS YEAR, SUM(CASE WHEN t6.d_moy = 1 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS JAN_SALES, SUM(CASE WHEN t6.d_moy = 2 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS FEB_SALES, SUM(CASE WHEN t6.d_moy = 3 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS MAR_SALES, SUM(CASE WHEN t6.d_moy = 4 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS APR_SALES, SUM(CASE WHEN t6.d_moy = 5 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS MAY_SALES, SUM(CASE WHEN t6.d_moy = 6 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS JUN_SALES, SUM(CASE WHEN t6.d_moy = 7 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS JUL_SALES, SUM(CASE WHEN t6.d_moy = 8 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS AUG_SALES, SUM(CASE WHEN t6.d_moy = 9 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS SEP_SALES, SUM(CASE WHEN t6.d_moy = 10 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS OCT_SALES, SUM(CASE WHEN t6.d_moy = 11 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS NOV_SALES, SUM(CASE WHEN t6.d_moy = 12 THEN catalog_sales.cs_ext_list_price * catalog_sales.cs_quantity ELSE 0 END) AS DEC_SALES, SUM(CASE WHEN t6.d_moy = 1 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS JAN_NET, SUM(CASE WHEN t6.d_moy = 2 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS FEB_NET, SUM(CASE WHEN t6.d_moy = 3 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS MAR_NET, SUM(CASE WHEN t6.d_moy = 4 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS APR_NET, SUM(CASE WHEN t6.d_moy = 5 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS MAY_NET, SUM(CASE WHEN t6.d_moy = 6 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS JUN_NET, SUM(CASE WHEN t6.d_moy = 7 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS JUL_NET, SUM(CASE WHEN t6.d_moy = 8 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS AUG_NET, SUM(CASE WHEN t6.d_moy = 9 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS SEP_NET, SUM(CASE WHEN t6.d_moy = 10 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS OCT_NET, SUM(CASE WHEN t6.d_moy = 11 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS NOV_NET, SUM(CASE WHEN t6.d_moy = 12 THEN catalog_sales.cs_net_paid_inc_ship * catalog_sales.cs_quantity ELSE 0 END) AS DEC_NET FROM (SELECT * FROM ship_mode WHERE sm_carrier IN ('ALLIANCE', 'LATVIAN')) AS t5 INNER JOIN (catalog_sales INNER JOIN warehouse AS warehouse0 ON catalog_sales.cs_warehouse_sk = warehouse0.w_warehouse_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2002) AS t6 ON catalog_sales.cs_sold_date_sk = t6.d_date_sk INNER JOIN (SELECT * FROM time_dim WHERE t_time >= 25590 AND t_time <= 25590 + 28800) AS t7 ON catalog_sales.cs_sold_time_sk = t7.t_time_sk) ON t5.sm_ship_mode_sk = catalog_sales.cs_ship_mode_sk GROUP BY warehouse0.w_warehouse_name, warehouse0.w_warehouse_sq_ft, warehouse0.w_city, warehouse0.w_county, warehouse0.w_state, warehouse0.w_country, t6.d_year) AS t11 GROUP BY W_WAREHOUSE_NAME, W_WAREHOUSE_SQ_FT, W_CITY, W_COUNTY, W_STATE, W_COUNTRY, SHIP_CARRIERS, YEAR ORDER BY W_WAREHOUSE_NAME FETCH NEXT 100 ROWS ONLY
select asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing from(select * from (select item_sk,rank() over (order by rank_col asc) rnk from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col from store_sales ss1 where ss_store_sk = 2 group by ss_item_sk having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col from store_sales where ss_store_sk = 2 and ss_addr_sk is null group by ss_store_sk))V1)V11 where rnk < 11) asceding, (select * from (select item_sk,rank() over (order by rank_col desc) rnk from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col from store_sales ss1 where ss_store_sk = 2 group by ss_item_sk having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col from store_sales where ss_store_sk = 2 and ss_addr_sk is null group by ss_store_sk))V2)V21 where rnk < 11) descending, item i1, item i2 where asceding.rnk = descending.rnk and i1.i_item_sk=asceding.item_sk and i2.i_item_sk=descending.item_sk order by asceding.rnk limit 100
SELECT t7.RNK, item.i_product_name AS BEST_PERFORMING, item0.i_product_name AS WORST_PERFORMING FROM (SELECT * FROM (SELECT ss_item_sk AS ITEM_SK, RANK() OVER (ORDER BY AVG(ss_net_profit)) AS RNK FROM store_sales WHERE ss_store_sk = 2 GROUP BY ss_item_sk HAVING AVG(ss_net_profit) > 0.9 * (((SELECT AVG(ss_net_profit) AS RANK_COL FROM store_sales WHERE ss_store_sk = 2 AND ss_addr_sk IS NULL GROUP BY ss_store_sk)))) AS t6 WHERE RNK < 11) AS t7 INNER JOIN (SELECT * FROM (SELECT ss_item_sk AS ITEM_SK, RANK() OVER (ORDER BY AVG(ss_net_profit) DESC) AS RNK FROM store_sales WHERE ss_store_sk = 2 GROUP BY ss_item_sk HAVING AVG(ss_net_profit) > 0.9 * (((SELECT AVG(ss_net_profit) AS RANK_COL FROM store_sales WHERE ss_store_sk = 2 AND ss_addr_sk IS NULL GROUP BY ss_store_sk)))) AS t15 WHERE RNK < 11) AS t16 ON t7.RNK = t16.RNK INNER JOIN item ON t7.ITEM_SK = item.i_item_sk INNER JOIN item AS item0 ON t16.ITEM_SK = item0.i_item_sk ORDER BY t7.RNK FETCH NEXT 100 ROWS ONLY
select i_item_id ,i_item_desc ,i_category ,i_class ,i_current_price ,sum(cs_ext_sales_price) as itemrevenue ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over (partition by i_class) as revenueratio from catalog_sales ,item ,date_dim where cs_item_sk = i_item_sk and i_category in ('Men', 'Sports', 'Jewelry') and cs_sold_date_sk = d_date_sk and d_date between cast('2000-06-16' as date) and (cast('2000-06-16' as date) + interval 30 days) group by i_item_id ,i_item_desc ,i_category ,i_class ,i_current_price order by i_category ,i_class ,i_item_id ,i_item_desc ,revenueratio limit 100
SELECT t.i_item_id AS I_ITEM_ID, t.i_item_desc AS I_ITEM_DESC, t.i_category AS I_CATEGORY, t.i_class AS I_CLASS, t.i_current_price AS I_CURRENT_PRICE, SUM(catalog_sales.cs_ext_sales_price) AS ITEMREVENUE, SUM(catalog_sales.cs_ext_sales_price) * 100 / CASE WHEN (COUNT(SUM(catalog_sales.cs_ext_sales_price)) OVER (PARTITION BY t.i_class RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(catalog_sales.cs_ext_sales_price)) OVER (PARTITION BY t.i_class RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END AS REVENUERATIO FROM catalog_sales INNER JOIN (SELECT * FROM item WHERE i_category IN ('Jewelry', 'Men', 'Sports')) AS t ON catalog_sales.cs_item_sk = t.i_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_date >= DATE '2000-06-16' AND d_date <= (DATE '2000-06-16' + 30 * INTERVAL '1' DAY)) AS t0 ON catalog_sales.cs_sold_date_sk = t0.d_date_sk GROUP BY t.i_item_id, t.i_item_desc, t.i_current_price, t.i_class, t.i_category ORDER BY t.i_category, t.i_class, t.i_item_id, t.i_item_desc, 7 FETCH NEXT 100 ROWS ONLY
with cross_items as (select i_item_sk ss_item_sk from item, (select iss.i_brand_id brand_id ,iss.i_class_id class_id ,iss.i_category_id category_id from store_sales ,item iss ,date_dim d1 where ss_item_sk = iss.i_item_sk and ss_sold_date_sk = d1.d_date_sk and d1.d_year between 1998 AND 1998 + 2 intersect select ics.i_brand_id ,ics.i_class_id ,ics.i_category_id from catalog_sales ,item ics ,date_dim d2 where cs_item_sk = ics.i_item_sk and cs_sold_date_sk = d2.d_date_sk and d2.d_year between 1998 AND 1998 + 2 intersect select iws.i_brand_id ,iws.i_class_id ,iws.i_category_id from web_sales ,item iws ,date_dim d3 where ws_item_sk = iws.i_item_sk and ws_sold_date_sk = d3.d_date_sk and d3.d_year between 1998 AND 1998 + 2) where i_brand_id = brand_id and i_class_id = class_id and i_category_id = category_id ), avg_sales as (select avg(quantity*list_price) average_sales from (select ss_quantity quantity ,ss_list_price list_price from store_sales ,date_dim where ss_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2 union all select cs_quantity quantity ,cs_list_price list_price from catalog_sales ,date_dim where cs_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2 union all select ws_quantity quantity ,ws_list_price list_price from web_sales ,date_dim where ws_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2) x) select channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales) from( select 'store' channel, i_brand_id,i_class_id ,i_category_id,sum(ss_quantity*ss_list_price) sales , count(*) number_sales from store_sales ,item ,date_dim where ss_item_sk in (select ss_item_sk from cross_items) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_year = 1998+2 and d_moy = 11 group by i_brand_id,i_class_id,i_category_id having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales) union all select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales from catalog_sales ,item ,date_dim where cs_item_sk in (select ss_item_sk from cross_items) and cs_item_sk = i_item_sk and cs_sold_date_sk = d_date_sk and d_year = 1998+2 and d_moy = 11 group by i_brand_id,i_class_id,i_category_id having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales) union all select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales from web_sales ,item ,date_dim where ws_item_sk in (select ss_item_sk from cross_items) and ws_item_sk = i_item_sk and ws_sold_date_sk = d_date_sk and d_year = 1998+2 and d_moy = 11 group by i_brand_id,i_class_id,i_category_id having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales) ) y group by rollup (channel, i_brand_id,i_class_id,i_category_id) order by channel,i_brand_id,i_class_id,i_category_id limit 100
SELECT CHANNEL, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID, SUM(SALES), SUM(NUMBER_SALES) FROM (SELECT 'store' AS CHANNEL, item3.i_brand_id AS I_BRAND_ID, item3.i_class_id AS I_CLASS_ID, item3.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t9.ss_quantity * t9.ss_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t9.ss_quantity * t9.ss_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM store_sales WHERE ss_item_sk IN (SELECT item.i_item_sk AS SS_ITEM_SK FROM item, (SELECT * FROM (SELECT item0.i_brand_id AS BRAND_ID, item0.i_class_id AS CLASS_ID, item0.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales0, item AS item0, date_dim WHERE store_sales0.ss_item_sk = item0.i_item_sk AND store_sales0.ss_sold_date_sk = date_dim.d_date_sk AND date_dim.d_year >= 1998 AND date_dim.d_year <= 1998 + 2 INTERSECT SELECT item1.i_brand_id AS I_BRAND_ID, item1.i_class_id AS I_CLASS_ID, item1.i_category_id AS I_CATEGORY_ID FROM catalog_sales, item AS item1, date_dim AS date_dim0 WHERE catalog_sales.cs_item_sk = item1.i_item_sk AND catalog_sales.cs_sold_date_sk = date_dim0.d_date_sk AND date_dim0.d_year >= 1998 AND date_dim0.d_year <= 1998 + 2) INTERSECT SELECT item2.i_brand_id AS I_BRAND_ID, item2.i_class_id AS I_CLASS_ID, item2.i_category_id AS I_CATEGORY_ID FROM web_sales, item AS item2, date_dim AS date_dim1 WHERE web_sales.ws_item_sk = item2.i_item_sk AND web_sales.ws_sold_date_sk = date_dim1.d_date_sk AND date_dim1.d_year >= 1998 AND date_dim1.d_year <= 1998 + 2) AS t6 WHERE item.i_brand_id = t6.BRAND_ID AND item.i_class_id = t6.CLASS_ID AND item.i_category_id = t6.CATEGORY_ID)) AS t9 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 + 2 AND d_moy = 11) AS t10 ON t9.ss_sold_date_sk = t10.d_date_sk INNER JOIN item AS item3 ON t9.ss_item_sk = item3.i_item_sk GROUP BY item3.i_brand_id, item3.i_class_id, item3.i_category_id HAVING CASE WHEN COUNT(t9.ss_quantity * t9.ss_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t9.ss_quantity * t9.ss_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales1.ss_quantity AS QUANTITY, store_sales1.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales1, date_dim AS date_dim3 WHERE store_sales1.ss_sold_date_sk = date_dim3.d_date_sk AND date_dim3.d_year >= 1998 AND date_dim3.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales0.cs_quantity AS QUANTITY, catalog_sales0.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales0, date_dim AS date_dim4 WHERE catalog_sales0.cs_sold_date_sk = date_dim4.d_date_sk AND date_dim4.d_year >= 1998 AND date_dim4.d_year <= 1998 + 2) UNION ALL SELECT web_sales0.ws_quantity AS QUANTITY, web_sales0.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales0, date_dim AS date_dim5 WHERE web_sales0.ws_sold_date_sk = date_dim5.d_date_sk AND date_dim5.d_year >= 1998 AND date_dim5.d_year <= 1998 + 2) AS t20))) END UNION ALL SELECT 'catalog' AS CHANNEL, item8.i_brand_id AS I_BRAND_ID, item8.i_class_id AS I_CLASS_ID, item8.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t36.cs_quantity * t36.cs_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t36.cs_quantity * t36.cs_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM catalog_sales WHERE cs_item_sk IN (SELECT item4.i_item_sk AS SS_ITEM_SK FROM item AS item4, (SELECT * FROM (SELECT item5.i_brand_id AS BRAND_ID, item5.i_class_id AS CLASS_ID, item5.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales2, item AS item5, date_dim AS date_dim6 WHERE store_sales2.ss_item_sk = item5.i_item_sk AND store_sales2.ss_sold_date_sk = date_dim6.d_date_sk AND date_dim6.d_year >= 1998 AND date_dim6.d_year <= 1998 + 2 INTERSECT SELECT item6.i_brand_id AS I_BRAND_ID, item6.i_class_id AS I_CLASS_ID, item6.i_category_id AS I_CATEGORY_ID FROM catalog_sales AS catalog_sales2, item AS item6, date_dim AS date_dim7 WHERE catalog_sales2.cs_item_sk = item6.i_item_sk AND catalog_sales2.cs_sold_date_sk = date_dim7.d_date_sk AND date_dim7.d_year >= 1998 AND date_dim7.d_year <= 1998 + 2) INTERSECT SELECT item7.i_brand_id AS I_BRAND_ID, item7.i_class_id AS I_CLASS_ID, item7.i_category_id AS I_CATEGORY_ID FROM web_sales AS web_sales1, item AS item7, date_dim AS date_dim8 WHERE web_sales1.ws_item_sk = item7.i_item_sk AND web_sales1.ws_sold_date_sk = date_dim8.d_date_sk AND date_dim8.d_year >= 1998 AND date_dim8.d_year <= 1998 + 2) AS t33 WHERE item4.i_brand_id = t33.BRAND_ID AND item4.i_class_id = t33.CLASS_ID AND item4.i_category_id = t33.CATEGORY_ID)) AS t36 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 + 2 AND d_moy = 11) AS t37 ON t36.cs_sold_date_sk = t37.d_date_sk INNER JOIN item AS item8 ON t36.cs_item_sk = item8.i_item_sk GROUP BY item8.i_brand_id, item8.i_class_id, item8.i_category_id HAVING CASE WHEN COUNT(t36.cs_quantity * t36.cs_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t36.cs_quantity * t36.cs_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales3.ss_quantity AS QUANTITY, store_sales3.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales3, date_dim AS date_dim10 WHERE store_sales3.ss_sold_date_sk = date_dim10.d_date_sk AND date_dim10.d_year >= 1998 AND date_dim10.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales3.cs_quantity AS QUANTITY, catalog_sales3.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales3, date_dim AS date_dim11 WHERE catalog_sales3.cs_sold_date_sk = date_dim11.d_date_sk AND date_dim11.d_year >= 1998 AND date_dim11.d_year <= 1998 + 2) UNION ALL SELECT web_sales2.ws_quantity AS QUANTITY, web_sales2.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales2, date_dim AS date_dim12 WHERE web_sales2.ws_sold_date_sk = date_dim12.d_date_sk AND date_dim12.d_year >= 1998 AND date_dim12.d_year <= 1998 + 2) AS t47))) END UNION ALL SELECT 'web' AS CHANNEL, item13.i_brand_id AS I_BRAND_ID, item13.i_class_id AS I_CLASS_ID, item13.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t63.ws_quantity * t63.ws_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t63.ws_quantity * t63.ws_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM web_sales WHERE ws_item_sk IN (SELECT item9.i_item_sk AS SS_ITEM_SK FROM item AS item9, (SELECT * FROM (SELECT item10.i_brand_id AS BRAND_ID, item10.i_class_id AS CLASS_ID, item10.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales4, item AS item10, date_dim AS date_dim13 WHERE store_sales4.ss_item_sk = item10.i_item_sk AND store_sales4.ss_sold_date_sk = date_dim13.d_date_sk AND date_dim13.d_year >= 1998 AND date_dim13.d_year <= 1998 + 2 INTERSECT SELECT item11.i_brand_id AS I_BRAND_ID, item11.i_class_id AS I_CLASS_ID, item11.i_category_id AS I_CATEGORY_ID FROM catalog_sales AS catalog_sales4, item AS item11, date_dim AS date_dim14 WHERE catalog_sales4.cs_item_sk = item11.i_item_sk AND catalog_sales4.cs_sold_date_sk = date_dim14.d_date_sk AND date_dim14.d_year >= 1998 AND date_dim14.d_year <= 1998 + 2) INTERSECT SELECT item12.i_brand_id AS I_BRAND_ID, item12.i_class_id AS I_CLASS_ID, item12.i_category_id AS I_CATEGORY_ID FROM web_sales AS web_sales4, item AS item12, date_dim AS date_dim15 WHERE web_sales4.ws_item_sk = item12.i_item_sk AND web_sales4.ws_sold_date_sk = date_dim15.d_date_sk AND date_dim15.d_year >= 1998 AND date_dim15.d_year <= 1998 + 2) AS t60 WHERE item9.i_brand_id = t60.BRAND_ID AND item9.i_class_id = t60.CLASS_ID AND item9.i_category_id = t60.CATEGORY_ID)) AS t63 INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1998 + 2 AND d_moy = 11) AS t64 ON t63.ws_sold_date_sk = t64.d_date_sk INNER JOIN item AS item13 ON t63.ws_item_sk = item13.i_item_sk GROUP BY item13.i_brand_id, item13.i_class_id, item13.i_category_id HAVING CASE WHEN COUNT(t63.ws_quantity * t63.ws_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t63.ws_quantity * t63.ws_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales5.ss_quantity AS QUANTITY, store_sales5.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales5, date_dim AS date_dim17 WHERE store_sales5.ss_sold_date_sk = date_dim17.d_date_sk AND date_dim17.d_year >= 1998 AND date_dim17.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales5.cs_quantity AS QUANTITY, catalog_sales5.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales5, date_dim AS date_dim18 WHERE catalog_sales5.cs_sold_date_sk = date_dim18.d_date_sk AND date_dim18.d_year >= 1998 AND date_dim18.d_year <= 1998 + 2) UNION ALL SELECT web_sales5.ws_quantity AS QUANTITY, web_sales5.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales5, date_dim AS date_dim19 WHERE web_sales5.ws_sold_date_sk = date_dim19.d_date_sk AND date_dim19.d_year >= 1998 AND date_dim19.d_year <= 1998 + 2) AS t74))) END) AS t80 GROUP BY ROLLUP(CHANNEL, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID) ORDER BY CHANNEL, I_BRAND_ID, I_CLASS_ID, I_CATEGORY_ID FETCH NEXT 100 ROWS ONLY
with cross_items as (select i_item_sk ss_item_sk from item, (select iss.i_brand_id brand_id ,iss.i_class_id class_id ,iss.i_category_id category_id from store_sales ,item iss ,date_dim d1 where ss_item_sk = iss.i_item_sk and ss_sold_date_sk = d1.d_date_sk and d1.d_year between 1998 AND 1998 + 2 intersect select ics.i_brand_id ,ics.i_class_id ,ics.i_category_id from catalog_sales ,item ics ,date_dim d2 where cs_item_sk = ics.i_item_sk and cs_sold_date_sk = d2.d_date_sk and d2.d_year between 1998 AND 1998 + 2 intersect select iws.i_brand_id ,iws.i_class_id ,iws.i_category_id from web_sales ,item iws ,date_dim d3 where ws_item_sk = iws.i_item_sk and ws_sold_date_sk = d3.d_date_sk and d3.d_year between 1998 AND 1998 + 2) x where i_brand_id = brand_id and i_class_id = class_id and i_category_id = category_id ), avg_sales as (select avg(quantity*list_price) average_sales from (select ss_quantity quantity ,ss_list_price list_price from store_sales ,date_dim where ss_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2 union all select cs_quantity quantity ,cs_list_price list_price from catalog_sales ,date_dim where cs_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2 union all select ws_quantity quantity ,ws_list_price list_price from web_sales ,date_dim where ws_sold_date_sk = d_date_sk and d_year between 1998 and 1998 + 2) x) select this_year.channel ty_channel ,this_year.i_brand_id ty_brand ,this_year.i_class_id ty_class ,this_year.i_category_id ty_category ,this_year.sales ty_sales ,this_year.number_sales ty_number_sales ,last_year.channel ly_channel ,last_year.i_brand_id ly_brand ,last_year.i_class_id ly_class ,last_year.i_category_id ly_category ,last_year.sales ly_sales ,last_year.number_sales ly_number_sales from (select 'store' channel, i_brand_id,i_class_id,i_category_id ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales from store_sales ,item ,date_dim where ss_item_sk in (select ss_item_sk from cross_items) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_week_seq = (select d_week_seq from date_dim where d_year = 1998 + 1 and d_moy = 12 and d_dom = 5) group by i_brand_id,i_class_id,i_category_id having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year, (select 'store' channel, i_brand_id,i_class_id ,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales from store_sales ,item ,date_dim where ss_item_sk in (select ss_item_sk from cross_items) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_week_seq = (select d_week_seq from date_dim where d_year = 1998 and d_moy = 12 and d_dom = 5) group by i_brand_id,i_class_id,i_category_id having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year where this_year.i_brand_id= last_year.i_brand_id and this_year.i_class_id = last_year.i_class_id and this_year.i_category_id = last_year.i_category_id order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id limit 100
SELECT * FROM (SELECT 'store' AS CHANNEL, item3.i_brand_id AS I_BRAND_ID, item3.i_class_id AS I_CLASS_ID, item3.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t9.ss_quantity * t9.ss_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t9.ss_quantity * t9.ss_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM store_sales WHERE ss_item_sk IN (SELECT item.i_item_sk AS SS_ITEM_SK FROM item, (SELECT * FROM (SELECT item0.i_brand_id AS BRAND_ID, item0.i_class_id AS CLASS_ID, item0.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales0, item AS item0, date_dim WHERE store_sales0.ss_item_sk = item0.i_item_sk AND store_sales0.ss_sold_date_sk = date_dim.d_date_sk AND date_dim.d_year >= 1998 AND date_dim.d_year <= 1998 + 2 INTERSECT SELECT item1.i_brand_id AS I_BRAND_ID, item1.i_class_id AS I_CLASS_ID, item1.i_category_id AS I_CATEGORY_ID FROM catalog_sales, item AS item1, date_dim AS date_dim0 WHERE catalog_sales.cs_item_sk = item1.i_item_sk AND catalog_sales.cs_sold_date_sk = date_dim0.d_date_sk AND date_dim0.d_year >= 1998 AND date_dim0.d_year <= 1998 + 2) INTERSECT SELECT item2.i_brand_id AS I_BRAND_ID, item2.i_class_id AS I_CLASS_ID, item2.i_category_id AS I_CATEGORY_ID FROM web_sales, item AS item2, date_dim AS date_dim1 WHERE web_sales.ws_item_sk = item2.i_item_sk AND web_sales.ws_sold_date_sk = date_dim1.d_date_sk AND date_dim1.d_year >= 1998 AND date_dim1.d_year <= 1998 + 2) AS t6 WHERE item.i_brand_id = t6.BRAND_ID AND item.i_class_id = t6.CLASS_ID AND item.i_category_id = t6.CATEGORY_ID)) AS t9 INNER JOIN (SELECT * FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_year = 1998 + 1 AND d_moy = 12 AND d_dom = 5)))) AS t12 ON t9.ss_sold_date_sk = t12.d_date_sk INNER JOIN item AS item3 ON t9.ss_item_sk = item3.i_item_sk GROUP BY item3.i_brand_id, item3.i_class_id, item3.i_category_id HAVING CASE WHEN COUNT(t9.ss_quantity * t9.ss_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t9.ss_quantity * t9.ss_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales1.ss_quantity AS QUANTITY, store_sales1.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales1, date_dim AS date_dim4 WHERE store_sales1.ss_sold_date_sk = date_dim4.d_date_sk AND date_dim4.d_year >= 1998 AND date_dim4.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales0.cs_quantity AS QUANTITY, catalog_sales0.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales0, date_dim AS date_dim5 WHERE catalog_sales0.cs_sold_date_sk = date_dim5.d_date_sk AND date_dim5.d_year >= 1998 AND date_dim5.d_year <= 1998 + 2) UNION ALL SELECT web_sales0.ws_quantity AS QUANTITY, web_sales0.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales0, date_dim AS date_dim6 WHERE web_sales0.ws_sold_date_sk = date_dim6.d_date_sk AND date_dim6.d_year >= 1998 AND date_dim6.d_year <= 1998 + 2) AS t22))) END) AS t27 INNER JOIN (SELECT 'store' AS CHANNEL, item8.i_brand_id AS I_BRAND_ID, item8.i_class_id AS I_CLASS_ID, item8.i_category_id AS I_CATEGORY_ID, CASE WHEN COUNT(t38.ss_quantity * t38.ss_list_price) = 0 THEN NULL ELSE COALESCE(SUM(t38.ss_quantity * t38.ss_list_price), 0) END AS SALES, COUNT(*) AS NUMBER_SALES FROM (SELECT * FROM store_sales WHERE ss_item_sk IN (SELECT item4.i_item_sk AS SS_ITEM_SK FROM item AS item4, (SELECT * FROM (SELECT item5.i_brand_id AS BRAND_ID, item5.i_class_id AS CLASS_ID, item5.i_category_id AS CATEGORY_ID FROM store_sales AS store_sales3, item AS item5, date_dim AS date_dim7 WHERE store_sales3.ss_item_sk = item5.i_item_sk AND store_sales3.ss_sold_date_sk = date_dim7.d_date_sk AND date_dim7.d_year >= 1998 AND date_dim7.d_year <= 1998 + 2 INTERSECT SELECT item6.i_brand_id AS I_BRAND_ID, item6.i_class_id AS I_CLASS_ID, item6.i_category_id AS I_CATEGORY_ID FROM catalog_sales AS catalog_sales1, item AS item6, date_dim AS date_dim8 WHERE catalog_sales1.cs_item_sk = item6.i_item_sk AND catalog_sales1.cs_sold_date_sk = date_dim8.d_date_sk AND date_dim8.d_year >= 1998 AND date_dim8.d_year <= 1998 + 2) INTERSECT SELECT item7.i_brand_id AS I_BRAND_ID, item7.i_class_id AS I_CLASS_ID, item7.i_category_id AS I_CATEGORY_ID FROM web_sales AS web_sales1, item AS item7, date_dim AS date_dim9 WHERE web_sales1.ws_item_sk = item7.i_item_sk AND web_sales1.ws_sold_date_sk = date_dim9.d_date_sk AND date_dim9.d_year >= 1998 AND date_dim9.d_year <= 1998 + 2) AS t35 WHERE item4.i_brand_id = t35.BRAND_ID AND item4.i_class_id = t35.CLASS_ID AND item4.i_category_id = t35.CATEGORY_ID)) AS t38 INNER JOIN (SELECT * FROM date_dim WHERE d_week_seq = (((SELECT d_week_seq AS D_WEEK_SEQ FROM date_dim WHERE d_year = 1998 AND d_moy = 12 AND d_dom = 5)))) AS t41 ON t38.ss_sold_date_sk = t41.d_date_sk INNER JOIN item AS item8 ON t38.ss_item_sk = item8.i_item_sk GROUP BY item8.i_brand_id, item8.i_class_id, item8.i_category_id HAVING CASE WHEN COUNT(t38.ss_quantity * t38.ss_list_price) = 0 THEN FALSE ELSE COALESCE(SUM(t38.ss_quantity * t38.ss_list_price), 0) > (((SELECT AVG(QUANTITY * LIST_PRICE) AS AVERAGE_SALES FROM (SELECT * FROM (SELECT store_sales4.ss_quantity AS QUANTITY, store_sales4.ss_list_price AS LIST_PRICE FROM store_sales AS store_sales4, date_dim AS date_dim12 WHERE store_sales4.ss_sold_date_sk = date_dim12.d_date_sk AND date_dim12.d_year >= 1998 AND date_dim12.d_year <= 1998 + 2 UNION ALL SELECT catalog_sales2.cs_quantity AS QUANTITY, catalog_sales2.cs_list_price AS LIST_PRICE FROM catalog_sales AS catalog_sales2, date_dim AS date_dim13 WHERE catalog_sales2.cs_sold_date_sk = date_dim13.d_date_sk AND date_dim13.d_year >= 1998 AND date_dim13.d_year <= 1998 + 2) UNION ALL SELECT web_sales2.ws_quantity AS QUANTITY, web_sales2.ws_list_price AS LIST_PRICE FROM web_sales AS web_sales2, date_dim AS date_dim14 WHERE web_sales2.ws_sold_date_sk = date_dim14.d_date_sk AND date_dim14.d_year >= 1998 AND date_dim14.d_year <= 1998 + 2) AS t51))) END) AS t56 ON t27.I_BRAND_ID = t56.I_BRAND_ID AND t27.I_CLASS_ID = t56.I_CLASS_ID AND t27.I_CATEGORY_ID = t56.I_CATEGORY_ID ORDER BY t27.CHANNEL, t27.I_BRAND_ID, t27.I_CLASS_ID, t27.I_CATEGORY_ID FETCH NEXT 100 ROWS ONLY
with ss as ( select i_manufact_id,sum(ss_ext_sales_price) total_sales from store_sales, date_dim, customer_address, item where i_manufact_id in (select i_manufact_id from item where i_category in ('Home')) and ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and d_year = 1999 and d_moy = 4 and ss_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_manufact_id), cs as ( select i_manufact_id,sum(cs_ext_sales_price) total_sales from catalog_sales, date_dim, customer_address, item where i_manufact_id in (select i_manufact_id from item where i_category in ('Home')) and cs_item_sk = i_item_sk and cs_sold_date_sk = d_date_sk and d_year = 1999 and d_moy = 4 and cs_bill_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_manufact_id), ws as ( select i_manufact_id,sum(ws_ext_sales_price) total_sales from web_sales, date_dim, customer_address, item where i_manufact_id in (select i_manufact_id from item where i_category in ('Home')) and ws_item_sk = i_item_sk and ws_sold_date_sk = d_date_sk and d_year = 1999 and d_moy = 4 and ws_bill_addr_sk = ca_address_sk and ca_gmt_offset = -5 group by i_manufact_id) select i_manufact_id ,sum(total_sales) total_sales from (select * from ss union all select * from cs union all select * from ws) tmp1 group by i_manufact_id order by total_sales limit 100
SELECT i_manufact_id, SUM(TOTAL_SALES) AS TOTAL_SALES FROM (SELECT t3.i_manufact_id, SUM(store_sales.ss_ext_sales_price) AS TOTAL_SALES FROM store_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1999 AND d_moy = 4) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t0 ON store_sales.ss_addr_sk = t0.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_manufact_id IN (SELECT i_manufact_id AS I_MANUFACT_ID FROM item WHERE i_category = 'Home')) AS t3 ON store_sales.ss_item_sk = t3.i_item_sk GROUP BY t3.i_manufact_id UNION ALL SELECT t9.i_manufact_id, SUM(catalog_sales.cs_ext_sales_price) AS TOTAL_SALES FROM catalog_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1999 AND d_moy = 4) AS t5 ON catalog_sales.cs_sold_date_sk = t5.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t6 ON catalog_sales.cs_bill_addr_sk = t6.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_manufact_id IN (SELECT i_manufact_id AS I_MANUFACT_ID FROM item WHERE i_category = 'Home')) AS t9 ON catalog_sales.cs_item_sk = t9.i_item_sk GROUP BY t9.i_manufact_id UNION ALL SELECT t15.i_manufact_id, SUM(web_sales.ws_ext_sales_price) AS TOTAL_SALES FROM web_sales INNER JOIN (SELECT * FROM date_dim WHERE d_year = 1999 AND d_moy = 4) AS t11 ON web_sales.ws_sold_date_sk = t11.d_date_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -5) AS t12 ON web_sales.ws_bill_addr_sk = t12.ca_address_sk INNER JOIN (SELECT * FROM item WHERE i_manufact_id IN (SELECT i_manufact_id AS I_MANUFACT_ID FROM item WHERE i_category = 'Home')) AS t15 ON web_sales.ws_item_sk = t15.i_item_sk GROUP BY t15.i_manufact_id) AS t17 GROUP BY i_manufact_id ORDER BY 2 FETCH NEXT 100 ROWS ONLY
select i_item_id, ca_country, ca_state, ca_county, avg( cast(cs_quantity as decimal(12,2))) agg1, avg( cast(cs_list_price as decimal(12,2))) agg2, avg( cast(cs_coupon_amt as decimal(12,2))) agg3, avg( cast(cs_sales_price as decimal(12,2))) agg4, avg( cast(cs_net_profit as decimal(12,2))) agg5, avg( cast(c_birth_year as decimal(12,2))) agg6, avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7 from catalog_sales, customer_demographics cd1, customer_demographics cd2, customer, customer_address, date_dim, item where cs_sold_date_sk = d_date_sk and cs_item_sk = i_item_sk and cs_bill_cdemo_sk = cd1.cd_demo_sk and cs_bill_customer_sk = c_customer_sk and cd1.cd_gender = 'M' and cd1.cd_education_status = 'Unknown' and c_current_cdemo_sk = cd2.cd_demo_sk and c_current_addr_sk = ca_address_sk and c_birth_month in (10,8,7,12,4,11) and d_year = 2001 and ca_state in ('TX','LA','IN' ,'DE','MT','MO','IA') group by rollup (i_item_id, ca_country, ca_state, ca_county) order by ca_country, ca_state, ca_county, i_item_id limit 100
SELECT item.i_item_id AS I_ITEM_ID, t1.ca_country AS CA_COUNTRY, t1.ca_state AS CA_STATE, t1.ca_county AS CA_COUNTY, AVG(CAST(catalog_sales.cs_quantity AS DECIMAL(12, 2))) AS AGG1, AVG(CAST(catalog_sales.cs_list_price AS DECIMAL(12, 2))) AS AGG2, AVG(CAST(catalog_sales.cs_coupon_amt AS DECIMAL(12, 2))) AS AGG3, AVG(CAST(catalog_sales.cs_sales_price AS DECIMAL(12, 2))) AS AGG4, AVG(CAST(catalog_sales.cs_net_profit AS DECIMAL(12, 2))) AS AGG5, AVG(CAST(t0.c_birth_year AS DECIMAL(12, 2))) AS AGG6, AVG(CAST(t.cd_dep_count AS DECIMAL(12, 2))) AS AGG7 FROM item INNER JOIN (catalog_sales INNER JOIN (SELECT * FROM customer_demographics WHERE cd_gender = 'M' AND cd_education_status = 'Unknown') AS t ON catalog_sales.cs_bill_cdemo_sk = t.cd_demo_sk INNER JOIN (customer_demographics AS customer_demographics0 INNER JOIN (SELECT * FROM customer WHERE c_birth_month IN (4, 7, 8, 10, 11, 12)) AS t0 ON customer_demographics0.cd_demo_sk = t0.c_current_cdemo_sk) ON catalog_sales.cs_bill_customer_sk = t0.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_state IN ('DE', 'IA', 'IN', 'LA', 'MO', 'MT', 'TX')) AS t1 ON t0.c_current_addr_sk = t1.ca_address_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001) AS t2 ON catalog_sales.cs_sold_date_sk = t2.d_date_sk) ON item.i_item_sk = catalog_sales.cs_item_sk GROUP BY ROLLUP(item.i_item_id, t1.ca_country, t1.ca_state, t1.ca_county) ORDER BY t1.ca_country, t1.ca_state, t1.ca_county, item.i_item_id FETCH NEXT 100 ROWS ONLY
with v1 as( select i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum(ss_sales_price) sum_sales, avg(sum(ss_sales_price)) over (partition by i_category, i_brand, s_store_name, s_company_name, d_year) avg_monthly_sales, rank() over (partition by i_category, i_brand, s_store_name, s_company_name order by d_year, d_moy) rn from item, store_sales, date_dim, store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and ( d_year = 2001 or ( d_year = 2001-1 and d_moy =12) or ( d_year = 2001+1 and d_moy =1) ) group by i_category, i_brand, s_store_name, s_company_name, d_year, d_moy), v2 as( select v1.i_category ,v1.d_year ,v1.avg_monthly_sales ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum from v1, v1 v1_lag, v1 v1_lead where v1.i_category = v1_lag.i_category and v1.i_category = v1_lead.i_category and v1.i_brand = v1_lag.i_brand and v1.i_brand = v1_lead.i_brand and v1.s_store_name = v1_lag.s_store_name and v1.s_store_name = v1_lead.s_store_name and v1.s_company_name = v1_lag.s_company_name and v1.s_company_name = v1_lead.s_company_name and v1.rn = v1_lag.rn + 1 and v1.rn = v1_lead.rn - 1) select * from v2 where d_year = 2001 and avg_monthly_sales > 0 and case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1 order by sum_sales - avg_monthly_sales, nsum limit 100
SELECT t2.I_CATEGORY, t2.D_YEAR, t2.AVG_MONTHLY_SALES, t2.SUM_SALES, t5.SUM_SALES AS PSUM, t8.SUM_SALES AS NSUM, t2.SUM_SALES - t2.AVG_MONTHLY_SALES FROM (SELECT * FROM (SELECT item.i_category AS I_CATEGORY, item.i_brand AS I_BRAND, store.s_store_name AS S_STORE_NAME, store.s_company_name AS S_COMPANY_NAME, t.d_year AS D_YEAR, t.d_moy AS D_MOY, SUM(store_sales.ss_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY item.i_category, item.i_brand, store.s_store_name, store.s_company_name, t.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY item.i_category, item.i_brand, store.s_store_name, store.s_company_name, t.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY item.i_category, item.i_brand, store.s_store_name, store.s_company_name, t.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES, RANK() OVER (PARTITION BY item.i_category, item.i_brand, store.s_store_name, store.s_company_name ORDER BY t.d_year, t.d_moy) AS RN FROM item INNER JOIN store_sales ON item.i_item_sk = store_sales.ss_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 - 1 AND d_moy = 12 OR d_year = 2001 + 1 AND d_moy = 1) AS t ON store_sales.ss_sold_date_sk = t.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk GROUP BY item.i_brand, item.i_category, t.d_year, t.d_moy, store.s_store_name, store.s_company_name) AS t1 WHERE t1.D_YEAR = 2001 AND t1.AVG_MONTHLY_SALES > 0 AND CASE WHEN t1.AVG_MONTHLY_SALES > 0 THEN ABS(t1.SUM_SALES - t1.AVG_MONTHLY_SALES) / t1.AVG_MONTHLY_SALES > 0.1 ELSE FALSE END) AS t2 INNER JOIN (SELECT item0.i_category AS I_CATEGORY, item0.i_brand AS I_BRAND, store0.s_store_name AS S_STORE_NAME, store0.s_company_name AS S_COMPANY_NAME, t3.d_year AS D_YEAR, t3.d_moy AS D_MOY, SUM(store_sales0.ss_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(store_sales0.ss_sales_price)) OVER (PARTITION BY item0.i_category, item0.i_brand, store0.s_store_name, store0.s_company_name, t3.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales0.ss_sales_price)) OVER (PARTITION BY item0.i_category, item0.i_brand, store0.s_store_name, store0.s_company_name, t3.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(store_sales0.ss_sales_price)) OVER (PARTITION BY item0.i_category, item0.i_brand, store0.s_store_name, store0.s_company_name, t3.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES, RANK() OVER (PARTITION BY item0.i_category, item0.i_brand, store0.s_store_name, store0.s_company_name ORDER BY t3.d_year, t3.d_moy) AS RN FROM item AS item0 INNER JOIN store_sales AS store_sales0 ON item0.i_item_sk = store_sales0.ss_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 - 1 AND d_moy = 12 OR d_year = 2001 + 1 AND d_moy = 1) AS t3 ON store_sales0.ss_sold_date_sk = t3.d_date_sk INNER JOIN store AS store0 ON store_sales0.ss_store_sk = store0.s_store_sk GROUP BY item0.i_brand, item0.i_category, t3.d_year, t3.d_moy, store0.s_store_name, store0.s_company_name) AS t5 ON t2.I_CATEGORY = t5.I_CATEGORY AND t2.I_BRAND = t5.I_BRAND AND t2.S_STORE_NAME = t5.S_STORE_NAME AND t2.S_COMPANY_NAME = t5.S_COMPANY_NAME AND t2.RN = t5.RN + 1 INNER JOIN (SELECT item1.i_category AS I_CATEGORY, item1.i_brand AS I_BRAND, store1.s_store_name AS S_STORE_NAME, store1.s_company_name AS S_COMPANY_NAME, t6.d_year AS D_YEAR, t6.d_moy AS D_MOY, SUM(store_sales1.ss_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(store_sales1.ss_sales_price)) OVER (PARTITION BY item1.i_category, item1.i_brand, store1.s_store_name, store1.s_company_name, t6.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales1.ss_sales_price)) OVER (PARTITION BY item1.i_category, item1.i_brand, store1.s_store_name, store1.s_company_name, t6.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(store_sales1.ss_sales_price)) OVER (PARTITION BY item1.i_category, item1.i_brand, store1.s_store_name, store1.s_company_name, t6.d_year RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_MONTHLY_SALES, RANK() OVER (PARTITION BY item1.i_category, item1.i_brand, store1.s_store_name, store1.s_company_name ORDER BY t6.d_year, t6.d_moy) AS RN FROM item AS item1 INNER JOIN store_sales AS store_sales1 ON item1.i_item_sk = store_sales1.ss_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 - 1 AND d_moy = 12 OR d_year = 2001 + 1 AND d_moy = 1) AS t6 ON store_sales1.ss_sold_date_sk = t6.d_date_sk INNER JOIN store AS store1 ON store_sales1.ss_store_sk = store1.s_store_sk GROUP BY item1.i_brand, item1.i_category, t6.d_year, t6.d_moy, store1.s_store_name, store1.s_company_name) AS t8 ON t2.I_CATEGORY = t8.I_CATEGORY AND t2.I_BRAND = t8.I_BRAND AND t2.S_STORE_NAME = t8.S_STORE_NAME AND t2.S_COMPANY_NAME = t8.S_COMPANY_NAME AND t2.RN = t8.RN - 1 ORDER BY 7, t8.SUM_SALES FETCH NEXT 100 ROWS ONLY
with year_total as ( select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,d_year as year ,min(ss_net_paid) year_total ,'s' sale_type from customer ,store_sales ,date_dim where c_customer_sk = ss_customer_sk and ss_sold_date_sk = d_date_sk and d_year in (2001,2001+1) group by c_customer_id ,c_first_name ,c_last_name ,d_year union all select c_customer_id customer_id ,c_first_name customer_first_name ,c_last_name customer_last_name ,d_year as year ,min(ws_net_paid) year_total ,'w' sale_type from customer ,web_sales ,date_dim where c_customer_sk = ws_bill_customer_sk and ws_sold_date_sk = d_date_sk and d_year in (2001,2001+1) group by c_customer_id ,c_first_name ,c_last_name ,d_year ) select t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name from year_total t_s_firstyear ,year_total t_s_secyear ,year_total t_w_firstyear ,year_total t_w_secyear where t_s_secyear.customer_id = t_s_firstyear.customer_id and t_s_firstyear.customer_id = t_w_secyear.customer_id and t_s_firstyear.customer_id = t_w_firstyear.customer_id and t_s_firstyear.sale_type = 's' and t_w_firstyear.sale_type = 'w' and t_s_secyear.sale_type = 's' and t_w_secyear.sale_type = 'w' and t_s_firstyear.year = 2001 and t_s_secyear.year = 2001+1 and t_w_firstyear.year = 2001 and t_w_secyear.year = 2001+1 and t_s_firstyear.year_total > 0 and t_w_firstyear.year_total > 0 and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end order by 3,1,2 limit 100
SELECT t22.CUSTOMER_ID, t22.CUSTOMER_FIRST_NAME, t22.CUSTOMER_LAST_NAME FROM (SELECT * FROM (SELECT customer.c_customer_id AS CUSTOMER_ID, customer.c_first_name AS CUSTOMER_FIRST_NAME, customer.c_last_name AS CUSTOMER_LAST_NAME, t.d_year AS YEAR, MIN(store_sales.ss_net_paid) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t INNER JOIN store_sales ON t.d_date_sk = store_sales.ss_sold_date_sk INNER JOIN customer ON store_sales.ss_customer_sk = customer.c_customer_sk GROUP BY t.d_year, customer.c_customer_id, customer.c_first_name, customer.c_last_name UNION ALL SELECT customer0.c_customer_id AS CUSTOMER_ID, customer0.c_first_name AS CUSTOMER_FIRST_NAME, customer0.c_last_name AS CUSTOMER_LAST_NAME, t2.d_year AS YEAR, MIN(web_sales.ws_net_paid) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t2 INNER JOIN web_sales ON t2.d_date_sk = web_sales.ws_sold_date_sk INNER JOIN customer AS customer0 ON web_sales.ws_bill_customer_sk = customer0.c_customer_sk GROUP BY t2.d_year, customer0.c_customer_id, customer0.c_first_name, customer0.c_last_name) AS t5 WHERE SALE_TYPE = 'w' AND YEAR = 2001 + 1) AS t6 INNER JOIN ((SELECT * FROM (SELECT customer1.c_customer_id AS CUSTOMER_ID, customer1.c_first_name AS CUSTOMER_FIRST_NAME, customer1.c_last_name AS CUSTOMER_LAST_NAME, t7.d_year AS YEAR, MIN(store_sales0.ss_net_paid) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t7 INNER JOIN store_sales AS store_sales0 ON t7.d_date_sk = store_sales0.ss_sold_date_sk INNER JOIN customer AS customer1 ON store_sales0.ss_customer_sk = customer1.c_customer_sk GROUP BY t7.d_year, customer1.c_customer_id, customer1.c_first_name, customer1.c_last_name UNION ALL SELECT customer2.c_customer_id AS CUSTOMER_ID, customer2.c_first_name AS CUSTOMER_FIRST_NAME, customer2.c_last_name AS CUSTOMER_LAST_NAME, t10.d_year AS YEAR, MIN(web_sales0.ws_net_paid) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t10 INNER JOIN web_sales AS web_sales0 ON t10.d_date_sk = web_sales0.ws_sold_date_sk INNER JOIN customer AS customer2 ON web_sales0.ws_bill_customer_sk = customer2.c_customer_sk GROUP BY t10.d_year, customer2.c_customer_id, customer2.c_first_name, customer2.c_last_name) AS t13 WHERE SALE_TYPE = 's' AND YEAR = 2001 AND YEAR_TOTAL > 0) AS t14 INNER JOIN (SELECT * FROM (SELECT customer3.c_customer_id AS CUSTOMER_ID, customer3.c_first_name AS CUSTOMER_FIRST_NAME, customer3.c_last_name AS CUSTOMER_LAST_NAME, t15.d_year AS YEAR, MIN(store_sales1.ss_net_paid) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t15 INNER JOIN store_sales AS store_sales1 ON t15.d_date_sk = store_sales1.ss_sold_date_sk INNER JOIN customer AS customer3 ON store_sales1.ss_customer_sk = customer3.c_customer_sk GROUP BY t15.d_year, customer3.c_customer_id, customer3.c_first_name, customer3.c_last_name UNION ALL SELECT customer4.c_customer_id AS CUSTOMER_ID, customer4.c_first_name AS CUSTOMER_FIRST_NAME, customer4.c_last_name AS CUSTOMER_LAST_NAME, t18.d_year AS YEAR, MIN(web_sales1.ws_net_paid) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t18 INNER JOIN web_sales AS web_sales1 ON t18.d_date_sk = web_sales1.ws_sold_date_sk INNER JOIN customer AS customer4 ON web_sales1.ws_bill_customer_sk = customer4.c_customer_sk GROUP BY t18.d_year, customer4.c_customer_id, customer4.c_first_name, customer4.c_last_name) AS t21 WHERE SALE_TYPE = 's' AND YEAR = 2001 + 1) AS t22 ON t14.CUSTOMER_ID = t22.CUSTOMER_ID INNER JOIN (SELECT * FROM (SELECT customer5.c_customer_id AS CUSTOMER_ID, customer5.c_first_name AS CUSTOMER_FIRST_NAME, customer5.c_last_name AS CUSTOMER_LAST_NAME, t23.d_year AS YEAR, MIN(store_sales2.ss_net_paid) AS YEAR_TOTAL, 's' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t23 INNER JOIN store_sales AS store_sales2 ON t23.d_date_sk = store_sales2.ss_sold_date_sk INNER JOIN customer AS customer5 ON store_sales2.ss_customer_sk = customer5.c_customer_sk GROUP BY t23.d_year, customer5.c_customer_id, customer5.c_first_name, customer5.c_last_name UNION ALL SELECT customer6.c_customer_id AS CUSTOMER_ID, customer6.c_first_name AS CUSTOMER_FIRST_NAME, customer6.c_last_name AS CUSTOMER_LAST_NAME, t26.d_year AS YEAR, MIN(web_sales2.ws_net_paid) AS YEAR_TOTAL, 'w' AS SALE_TYPE FROM (SELECT * FROM date_dim WHERE d_year = 2001 OR d_year = 2001 + 1) AS t26 INNER JOIN web_sales AS web_sales2 ON t26.d_date_sk = web_sales2.ws_sold_date_sk INNER JOIN customer AS customer6 ON web_sales2.ws_bill_customer_sk = customer6.c_customer_sk GROUP BY t26.d_year, customer6.c_customer_id, customer6.c_first_name, customer6.c_last_name) AS t29 WHERE SALE_TYPE = 'w' AND YEAR = 2001 AND YEAR_TOTAL > 0) AS t30 ON t14.CUSTOMER_ID = t30.CUSTOMER_ID) ON t6.CUSTOMER_ID = t14.CUSTOMER_ID AND CASE WHEN t14.YEAR_TOTAL > 0 THEN CASE WHEN t30.YEAR_TOTAL > 0 THEN t6.YEAR_TOTAL / t30.YEAR_TOTAL > t22.YEAR_TOTAL / t14.YEAR_TOTAL ELSE FALSE END ELSE FALSE END ORDER BY t22.CUSTOMER_LAST_NAME, t22.CUSTOMER_ID, t22.CUSTOMER_FIRST_NAME FETCH NEXT 100 ROWS ONLY
select cc_call_center_id Call_Center, cc_name Call_Center_Name, cc_manager Manager, sum(cr_net_loss) Returns_Loss from call_center, catalog_returns, date_dim, customer, customer_address, customer_demographics, household_demographics where cr_call_center_sk = cc_call_center_sk and cr_returned_date_sk = d_date_sk and cr_returning_customer_sk= c_customer_sk and cd_demo_sk = c_current_cdemo_sk and hd_demo_sk = c_current_hdemo_sk and ca_address_sk = c_current_addr_sk and d_year = 2000 and d_moy = 11 and ( (cd_marital_status = 'M' and cd_education_status = 'Unknown') or(cd_marital_status = 'W' and cd_education_status = 'Advanced Degree')) and hd_buy_potential like '0-500%' and ca_gmt_offset = -7 group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status order by sum(cr_net_loss) desc
SELECT t1.cc_call_center_id AS CALL_CENTER, t1.cc_name AS CALL_CENTER_NAME, t1.cc_manager AS MANAGER, SUM(t1.cr_net_loss) AS RETURNS_LOSS FROM (SELECT * FROM customer_demographics WHERE cd_marital_status = 'M' AND cd_education_status = 'Unknown' OR cd_marital_status = 'W' AND cd_education_status = 'Advanced Degree') AS t INNER JOIN ((SELECT call_center.cc_call_center_sk, call_center.cc_call_center_id, call_center.cc_rec_start_date, call_center.cc_rec_end_date, call_center.cc_closed_date_sk, call_center.cc_open_date_sk, call_center.cc_name, call_center.cc_class, call_center.cc_employees, call_center.cc_sq_ft, call_center.cc_hours, call_center.cc_manager, call_center.cc_mkt_id, call_center.cc_mkt_class, call_center.cc_mkt_desc, call_center.cc_market_manager, call_center.cc_division, call_center.cc_division_name, call_center.cc_company, call_center.cc_company_name, call_center.cc_street_number, call_center.cc_street_name, call_center.cc_street_type, call_center.cc_suite_number, call_center.cc_city, call_center.cc_county, call_center.cc_state, call_center.cc_zip, call_center.cc_country, call_center.cc_gmt_offset, call_center.cc_tax_percentage, catalog_returns.cr_returned_date_sk, catalog_returns.cr_returned_time_sk, catalog_returns.cr_item_sk, catalog_returns.cr_refunded_customer_sk, catalog_returns.cr_refunded_cdemo_sk, catalog_returns.cr_refunded_hdemo_sk, catalog_returns.cr_refunded_addr_sk, catalog_returns.cr_returning_customer_sk, catalog_returns.cr_returning_cdemo_sk, catalog_returns.cr_returning_hdemo_sk, catalog_returns.cr_returning_addr_sk, catalog_returns.cr_call_center_sk, catalog_returns.cr_catalog_page_sk, catalog_returns.cr_ship_mode_sk, catalog_returns.cr_warehouse_sk, catalog_returns.cr_reason_sk, catalog_returns.cr_order_number, catalog_returns.cr_return_quantity, catalog_returns.cr_return_amount, catalog_returns.cr_return_tax, catalog_returns.cr_return_amt_inc_tax, catalog_returns.cr_fee, catalog_returns.cr_return_ship_cost, catalog_returns.cr_refunded_cash, catalog_returns.cr_reversed_charge, catalog_returns.cr_store_credit, catalog_returns.cr_net_loss, t0.d_date_sk, t0.d_date_id, t0.d_date, t0.d_month_seq, t0.d_week_seq, t0.d_quarter_seq, t0.d_year, t0.d_dow, t0.d_moy, t0.d_dom, t0.d_qoy, t0.d_fy_year, t0.d_fy_quarter_seq, t0.d_fy_week_seq, t0.d_day_name, t0.d_quarter_name, t0.d_holiday, t0.d_weekend, t0.d_following_holiday, t0.d_first_dom, t0.d_last_dom, t0.d_same_day_ly, t0.d_same_day_lq, t0.d_current_day, t0.d_current_week, t0.d_current_month, t0.d_current_quarter, t0.d_current_year FROM (SELECT * FROM date_dim WHERE d_year = 2000 AND d_moy = 11) AS t0 INNER JOIN catalog_returns ON t0.d_date_sk = catalog_returns.cr_returned_date_sk INNER JOIN call_center ON catalog_returns.cr_call_center_sk = call_center.cc_call_center_sk) AS t1 INNER JOIN customer ON t1.cr_returning_customer_sk = customer.c_customer_sk INNER JOIN (SELECT * FROM customer_address WHERE ca_gmt_offset = -7) AS t2 ON customer.c_current_addr_sk = t2.ca_address_sk INNER JOIN (SELECT * FROM household_demographics WHERE hd_buy_potential LIKE '0-500%') AS t3 ON customer.c_current_hdemo_sk = t3.hd_demo_sk) ON t.cd_demo_sk = customer.c_current_cdemo_sk GROUP BY t.cd_marital_status, t.cd_education_status, t1.cc_call_center_id, t1.cc_name, t1.cc_manager ORDER BY 4 DESC
select * from (select i_manufact_id, sum(ss_sales_price) sum_sales, avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales from item, store_sales, date_dim, store where ss_item_sk = i_item_sk and ss_sold_date_sk = d_date_sk and ss_store_sk = s_store_sk and d_month_seq in (1224,1224+1,1224+2,1224+3,1224+4,1224+5,1224+6,1224+7,1224+8,1224+9,1224+10,1224+11) and ((i_category in ('Books','Children','Electronics') and i_class in ('personal','portable','reference','self-help') and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7', 'exportiunivamalg #9','scholaramalgamalg #9')) or(i_category in ('Women','Music','Men') and i_class in ('accessories','classical','fragrances','pants') and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1', 'importoamalg #1'))) group by i_manufact_id, d_qoy ) tmp1 where case when avg_quarterly_sales > 0 then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales else null end > 0.1 order by avg_quarterly_sales, sum_sales, i_manufact_id limit 100
SELECT * FROM (SELECT t.i_manufact_id AS I_MANUFACT_ID, SUM(store_sales.ss_sales_price) AS SUM_SALES, CASE WHEN (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_manufact_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) > 0 THEN COALESCE(SUM(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_manufact_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING), 0) ELSE NULL END / (COUNT(SUM(store_sales.ss_sales_price)) OVER (PARTITION BY t.i_manufact_id RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)) AS AVG_QUARTERLY_SALES FROM (SELECT * FROM item WHERE i_category IN ('Books', 'Children', 'Electronics') AND i_class IN ('personal', 'portable', 'reference', 'self-help') AND i_brand IN ('exportiunivamalg #9', 'scholaramalgamalg #14', 'scholaramalgamalg #7', 'scholaramalgamalg #9') OR i_category IN ('Men', 'Music', 'Women') AND i_class IN ('accessories', 'classical', 'fragrances', 'pants') AND i_brand IN ('amalgimporto #1', 'edu packscholar #1', 'exportiimporto #1', 'importoamalg #1')) AS t INNER JOIN store_sales ON t.i_item_sk = store_sales.ss_item_sk INNER JOIN (SELECT * FROM date_dim WHERE d_month_seq = 1224 OR (d_month_seq = 1224 + 1 OR d_month_seq = 1224 + 2) OR (d_month_seq = 1224 + 3 OR (d_month_seq = 1224 + 4 OR d_month_seq = 1224 + 5)) OR (d_month_seq = 1224 + 6 OR (d_month_seq = 1224 + 7 OR d_month_seq = 1224 + 8) OR (d_month_seq = 1224 + 9 OR (d_month_seq = 1224 + 10 OR d_month_seq = 1224 + 11)))) AS t0 ON store_sales.ss_sold_date_sk = t0.d_date_sk INNER JOIN store ON store_sales.ss_store_sk = store.s_store_sk GROUP BY t.i_manufact_id, t0.d_qoy) AS t2 WHERE CASE WHEN t2.AVG_QUARTERLY_SALES > 0 THEN ABS(t2.SUM_SALES - t2.AVG_QUARTERLY_SALES) / t2.AVG_QUARTERLY_SALES > 0.1 ELSE FALSE END ORDER BY AVG_QUARTERLY_SALES, SUM_SALES, I_MANUFACT_ID FETCH NEXT 100 ROWS ONLY
